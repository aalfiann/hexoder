<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Right Way to Deep Clone Object JavaScript</title>
      <link href="/post/right-way-to-deep-clone-object-javascript/"/>
      <url>/post/right-way-to-deep-clone-object-javascript/</url>
      
        <content type="html"><![CDATA[<p>Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:</p><a id="more"></a><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><p>The most best answer in <code>Stackoverflow</code>, to deep clone an object javascript is just like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify());</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-bad-practice"><a href="#Then-why-this-is-bad-practice" class="headerlink" title="Then why this is bad practice?"></a>Then why this is bad practice?</h3><h4 id="Convertion-Problem"><a href="#Convertion-Problem" class="headerlink" title="Convertion Problem"></a>Convertion Problem</h4><p>The problem is <code>JSON.stringify()</code> cloud lead into wrong convertion. Because it just convert the javascript <code>Object</code> into <code>String</code>. You can not control for spesific instance inside the object.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="literal">undefined</span> &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="built_in">Symbol</span>() &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; &#125;);</span><br><span class="line"><span class="comment">// all will be converted to just "&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><p><code>Date()</code> will also parsed to string, so you will lose it.</p><h4 id="Not-Eficient-very-slow"><a href="#Not-Eficient-very-slow" class="headerlink" title="Not Eficient (very slow)"></a>Not Eficient (very slow)</h4><p>I have test to deep clone 1 million object and this take higher than 1 seconds (<code>1823ms</code>). This will freeze your application since this way is blocking (synchronous). You have to be more tricky to avoid this blocking for handle big object.</p></li></ul><h2 id="Good-Practice"><a href="#Good-Practice" class="headerlink" title="Good Practice"></a>Good Practice</h2><p>We should go back to use primitive way by using <code>loop</code> and <code>recursion</code>.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone, i;</span><br><span class="line">  <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">  <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">    clone = [];</span><br><span class="line">    <span class="keyword">var</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">  clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-good-practice"><a href="#Then-why-this-is-good-practice" class="headerlink" title="Then why this is good practice?"></a>Then why this is good practice?</h3><h4 id="Easy-to-modify"><a href="#Easy-to-modify" class="headerlink" title="Easy to modify"></a>Easy to modify</h4><p>Because using loop you can put any condition inside the logic.</p><h4 id="5x-faster"><a href="#5x-faster" class="headerlink" title="5x faster"></a>5x faster</h4><p>This is 5x faster comparing with <code>JSON.parse(JSON.stringify())</code>. I have test this with 1 million object and it just takes <code>150ms</code>.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Before I write this topic, I have research carefully about deepClone, especially for the performance in NodeJS.</p><h3 id="json-parse-stringify-js"><a href="#json-parse-stringify-js" class="headerlink" title="json-parse-stringify.js"></a>json-parse-stringify.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="loop-recursive-js"><a href="#loop-recursive-js" class="headerlink" title="loop-recursive.js"></a>loop-recursive.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone, i;</span><br><span class="line">    <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">    <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">      clone = [];</span><br><span class="line">      <span class="keyword">var</span> len = array.length;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">    clone = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = deepClone(array);</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I know there is another way to deepClone an object in javascript. You could using <code>jQuery</code> or <code>Lodash</code>, but the performance is very bad. I recommend you to using native way.</p><p>So this is only small research from me about deep clone object in javascript. The decision is going back to yours.</p><p>Thank you.</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Contact</title>
      <link href="/post/contact/"/>
      <url>/post/contact/</url>
      
        <content type="html"><![CDATA[<h3 id="Contact-Person"><a href="#Contact-Person" class="headerlink" title="Contact Person:"></a>Contact Person:</h3><p>Hexoder originated from Indonesia and managed by myself.</p><a id="more"></a><p><strong>M ABD AZIZ ALFIAN</strong></p><p><strong>WhatsApp</strong>: +6283806075400<br><strong>Email</strong>: <a href="mailto:aalfiann@gmail.com" target="_blank" rel="noopener">aalfiann@gmail.com</a></p><p>Submission of matters relating to content and copyright,<br>please feel free to email us as soon as possible.</p>]]></content>
      
      
      <categories>
          
          <category> Hexoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy Policy</title>
      <link href="/post/privacy-policy/"/>
      <url>/post/privacy-policy/</url>
      
        <content type="html"><![CDATA[<h2 id="Privacy-Policy-for-Hexoder"><a href="#Privacy-Policy-for-Hexoder" class="headerlink" title="Privacy Policy for Hexoder"></a>Privacy Policy for Hexoder</h2><p>At Hexoder, accessible from <a href="https://hexoder.com">https://hexoder.com</a>, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Hexoder and how we use it.</p><p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p><a id="more"></a><h3 id="Log-Files"><a href="#Log-Files" class="headerlink" title="Log Files"></a>Log Files</h3><p>Hexoder follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services’ analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users’ movement on the website, and gathering demographic information.</p><h3 id="Cookies-and-Web-Beacons"><a href="#Cookies-and-Web-Beacons" class="headerlink" title="Cookies and Web Beacons"></a>Cookies and Web Beacons</h3><p>Like any other website, Hexoder uses ‘cookies’. These cookies are used to store information including visitors’ preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users’ experience by customizing our web page content based on visitors’ browser type and/or other information.</p><h3 id="Google-DoubleClick-DART-Cookie"><a href="#Google-DoubleClick-DART-Cookie" class="headerlink" title="Google DoubleClick DART Cookie"></a>Google DoubleClick DART Cookie</h3><p>Google is one of a third-party vendor on our site. It also uses cookies, known as DART cookies, to serve ads to our site visitors based upon their visit to <a href="http://www.website.com" target="_blank" rel="noopener">www.website.com</a> and other sites on the internet. However, visitors may choose to decline the use of DART cookies by visiting the Google ad and content network Privacy Policy at the following URL – <a href="https://policies.google.com/technologies/ads" target="_blank" rel="noopener">https://policies.google.com/technologies/ads</a></p><h3 id="Privacy-Policies"><a href="#Privacy-Policies" class="headerlink" title="Privacy Policies"></a>Privacy Policies</h3><p>You may consult this list to find the Privacy Policy for each of the advertising partners of Hexoder. Our Privacy Policy was created with the help of the Privacy Policy Generator and the Generate Privacy Policy Generator.</p><p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on Hexoder, which are sent directly to users’ browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p><p>Note that Hexoder has no access to or control over these cookies that are used by third-party advertisers.</p><h3 id="Third-Party-Privacy-Policies"><a href="#Third-Party-Privacy-Policies" class="headerlink" title="Third Party Privacy Policies"></a>Third Party Privacy Policies</h3><p>Hexoder’s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. You may find a complete list of these Privacy Policies and their links here: Privacy Policy Links.</p><p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers’ respective websites. What Are Cookies?</p><h3 id="Children’s-Information"><a href="#Children’s-Information" class="headerlink" title="Children’s Information"></a>Children’s Information</h3><p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p><p>Hexoder does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p><h3 id="Online-Privacy-Policy-Only"><a href="#Online-Privacy-Policy-Only" class="headerlink" title="Online Privacy Policy Only"></a>Online Privacy Policy Only</h3><p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in Hexoder. This policy is not applicable to any information collected offline or via channels other than this website.</p><h3 id="Consent"><a href="#Consent" class="headerlink" title="Consent"></a>Consent</h3><p>By using our website, you hereby consent to our Privacy Policy and agree to its Terms and Conditions.</p>]]></content>
      
      
      <categories>
          
          <category> Hexoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Hexoder</title>
      <link href="/post/about/"/>
      <url>/post/about/</url>
      
        <content type="html"><![CDATA[<h2 id="Learning-JavaScript-with-Hexoder"><a href="#Learning-JavaScript-with-Hexoder" class="headerlink" title="Learning JavaScript with Hexoder"></a>Learning JavaScript with Hexoder</h2><p>This website is all about learning, tutorial and research about popular library in NPMJS. I will try to explain in very simple explanation so that it will be useful for beginners.</p><a id="more"></a><h3 id="Why-JavaScript"><a href="#Why-JavaScript" class="headerlink" title="Why JavaScript ?"></a>Why JavaScript ?</h3><p>In the past years JavaScript was only used to support server side programming languages such as PHP, Python, etc. But only as a client side.</p><p>However, since Ryan Dahl created NodeJS, JavaScript can be used as a server side language. This is a big thing and I’m sure JavaScript will be the future in the programming world. Proven since 2010, JavaScript has always been the most popular language to learn.</p><p>So it’s not too late if you want to start learning JavaScript from now on. Hexoder will try to provide a very simple explanation for you.</p><p>So make sure you bookmark this Hexoder website and get article updates every week.</p><p>Thank you</p>]]></content>
      
      
      <categories>
          
          <category> Hexoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexoder </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
