<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to Cache Mongoose in NodeJS</title>
      <link href="/post/how-to-cache-mongoose-in-nodejs/"/>
      <url>/post/how-to-cache-mongoose-in-nodejs/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8cc6c4750760633f019e2e2f18ce34211.jpg" alt=""></p><p>Hello guys, today I want to write an article about How to cache mongoose in NodeJS. Why? Because using cache will give you much benefit and actualy saving your cost bandwidth. So, in this article we will learn how to create a cache for mongoose using in memory, redis or filebased.</p><a id="more"></a><h3 id="Reason-to-Cache"><a href="#Reason-to-Cache" class="headerlink" title="Reason to Cache"></a>Reason to Cache</h3><ul><li><p><strong>Mongoose doesn’t cache query</strong><br>As default, mongoose doesn’t have a cache feature but they have a Model.Hydrate. So we have to create or use other library to make this work.</p></li><li><p><strong>Save your Database</strong><br>In high traffic, your database will be dead if you doesn’t cache your query result. Even you have a super database server, this won’t help much except you have a cache mechanism.</p></li><li><p><strong>Saving Cost</strong><br>With using cache, the request hit to database server will be slowdown, so you will save the bandwidth and of course it will saving your cost.</p></li></ul><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><p>Just use this library &gt;&gt; <a href="https://github.com/aalfiann/recachegoose" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">recachegoose</a>.</p><h3 id="How-mongoose-Cache-Work-with-Hydrate"><a href="#How-mongoose-Cache-Work-with-Hydrate" class="headerlink" title="How mongoose Cache Work with Hydrate"></a>How mongoose Cache Work with Hydrate</h3><p>Please see <a href="https://mongoosejs.com/docs/api.html#model_Model.hydrate" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://mongoosejs.com/docs/api.html#model_Model.hydrate</a>.</p><p>Unfortunately, the official mongoose documentations doesn’t explain much about this, so I will make this easy to understand with two examples below.</p><ul><li><p>Example Simple Model</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set cache</span></span><br><span class="line"><span class="keyword">let</span> todo = Todo.findById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now todo has a query and then we need to save into redis</span></span><br><span class="line">redis.set(key, todo); <span class="comment">// stores as raw json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read cache</span></span><br><span class="line"><span class="keyword">let</span> todoCache = redis.get(key); <span class="comment">// returns as raw json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now we have a cached result from redis then have to return to model with hydrate</span></span><br><span class="line"><span class="keyword">let</span> todo = Todo.hydrate(todoCache); <span class="comment">// converts in to mongoose model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now todo already converted to model so we are able to use it as model</span></span><br><span class="line"><span class="keyword">let</span> createdBy = todo.populate(<span class="string">'createdBy'</span>);</span><br></pre></td></tr></table></figure></li><li><p>Example of Array Model</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set cache</span></span><br><span class="line"><span class="keyword">let</span> todos = Todo.findAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// now todo has a query and then we need to save into redis</span></span><br><span class="line">redis.set(<span class="string">'todos'</span>, todos); <span class="comment">// stores as array of json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read cache</span></span><br><span class="line"><span class="keyword">let</span> cachedTodos = redis.get(<span class="string">'todos'</span>); <span class="comment">// returns as array of json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now we have a cached result from redis then have to return to model with hydrate</span></span><br><span class="line"><span class="keyword">let</span> todos = cachedTodos.map(<span class="function"><span class="params">todo</span> =&gt;</span> Todo.hydrate(todo)); <span class="comment">// converts in to mongoose model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now todo already converted to model so we are able to use it as model</span></span><br><span class="line"><span class="comment">// for this example assume that we filter for todo that already done</span></span><br><span class="line"><span class="keyword">let</span> incompleteTodos = todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.isDone);</span><br></pre></td></tr></table></figure></li></ul><p>That’s very easy right?<br>But don’t use above code in your application, we have better way with using <a href="http://github.com/aalfiann/recachegoose" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">recachegoose</a>.</p><h3 id="Using-recachegoose"><a href="#Using-recachegoose" class="headerlink" title="Using recachegoose"></a>Using recachegoose</h3><p><a href="http://github.com/aalfiann/recachegoose" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">recachegoose</a> is a library for mongoose cache in memory, redis or filebased.</p><ul><li><p>In memory</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> cachegoose = <span class="built_in">require</span>(<span class="string">'recachegoose'</span>);</span><br><span class="line"></span><br><span class="line">cachegoose(mongoose, &#123; <span class="attr">engine</span>: <span class="string">'memory'</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>With File</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> cachegoose = <span class="built_in">require</span>(<span class="string">'recachegoose'</span>);</span><br><span class="line"></span><br><span class="line">cachegoose(mongoose, &#123; <span class="attr">engine</span>: <span class="string">'file'</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>With Redis</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> cachegoose = <span class="built_in">require</span>(<span class="string">'recachegoose'</span>);</span><br><span class="line"></span><br><span class="line">cachegoose(mongoose, &#123;</span><br><span class="line">  engine: <span class="string">'redis'</span>,</span><br><span class="line">  port: <span class="number">6379</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or with redis connection string</span></span><br><span class="line">cachegoose(mongoose, &#123;</span><br><span class="line">  engine: <span class="string">'redis'</span>,</span><br><span class="line">  client: <span class="built_in">require</span>(<span class="string">'redis'</span>).createClient(<span class="string">'redis://localhost:6379'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Usage Cache</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Record</span><br><span class="line">  .find(&#123; <span class="attr">some_condition</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .cache(<span class="number">30</span>) <span class="comment">// The number of seconds to cache the query.  Defaults to 60 seconds.</span></span><br><span class="line">  .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, records</span>) </span>&#123; <span class="comment">// you are able to use callback exec or promise</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">Record</span><br><span class="line">  .aggregate()</span><br><span class="line">  .group(&#123; <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">'$some_field'</span> &#125; &#125;)</span><br><span class="line">  .cache(<span class="number">0</span>) <span class="comment">// Explicitly passing in 0 will cache the results indefinitely.</span></span><br><span class="line">  .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, aggResults</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>Cache with Custom Key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userId = <span class="string">'1234567890'</span>;</span><br><span class="line"></span><br><span class="line">Children</span><br><span class="line">  .find(&#123; <span class="attr">parentId</span>: userId &#125;)</span><br><span class="line">  .cache(<span class="number">0</span>, userId + <span class="string">'-children'</span>) <span class="comment">/* Will create a redis entry          */</span></span><br><span class="line">  .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, records</span>) </span>&#123;  <span class="comment">/* with the key '1234567890-children' */</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">ChildrenSchema.post(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Clear the parent's cache, since a new child has been added.</span></span><br><span class="line">  cachegoose.clearCache(child.parentId + <span class="string">'-children'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Clearing Cache</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cachegoose.clearCache(<span class="string">'your_key'</span>, callback); <span class="comment">// callback is optional</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>After you know how to create a cache mechanism to mongoose, of course you can create your own library by yourself. But just don’t reinvent the wheels. Doing mongoose cache with recachegoose is very easy, clean and save your time. recachegoose already support multiple cache mechanism, you are able to use in memory, redis or filebased cache. But I don’t recommend to use filebased cache because I know it fast but it doesn’t scalable.</p><p>Actualy recachegoose is originally named as <a href="https://github.com/boblauer/cachegoose" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">cachegoose</a> and created by <strong>Boblauer</strong>, but I forked this because it seems was inactive for 2 years ago (since I write this article). I choose cachegoose library because based on <a href="http://github.com/cayasso/cacheman" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Cacheman</a> which is they support multiple engine for caching. Unfortunately Cacheman library seems was inactive and too old, so I forked this too and called <a href="https://github.com/aalfiann/recacheman" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">recacheman</a>.</p><p>In this forked version of cachegoose, I’ve modified many things:</p><ul><li>Removed old and unnecessary libraries.</li><li>Fixed some bugs.</li><li>Fixed vulnerable on dependencies.</li><li>Improved performance.</li><li>Update unit test because of deprecated function.</li></ul><p>I will welcome for any PR and fast response to solve any issues for this project because I also used this library for my important project.</p><p>If you having problem or still not understanding how to create a cache to mongoose, just feel free to leave a comment below.</p><p>Thank you for reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Install PhantomJS in Elementary OS 5</title>
      <link href="/post/how-to-install-phantomjs-in-elementary-os-5/"/>
      <url>/post/how-to-install-phantomjs-in-elementary-os-5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe86818cb573b94e1087ee4bcfc6724ec0c.jpg" alt=""></p><p>Hello guys, Have you ever heard about automation scripting with headless browser? Maybe yes, because this is the one of many methods to make a test your front end website. Or maybe for scrapping the data from the website that used CSR (Client Side Rendering).</p><p>Today I want to write an article about installing the PhantomJS in Elementary OS 5 Hera, decribe a little bit what is PhantomJS used for and give you a simple two examples to use it.</p><a id="more"></a><h3 id="What-is-PhantomJS"><a href="#What-is-PhantomJS" class="headerlink" title="What is PhantomJS"></a>What is PhantomJS</h3><p><a href="https://phantomjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">PhantomJS</a> is a (today was discontinued) headless browser used for automating web page interaction. PhantomJS provides a JavaScript API enabling automated navigation, screenshots, user behavior and assertions making it a common tool used to run browser-based unit tests in a headless system like a continuous integration environment.</p><p>But there are Malicious use of PhantomJS, it is because PhantomJS is runnable without a UI, scriptable via JavaScript, and relatively adherent to modern browser specifications, it is commonly used as a way to automate attacks against web sites.</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p><strong>1. Prerequisites Library</strong><br>Before installing PhantomJS, we need to make sure the prerequisites library has been installed first in our machine.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential chrpath libssl-dev libxft-dev</span><br><span class="line">sudo apt install libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev</span><br></pre></td></tr></table></figure><p><strong>2. Install PhantomJS</strong><br>Now we have to download the PhantomJS. Actually PhantomJS is still suspended in development, so we must download the version 2.1.1 (this is the stable version).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class="line">sudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/</span><br></pre></td></tr></table></figure><p><strong>3. Create a Symlink</strong><br>A symlink (also called a symbolic link) is a type of file in Linux that points to another file or a folder on your computer. Symlinks are similar to shortcuts in Windows.</p><p>Some people call symlinks “soft links” – a type of link in Linux/UNIX systems – as opposed to “hard links.”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin</span><br></pre></td></tr></table></figure><p><strong>4. Verify PhantomJS Version</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phantomjs --version</span><br></pre></td></tr></table></figure><p>If the PhantomJS version shows 2.1.1 in your terminal, then PhantomJS already installed in your machine.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><strong>1. Folder Structure</strong><br>In this example I will use folder structure like this</p><ul><li>learn-phantomjs (directory)<ul><li>screenshots (directory)</li><li>src (directory)</li></ul></li></ul><p><strong>2. Basic</strong><br>This just a basic example to take a screenshot of a webpage.</p><ul><li>Create a file name <code>basic.js</code> inside <strong>src</strong> directory.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line">page.open(<span class="string">'http://example.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Status: '</span> + status);</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">'success'</span>) &#123;</span><br><span class="line">    page.render(<span class="string">'screenshots/basic.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>Run it<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phantomjs src/basic.js</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. Advanced</strong><br>In this advanced example, I want to show you how we could scrape the data from another site which is use CSR (Client Side Rendering).</p><ul><li>Create a file name <code>datatables.js</code> inside <strong>src</strong> directory.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line"><span class="keyword">var</span> system = <span class="built_in">require</span>(<span class="string">'system'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitFor</span>(<span class="params">testFx, onReady, timeOutMillis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> maxtimeOutMillis = timeOutMillis ? timeOutMillis : <span class="number">3000</span>, <span class="comment">//&lt; Default Max Timout is 3s</span></span><br><span class="line">    start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    condition = <span class="literal">false</span>,</span><br><span class="line">    interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &lt; maxtimeOutMillis) &amp;&amp; !condition ) &#123;</span><br><span class="line">        <span class="comment">// If not time-out yet and condition not yet fulfilled</span></span><br><span class="line">        condition = (<span class="keyword">typeof</span>(testFx) === <span class="string">"string"</span> ? <span class="built_in">eval</span>(testFx) : testFx()); <span class="comment">//&lt; defensive code</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!condition) &#123;</span><br><span class="line">          <span class="comment">// If condition still not fulfilled (timeout but condition is 'false')</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"'waitFor()' timeout"</span>);</span><br><span class="line">          phantom.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Condition fulfilled (timeout and/or condition is 'true')</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"'waitFor()' finished in "</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start) + <span class="string">"ms."</span>);</span><br><span class="line">          <span class="keyword">typeof</span>(onReady) === <span class="string">"string"</span> ? <span class="built_in">eval</span>(onReady) : onReady(); <span class="comment">//&lt; Do what it's supposed to do once the condition is fulfilled</span></span><br><span class="line">          clearInterval(interval); <span class="comment">//&lt; Stop this interval</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">250</span>); <span class="comment">//&lt; repeat check every 250ms</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (system.args.length !== <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'invalid call'</span>);</span><br><span class="line">  phantom.exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Set another User Agent</span></span><br><span class="line">  page.settings.userAgent = <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set viewport</span></span><br><span class="line">  page.viewportSize = &#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set listen on request page</span></span><br><span class="line">  <span class="comment">// page.onResourceRequested = function (request) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log('Request ' + JSON.stringify(request, undefined, 4))</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set listen on error page</span></span><br><span class="line">  page.onError = <span class="function"><span class="keyword">function</span> (<span class="params">msg, trace</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    trace.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'  '</span>, item.file, <span class="string">':'</span>, item.line);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set listen console from web target</span></span><br><span class="line">  page.onConsoleMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page.open(<span class="string">'https://datatables.net/examples/data_sources/ajax'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Check for page load success</span></span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="string">'success'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Unable to access network'</span>);</span><br><span class="line">      phantom.exit();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Status: '</span> + status);</span><br><span class="line">      <span class="comment">// Wait for 'tbody' to be visible</span></span><br><span class="line">      waitFor(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check in the page if a specific element is now visible</span></span><br><span class="line">        <span class="keyword">return</span> page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">"tbody"</span>).is(<span class="string">":visible"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"The tbody should be visible now."</span>);</span><br><span class="line">        <span class="comment">// get the data from datatables</span></span><br><span class="line">        page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">document</span>.title);</span><br><span class="line">          <span class="keyword">var</span> tBody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>);</span><br><span class="line">          <span class="keyword">var</span> tableRow = tBody.getElementsByTagName(<span class="string">'tr'</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; tableRow.length; t++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(tableRow[t].innerText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// take a screenshot</span></span><br><span class="line">        page.render(<span class="string">'screenshots/datatables.png'</span>);</span><br><span class="line">        <span class="comment">// exit phantomjs</span></span><br><span class="line">        phantom.exit();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Run it<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phantomjs src/datatables.js</span><br></pre></td></tr></table></figure></li></ul><p>The stealed data will be shows at your terminal screen.</p><p><strong>Explanation</strong><br>In this advanced example, we will make a phantomjs to steal the data rendered by datatables from other webpage. So we have to create the <strong>waitFor</strong> function to wait the phantomjs until the spesific selector already visible. Also I’ve put some listener on console to help you easier to listen what happened in the web target.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Why I write an article about PhantomJS? Maybe this is a hard part for newbie, because the official PhantomJS website there is no any single documentation that explain how to install it. Even I was used PhantomJS, I didn’t remember how to install it, I’ve always to search again through Google to do this.</p><p>If you read and follow this tutorial carefully, to install and to use PhantomJS is very easy. I’ve made this in very simple explanation. After you read this article, hope you will easier to follow PhantomJS API documentation.</p><p><strong>What is CSR ?</strong><br>In JavaScript development world today, there are two type of website which is use SSR and CSR. CSR is Client Side Rendering, for simple explanation, any website who use Ajax to load the data from server, we can call it as CSR.</p><p>The problem is a website who are using Ajax, the data can’t be scrapped directly by using server side request (eg. cURL). Why? Because cURL just download it response and can’t make execution on JavaScript. So the solution is we need a headless browser (PhantomJS).</p><p><strong>Source Code</strong><br>This example is already on my <a href="https://github.com/aalfiann/learn-phantomjs" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">github</a>, just download it to make you easier in learning and make a new research test for you.</p><p><strong>Pros and Cons</strong><br>Actualy I was used PhantomJS in very long time in a back years ago but still used it until this time in some condition only.</p><p><strong>Pros</strong></p><ul><li>PhantomJS is cross platform (support for windows, linux and mac).</li><li>PhantomJS is very fast because run in native.</li><li>PhantomJS is based on WebKit browser, similar to Safari and Google Chrome, very easy to use and huge community.</li><li>PhantomJS is using outdated WebKit browser, means you are still able to use a deprecated JavaScript function.</li></ul><p><strong>Cons</strong></p><ul><li>PhantomJS not support the latest/modern javascript code style, you have to write your code following ES5 standard.</li><li>PhantomJS didn’t shows error stacks when you fail at execution code inside <strong>evaluate</strong> function.</li><li>PhantomJS still suspended in development, the latest released still 2.1.1 at 2018. So PhantomJS seems too old to use for today.</li><li>PhantomJS lack of built-in JavaScript feature because using outdated WebKit browser.</li></ul><p>For more better experience of using PhantomJS, I suggest you to learn <a href="https://casperjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">CasperJS</a>. CasperJS is a suite of libraries on top of PhantomJS that extend its capabilities as a client for automated web page testing.</p><p>If you want to use PhantomJS with NodeJS, I suggest you to learn <a href="https://github.com/WaterfallEngineering/SpookyJS" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">SpookyJS</a>.</p><p><strong>Alternative</strong><br>If you need an alternative for headless browser like PhantomJS, you can try <a href="https://pptr.dev" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Puppeteer</a>.<br>Maybe I will create an article about Puppeteer next time.</p><p>If you have any question about PhantomJS, feel free to leave it at comment below.</p><p>Thank you for reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elementary-os </tag>
            
            <tag> app </tag>
            
            <tag> ubuntu </tag>
            
            <tag> automation </tag>
            
            <tag> headless </tag>
            
            <tag> phantomjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Your Own DataTables</title>
      <link href="/post/create-your-own-vanilla-datatables/"/>
      <url>/post/create-your-own-vanilla-datatables/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe82d762c931b5f3ad9790c0437341072da.jpg" alt=""></p><p>Hello guys, it was very long time I didn’t write any single article for javascript again. It is because I have very much project that should be done in this year and I was finish them.</p><p>Today I want to write an article about is we need DataTables jQuery ? If your project already sticky with jQuery, thats fine you can go with it. But if you don’t want to use jQuery you have to create it by yourself. Actualy, creating a DataTables is not really hard to do.</p><a id="more"></a><h3 id="This-is-the-reason-why-I-decided-create-my-own-DataTables"><a href="#This-is-the-reason-why-I-decided-create-my-own-DataTables" class="headerlink" title="This is the reason why I decided create my own DataTables."></a>This is the reason why I decided create my own DataTables.</h3><ol><li><p><a href="https://datatables.net" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://datatables.net</a><br>The size for css 2.1 kB and for js 29.7 kB + jQuery 30.8 kB (minified and gzipped). They have extension too and it wil increased the size more if you are using it. Actualy, this is very awesome project datatable that I ever found but I don’t use it because they’re sticky with jQuery also this library is too bloated, too much features will decreased my web performance.</p></li><li><p><a href="https://github.com/fiduswriter/Simple-DataTables" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://github.com/fiduswriter/Simple-DataTables</a><br>The size for css and js is 13kB. Yeah this is the very minimalist DataTables I found. Written in pure JavaScript (no jQuery dependencies). The feature is really close with the original DataTables.net but in my opinion this project still not flexible, I have read all the documentation and maybe I just can’t understanding it well because it’s lack of examples. This depends on how complicated your current project. Unfortunately, using this, is not solving my problem yet.</p></li><li><p>Create my own DataTables<br>Yeah, finnaly I have to decided to create my own DataTables in pure vanilla JavaScript as my project don’t use jQuery. When I created my own DataTables, I use 2 library from other source and 2 library I write it by my self.</p><ul><li><p><a href="https://github.com/cferdinandi/reef" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Reef.js (2.6 kB)</a><br>Reef is for Reactive UI</p></li><li><p><a href="https://github.com/fdaciuk/ajax" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Ajax (1 kB)</a><br>Ajax written in pure javascript.</p></li><li><p><a href="https://github.com/aalfiann/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Fly Json ODM (4.7 kB)</a><br>Json manipulation to help us searching all field or custom field also for sorting.</p></li><li><p><a href="https://github.com/aalfiann/chunk-handler" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Chunk Handler (1.9 kB)</a><br>Just helper to count total page before paginated.</p><p>So the total size is just 10.2 kB and I have this benefit :</p></li><li><p>Reactive UI (Modern way, alternative to Vue and React).</p></li><li><p>Ajax (support all method and header).</p></li><li><p>Manipulation json (Able to search all field or single field, sorting, etc).</p></li><li><p>Safe from XSS attack.</p></li><li><p>Size is small, fast performance.</p></li><li><p>Etc.</p></li></ul></li></ol><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR;"></a>TLDR;</h3><p>You can learn this directly from the <a href="https://github.com/aalfiann/create-datatables" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">source</a> or <a href="https://jsfiddle.net/aalfiann/d0kpbwzt/31/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">demo</a>.</p><h3 id="Let’s-Create-This"><a href="#Let’s-Create-This" class="headerlink" title="Let’s Create This"></a>Let’s Create This</h3><p>In this case I will use Bulma Framework which is pure CSS only, no javascript included in there. I don’t use Bootsrap because they sticky with jQuery. I know Bootstrap 5 will be pure CSS, but it still alpha version, I can’t use it for my real project.</p><p>If you never use Bulma Framework, I suggest you to learn it now. It is more simpler than using Bootstrap 4.</p><ol><li><p>Create file index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example DataTables with Bulma<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Bulma Version 0.9.0--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/bulma@0.9.0/css/bulma.min.css"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Icons below are for demo only. Feel free to use any icon pack. Docs: https://bulma.io/documentation/elements/icon/ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.materialdesignicons.com/5.8.55/css/materialdesignicons.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"hero is-info is-medium is-bold"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero-head"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span> <span class="attr">href</span>=<span class="string">"../"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bulma.io/images/bulma-type-white.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navbar-burger burger"</span> <span class="attr">data-target</span>=<span class="string">"navbarMenu"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sandbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card has-table has-mobile-sort-spaced"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-header-title"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-format-list-bulleted"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            DataTables</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-header-icon field"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"control has-icons-right"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">placeholder</span>=<span class="string">"Search &amp; Enter"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon is-small is-right"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"mdi mdi-magnify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"datatable"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content has-text-centered"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"https://github.com/aalfiann/create-datatables"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control level-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://bulma.io"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://bulma.io/images/made-with-bulma.png"</span> <span class="attr">alt</span>=<span class="string">"Made with Bulma"</span> <span class="attr">width</span>=<span class="string">"128"</span> <span class="attr">height</span>=<span class="string">"24"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Look at the element <code>sandbox &gt; content</code>, We just create the layout only with no datatables at there. Why? Because we will render the datatables via JavaScript with Reef library. This datatables will be reactive so your code will be more clean and secured.</p></li><li><p>Add library Script</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/reefjs/dist/reef.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/fdaciuk-ajax/3.0.4/ajax.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/fly-json-odm@1.10.2/dist/flyjson.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/chunk-handler@1.3.4/dist/chunkhandler.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Copy and paste this before line <code>&lt;/body&gt;</code>, I put the js script at bottom, because to prevent blocking render.</p></li><li><p>Create configuration datatables</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default configuration table</span></span><br><span class="line"><span class="keyword">var</span> dt = [];            <span class="comment">// The data loaded from ajax will be cached at here.</span></span><br><span class="line"><span class="keyword">var</span> pageNow = <span class="number">1</span>;        <span class="comment">// Set current page to default 1</span></span><br><span class="line"><span class="keyword">var</span> itemPerPage = <span class="number">5</span>;    <span class="comment">// Set item per page to default 5</span></span><br><span class="line"><span class="keyword">var</span> totalPage = <span class="number">1</span>;      <span class="comment">// Set total page to default 1</span></span><br></pre></td></tr></table></figure><p>This configuration will help the reactive ui before data is loaded.</p></li><li><p>Create Reactive UI</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reactive UI</span></span><br><span class="line"><span class="keyword">var</span> datatable = <span class="keyword">new</span> Reef(<span class="string">'#datatable'</span>, &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        table : [],</span><br><span class="line">        message: <span class="string">''</span>,</span><br><span class="line">        pageNow: pageNow,</span><br><span class="line">        totalPage: totalPage</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(props.table.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// generate option for jump page</span></span><br><span class="line">            <span class="keyword">var</span> tpage = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=totalPage;i++) &#123;</span><br><span class="line">                <span class="comment">// if current i same as pagenow then add attribute selected</span></span><br><span class="line">                tpage += <span class="string">'&lt;option '</span>+(i === pageNow ? <span class="string">'selected'</span>:<span class="string">''</span>)+<span class="string">'&gt;'</span>+i+<span class="string">'&lt;/option&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;div class="b-table has-pagination"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="table-wrapper has-mobile-cards"&gt;</span></span><br><span class="line"><span class="string">                &lt;table class="table is-fullwidth is-striped is-hoverable is-sortable is-fullwidth"&gt;</span></span><br><span class="line"><span class="string">                    &lt;thead&gt;</span></span><br><span class="line"><span class="string">                        &lt;tr&gt;</span></span><br><span class="line"><span class="string">                            &lt;th&gt;No&lt;/th&gt;</span></span><br><span class="line"><span class="string">                            &lt;th&gt;ID&lt;/th&gt;</span></span><br><span class="line"><span class="string">                            &lt;th&gt;UserID&lt;/th&gt;</span></span><br><span class="line"><span class="string">                            &lt;th&gt;Title&lt;/th&gt;</span></span><br><span class="line"><span class="string">                            &lt;th&gt;Body&lt;/th&gt;</span></span><br><span class="line"><span class="string">                        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;/thead&gt;</span></span><br><span class="line"><span class="string">                    &lt;tbody&gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">$&#123;props.table.map(<span class="keyword">function</span>(item, index) &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">                        <span class="keyword">var</span> num = (index+<span class="number">1</span>);</span></span></span><br><span class="line"><span class="string"><span class="subst">                        <span class="keyword">return</span> <span class="string">`&lt;tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td data-label="No"&gt;<span class="subst">$&#123;num+((props.pageNow<span class="number">-1</span>)*itemPerPage)&#125;</span>&lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td data-label="ID"&gt;<span class="subst">$&#123;item.id&#125;</span>&lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td data-label="UserID"&gt;<span class="subst">$&#123;item.userId&#125;</span>&lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td data-label="Title"&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td data-label="Body"&gt;<span class="subst">$&#123;item.body&#125;</span>&lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;td class="is-actions-cell"&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;div class="buttons is-right"&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;button class="button is-small is-primary" type="button" title="Edit Post"&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                                &lt;span class="icon"&gt;&lt;i class="mdi mdi-pencil-outline"&gt;&lt;/i&gt;&lt;/span&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;button class="button is-small is-danger" type="button" title="Delete Post"&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                                &lt;span class="icon"&gt;&lt;i class="mdi mdi-trash-can"&gt;&lt;/i&gt;&lt;/span&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                            &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;/td&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">                        &lt;/tr&gt;`</span>;</span></span></span><br><span class="line"><span class="string"><span class="subst">                    &#125;</span>).join('')&#125;</span></span><br><span class="line"><span class="string">                    &lt;/tbody&gt;</span></span><br><span class="line"><span class="string">                &lt;/table&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="notification is-white"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="level"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="level-left"&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class="level-item"&gt;</span></span><br><span class="line"><span class="string">                            Page </span></span><br><span class="line"><span class="string">                            &lt;div class="select ml-2"&gt;</span></span><br><span class="line"><span class="string">                                &lt;select id="jumpPage" onchange="jumpPage(this)"&gt;<span class="subst">$&#123;tpage&#125;</span>&lt;/select&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class="level-item"&gt;</span></span><br><span class="line"><span class="string">                            &lt;div class="buttons has-addons"&gt;</span></span><br><span class="line"><span class="string">                                &lt;button type="button" class="button" onclick="prevPage()"&gt;&lt;i class="mdi mdi-arrow-left-bold mr-2"&gt;&lt;/i&gt;Prev&lt;/button&gt;</span></span><br><span class="line"><span class="string">                                &lt;button type="button" class="button" onclick="nextPage()"&gt;Next&lt;i class="mdi mdi-arrow-right-bold ml-2"&gt;&lt;/i&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="level-item"&gt;</span></span><br><span class="line"><span class="string">                        &lt;small class="mt-2"&gt;Page <span class="subst">$&#123;props.pageNow&#125;</span> of <span class="subst">$&#123;props.totalPage&#125;</span>&lt;/small&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="level-right"&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class="level-item"&gt;</span></span><br><span class="line"><span class="string">                            Item per page</span></span><br><span class="line"><span class="string">                            &lt;div class="select ml-2"&gt;</span></span><br><span class="line"><span class="string">                                &lt;select id="itemperpage" onchange="setItemPerPage(this)"&gt;</span></span><br><span class="line"><span class="string">                                    &lt;option&gt;5&lt;/option&gt;</span></span><br><span class="line"><span class="string">                                    &lt;option&gt;10&lt;/option&gt;</span></span><br><span class="line"><span class="string">                                    &lt;option&gt;25&lt;/option&gt;</span></span><br><span class="line"><span class="string">                                    &lt;option&gt;50&lt;/option&gt;</span></span><br><span class="line"><span class="string">                                &lt;/select&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;article class="message is-danger"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="message-body"&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;(props.message) ? props.message : <span class="string">'Loading data...'</span>&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/article&gt;`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render to make UI reactive</span></span><br><span class="line">datatable.render();</span><br></pre></td></tr></table></figure><p>If you didn’t know about reactive ui coding style, please learn about Reef.js / Vue.js / React.js.</p></li><li><p>Create Data Loader<br>Because we want to get data from API or other sources, we have to create function data loader first.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get Remote Data only once then saved to dt variable</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">_cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dt.length === <span class="number">0</span>) &#123;</span><br><span class="line">        ajax()</span><br><span class="line">        .get(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response, xhr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(response.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dt = response;</span><br><span class="line">            <span class="keyword">if</span>(_cb &amp;&amp; <span class="keyword">typeof</span> _cb === <span class="string">"function"</span>) &#123;</span><br><span class="line">                _cb(<span class="literal">null</span>,dt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> dt;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span>(<span class="params">response, xhr</span>) </span>&#123;</span><br><span class="line">            dt = [];</span><br><span class="line">            <span class="keyword">if</span>(_cb &amp;&amp; <span class="keyword">typeof</span> _cb === <span class="string">"function"</span>) &#123;</span><br><span class="line">                _cb(xhr.responseText,<span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> dt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Above function is a void callback function.</p></li><li><p>Create function search</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Search All field</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchData</span>(<span class="params">value,pageNow,itemPerPage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dt.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Find data</span></span><br><span class="line">        <span class="keyword">var</span> nosql = <span class="keyword">new</span> FlyJson();</span><br><span class="line">        <span class="comment">// I use Fly Json ODM to manipulation json on the fly.</span></span><br><span class="line">        <span class="comment">// This will query search for all fields.</span></span><br><span class="line">        <span class="keyword">var</span> result = nosql.set(dt)</span><br><span class="line">        .select([<span class="string">'userId'</span>,<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'body'</span>])     <span class="comment">// Edit this to swap the columns</span></span><br><span class="line">        .begin()                                    <span class="comment">// Condition begin</span></span><br><span class="line">        .where(<span class="string">'userId'</span>, <span class="string">'like'</span>, value, <span class="literal">false</span>)      <span class="comment">// Search field userId</span></span><br><span class="line">        .or()</span><br><span class="line">        .where(<span class="string">'id'</span>, <span class="string">'like'</span>, value, <span class="literal">false</span>)          <span class="comment">// Search field id</span></span><br><span class="line">        .or()</span><br><span class="line">        .where(<span class="string">'title'</span>, <span class="string">'like'</span>, value, <span class="literal">false</span>)       <span class="comment">// Search field title</span></span><br><span class="line">        .or()</span><br><span class="line">        .where(<span class="string">'body'</span>, <span class="string">'like'</span>, value, <span class="literal">false</span>)        <span class="comment">// Search field body</span></span><br><span class="line">        .end()                                      <span class="comment">// Condition end</span></span><br><span class="line">        .distinct()                                 <span class="comment">// Make sure the result is unique</span></span><br><span class="line">        .orderBy(<span class="string">'id'</span>, <span class="literal">false</span>)                       <span class="comment">// Order by field id in ascending</span></span><br><span class="line">        .exec();                                    <span class="comment">// Execute the query</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Get total page from the result of find data</span></span><br><span class="line">        <span class="keyword">var</span> ch = <span class="keyword">new</span> ChunkHandler();</span><br><span class="line">        <span class="keyword">var</span> retotalPage = ch.make(result,itemPerPage).length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Paginate the data</span></span><br><span class="line">        <span class="keyword">var</span> redata = nosql.set(result).paginate(pageNow,itemPerPage).exec();</span><br><span class="line">        <span class="comment">// If the data records found</span></span><br><span class="line">        <span class="comment">// Inject to reactive datatable ui</span></span><br><span class="line">        <span class="keyword">if</span> (redata.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            datatable.data.table = redata;</span><br><span class="line">            datatable.data.pageNow = pageNow;</span><br><span class="line">            datatable.data.totalPage = retotalPage;</span><br><span class="line">            totalPage = retotalPage;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            datatable.data.table = [];</span><br><span class="line">            datatable.data.pageNow = <span class="number">0</span>;</span><br><span class="line">            datatable.data.totalPage = <span class="number">0</span>;</span><br><span class="line">            totalPage = <span class="number">0</span>;</span><br><span class="line">            datatable.data.message = <span class="string">'Records not found!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        datatable.data.table = [];</span><br><span class="line">        datatable.data.pageNow = <span class="number">0</span>;</span><br><span class="line">        datatable.data.totalPage = <span class="number">0</span>;</span><br><span class="line">        totalPage = <span class="number">0</span>;</span><br><span class="line">        datatable.data.message = <span class="string">'Records not found!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create Event and Additional Function<br>Yes, we need a little bit events and additional function for search, next, prev, item and jump page.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Next Page</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pageNow &lt; totalPage) &#123;</span><br><span class="line">        pageNow = pageNow + <span class="number">1</span>;</span><br><span class="line">        searchData(<span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).value,pageNow,itemPerPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Previous Page</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pageNow &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        pageNow = pageNow - <span class="number">1</span>;</span><br><span class="line">        searchData(<span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).value,pageNow,itemPerPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refresh Item Per Page</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setItemPerPage</span>(<span class="params">self</span>) </span>&#123;</span><br><span class="line">    pageNow = <span class="number">1</span>;</span><br><span class="line">    itemPerPage = self.options[self.selectedIndex].value;</span><br><span class="line">    searchData(<span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).value,pageNow,itemPerPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go / Jump to page</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpPage</span>(<span class="params">self</span>) </span>&#123;</span><br><span class="line">    pageNow = <span class="built_in">parseInt</span>(self.value);</span><br><span class="line">    searchData(<span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).value,pageNow,itemPerPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event listener when search box is entered</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'search'</span>).addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">        pageNow = <span class="number">1</span>;</span><br><span class="line">        searchData(<span class="keyword">this</span>.value, pageNow, itemPerPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Call load data<br>After all needed function was created, in the last part is we have to call loadData .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Load data onload</span></span><br><span class="line">loadData(<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) searchData(<span class="string">''</span>,pageNow,itemPerPage);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Done. That’s very simple right?</p></li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I’ve made this tutorial / example with very simple way to make you easier understanding how to create your own DataTables. I suggest you to make this more tidy like wrapping this in some class for production use.</p><p>You can learn this tutorial / example directly from the <a href="https://github.com/aalfiann/create-datatables" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">source</a> or <a href="https://jsfiddle.net/aalfiann/d0kpbwzt/31/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">demo</a>.</p><p>To create your own DataTables, actualy only using 2 libraries, it is :</p><ul><li><a href="https://github.com/aalfiann/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Fly Json ODM (4.7 kB)</a></li><li><a href="https://github.com/aalfiann/chunk-handler" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Chunk Handler (1.9 kB)</a></li></ul><p>You are able to :</p><ul><li>Remove the Reef library if you don’t want reactive UI.</li><li>Remove the Ajax library if the data is not remote to other sources or you already have your own ajax library.</li></ul><p>The reason I use Reef library for reactive ui is because very flexible, anti framework, just render the ui (no virtual dom) and it’s small only 2.5 kB (minified and gzippped). Using Vue or React is too big, bloated and strict.</p><p>If you having problem with this tutorial, just feel free to leave a comment below.</p><p>Thank you for reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> javascript </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create a Serverless API with Fastify Framework</title>
      <link href="/post/create-a-serverless-api-with-fastify-framework/"/>
      <url>/post/create-a-serverless-api-with-fastify-framework/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe84b7eebd9d089bdd0a8eb3c91dc607b9d.jpg" alt=""></p><p>Hello guys, today I will write a tutorial about create serverless API with Fastify framework. Serverless means you don’t need a NodeJS server to run. Are you sure? NodeJS is a platform to run JavaScript on the server side, but how we can make it serverless? If you want to know more detail? Just check this out.</p><a id="more"></a><h2 id="What-is-Serverless-API"><a href="#What-is-Serverless-API" class="headerlink" title="What is Serverless API ?"></a>What is Serverless API ?</h2><p>Serverless API is an API which is running your core application without a http server. So there is no http server in your API application. Everything is run by event driven in server machine. Serverless are most used in cloud systems server.</p><h2 id="Benefit-Serverless"><a href="#Benefit-Serverless" class="headerlink" title="Benefit Serverless"></a>Benefit Serverless</h2><p>Actualy there are more benefits to use serverless, but these three points is very useful benefit to use serverless for your project.</p><ol><li><p>Eficient Cost<br>Serverless is more cost-effective because you only pay as you go. You don’t need to buy fixed cost for the machine server.</p></li><li><p>Handled by Cloud<br>There is no server in your API application, so everything is handled by cloud vendors.</p></li><li><p>Event Triggered<br>Because serverless API is run by event driven, you are able to invoked your function directly without a http server if you are in same microservices environment. This is similar with FaaS (Function as a Service).</p></li></ol><h2 id="Const-of-Serverless"><a href="#Const-of-Serverless" class="headerlink" title="Const of Serverless"></a>Const of Serverless</h2><p>Actualy there is more const of using serverless, but I only describe 3 points which is very important to consider.</p><ol><li><p>Resource limit<br>Serverless is using resource directly with OS of the server machine. Means you are on limit when compute for high task.<br>It is better for you to keep your serverless application always small. But creating a small application doesn’t mean that you can’t scale your serverless application. If you in microservices environment, of course you are able to scale it.</p></li><li><p>Performance<br>Serverless could suffer from response latency. Because serverless will start runtime from the begin for every process so this will always add more latency.</p></li><li><p>Security<br>You can not control the security of serverless. Because serverless is using resources directly from OS. When the OS having vulnerable, it could affect to your serverless application.</p></li></ol><h2 id="Create-Serverless-with-Fastify"><a href="#Create-Serverless-with-Fastify" class="headerlink" title="Create Serverless with Fastify"></a>Create Serverless with Fastify</h2><p>In this article I will use Fastify framework to create a serverless API. Why?</p><ol><li><p>Fastest NodeJS Framework<br>Fastify is the fastest NodeJS Framework today. Fastify still on the top ranking of performance speed or benchmark speed than other well known nodejs framework.</p></li><li><p>Everything is Plugin<br>Fastify using modular architecture concept. So this will easy and fast to develop, because we can work together in parallel.</p></li><li><p>Simple, Flexible and Minimalist<br>Fastify is very simple and easy to learn even you are newbie in NodeJS. Because of minimalist and their simplicity, I feel flexible to choose any library in <code>NPMJS</code>.</p></li></ol><p>So the tutorial to create serverless with Fastify is :</p><h3 id="1-Install-Fastify"><a href="#1-Install-Fastify" class="headerlink" title="1. Install Fastify"></a>1. Install Fastify</h3><p>To install fastify is just run this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install fastify</span><br></pre></td></tr></table></figure><p>If installation process done, you can go to the next step below.</p><h3 id="2-Create-serverless-js"><a href="#2-Create-serverless-js" class="headerlink" title="2. Create serverless.js"></a>2. Create serverless.js</h3><p>Now create <code>serverless.js</code> file in new directory <code>api/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> build = <span class="built_in">require</span>(<span class="string">'./index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = build()</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> app.ready()</span><br><span class="line">  app.server.emit(<span class="string">'request'</span>, req, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Create-index-js"><a href="#3-Create-index-js" class="headerlink" title="3. Create index.js"></a>3. Create index.js</h3><p>Now create <code>index.js</code> file in same directory <code>api/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">'fastify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = fastify(&#123;</span><br><span class="line">    logger: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.get(<span class="string">'/'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">statusCode</span>:res.statusCode,<span class="attr">message</span>:<span class="string">'Welcome to my serverless API.'</span>&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = build</span><br></pre></td></tr></table></figure><h3 id="4-Create-now-js"><a href="#4-Create-now-js" class="headerlink" title="4. Create now.js"></a>4. Create now.js</h3><p>You have to create <code>now.js</code> file on root of your project. Just copy and paste this code below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"builds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"src"</span>: <span class="string">"api/serverless.js"</span>,</span><br><span class="line">      <span class="string">"use"</span>: <span class="string">"@now/node"</span>,</span><br><span class="line">      <span class="string">"config"</span>: &#123;</span><br><span class="line">        <span class="string">"helpers"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"routes"</span>: [</span><br><span class="line">    &#123; <span class="string">"src"</span>: <span class="string">"/.*"</span>, <span class="string">"dest"</span>: <span class="string">"/api/serverless.js"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done, this is very simple right? To add more advanced routes, just see Fastify documentation at <a href="https://www.fastify.io/docs/latest/Routes/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><h2 id="How-to-test"><a href="#How-to-test" class="headerlink" title="How to test ?"></a>How to test ?</h2><p>You can not test your serveless API with HTTP request right now because you need a serveless runtime container service. So the only way to test is, you have to create your own unit test for example with <a href="https://www.npmjs.com/package/mocha" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">mocha</a>.</p><h2 id="How-to-Deploy"><a href="#How-to-Deploy" class="headerlink" title="How to Deploy ?"></a>How to Deploy ?</h2><p>To deploy your first serverless API after following the tutorial above, now follow this steps below:</p><ol><li><p>Create GitHub Account<br>You have to create a Github account at <a href="https://github.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>. If you already have an account in GitHub, just upload your project into your new repository.</p></li><li><p>Create Zeit Now Account.<br>You have to create a Zeit Now account at <a href="https://zeit.co" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>. If you already have an account in Zeit Now, you can just create new app in Zeit Now, then follow the steps on Zeit Now. It is very easy, no hard configuration and no code required.</p></li></ol><p>Done, your serverless API is will deployed in minutes. No domain required, because Zeit Now will give you free. But you are able to change with your custom domain later.</p><h2 id="How-this-Works"><a href="#How-this-Works" class="headerlink" title="How this Works"></a>How this Works</h2><p>Serverless is event driven concept. So the main point to build a serverless API is you have to create event driven application then create a http route for communication with client request.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Fastify framework wasn’t designed for serverless framework, but Fastify has a way for being serverless API. But to run this serverless API you need a hosting provider who provide serverless container service for example <a href="https://zeit.co" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Zeit Now</a>. Why I choose <code>Zeit Now</code>? Because they very simple to use or to deploy, they have a zero configuration for nodejs and they have a free service. I use they free service to make research before I write this tutorial.</p><p>Actualy I don’t have any affiliate with <code>Zeit Now</code>, Of course you can make serverless API with other hosting provider like <a href="https://cloud.google.com/run" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Google Cloud Run</a>, <a href="https://aws.amazon.com/lambda" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">AWS Lambda</a>, etc.</p><p>Don’t forget, free service is always have it’s limitation, if you are serious about your business, I recommend you to buy the premium hosting service from them.</p><p>Thank you for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Very Lightweight Form Validation Javascript Library</title>
      <link href="/post/very-lightweight-form-validation-javascript-library/"/>
      <url>/post/very-lightweight-form-validation-javascript-library/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8d0cc00bb6e8446ffaa4d0c057ff821a3.jpg" alt=""></p><p>Hello guys, today I will write an article about my lightweight native form validation library. Form validation is the very basic things to handle form in frontend. But why I create this form validation library?</p><a id="more"></a><h2 id="Thousands-form-validation-libraries"><a href="#Thousands-form-validation-libraries" class="headerlink" title="Thousands form validation libraries"></a>Thousands form validation libraries</h2><p>You must already known that there is thousands form validation libraries is already exists out there. But I can’t use it because most of them is too bloated for a small project.</p><h2 id="Basic-of-Form-Validation"><a href="#Basic-of-Form-Validation" class="headerlink" title="Basic of Form Validation"></a>Basic of Form Validation</h2><p>Basic of Form Validation is only three :</p><ol><li><p>Value Validation<br>Must able to validate from value.</p></li><li><p>Event Validation<br>Must able validate the value from event.</p></li><li><p>Custom Validation<br>Must able validate with custom validation rules.</p></li></ol><p>Yes, only that. We actualy doen’t need more features. If you add features more than this, honestly, it’s too bloated bro.</p><h2 id="Journey"><a href="#Journey" class="headerlink" title="Journey"></a>Journey</h2><p>After take a journey to searching and reading many form validation javascript out there. I failed to find form validation which is in size under 1Kb. Many lightweight form validation says that they’re are most lightweight, but actualy after minified and gzipped, it size still around 3Kb. This size is too big for me, because there are many features that actualy we don’t need it.</p><h2 id="Without-library"><a href="#Without-library" class="headerlink" title="Without library"></a>Without library</h2><p>There is many ways to validate your html form. Actualy you are able to do validation directly without libraries. Yes this is right, but when you are working in a team, you will need a standard and if you have many different form with their own rules, your rules must be clean and easy to read. So that is why you still need a library even just for validate your form html.</p><p>Example to validate form (Pure JavaScript)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="built_in">document</span>.forms[<span class="string">"example_Form"</span>][<span class="string">"field_name"</span>].value;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (x == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"Field Name is required to fill!"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"example_Form"</span> <span class="attr">onclick</span>=<span class="string">"return validate()"</span>&gt;</span></span><br><span class="line">  Field Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"field_name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Above example is for validate single form. If you have more than 10 fields with different rules, you will need a library so that your code will be clean and easier to read.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Finally, I created my own library called <a href="https://www.npmjs.com/package/native-form-validation" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">native-form-validation</a>. This is the very thin and lightweight of form validation library. After minified and gzipped, my library size around <code>1Kb</code> only.</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><code>native-form-validation</code> has only 4 features, it is :</p><ul><li><strong>form.rules(options)</strong> - Set the rules for validation.</li><li><strong>form.validate(callback)</strong> - Make validation.</li><li><strong>form.isValid()</strong> - Determine if validation has valid or not.</li><li><strong>form.element(id)</strong> - Make validation for single element.</li></ul><p>And for <code>options</code> in form.rules() is :</p><ul><li><strong>element {object}</strong> : Create rules for element. If you want to set rules for username see above example.</li><li><strong>required {bool}</strong> : Make sure the input is not empty. Default is false. [optional]</li><li><strong>trim {bool}</strong> : Sanitize space and whitespace on first and tail. Default is true. [optional]</li><li><strong>message {string}</strong> : Customize the error text message. [optional]</li><li><strong>minLength {int}</strong> : Make sure the input has {minLength} of chars. [optional]</li><li><strong>maxLength {int}</strong> : Make sure the input not more than {maxLength} of chars. [optional]</li><li><strong>errorPlace {string}</strong> : Display the error text into spesific element. [optional]</li><li><strong>errorAddClass {object}</strong> : Add custom error class into element. [optional]</li><li><strong>regex {regex}</strong> : Create validation based on regex. See this example. [optional]</li><li><strong>method {function}</strong> : Create custom validation without regex. See this example. [optional]</li></ul><p>I’ve just copied this from Wiki in my repository at <a href="https://github.com/aalfiann/native-form-validation/wiki#method" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>. For more detail explanation is already exists at there.</p><h2 id="Example-How-To-Use"><a href="#Example-How-To-Use" class="headerlink" title="Example How To Use"></a>Example How To Use</h2><p>I’ve upload my <a href="https://www.npmjs.com/package/native-form-validation" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">native-form-validation in NPM</a>. In this case, I will create simple form login validation with Bootstrap 4. Wait? Bootsrap 4 is too big, right?I know, but most people is using Bootstrap 4 today, so I use this only in this tutorial. My small project actualy use <a href="https://mincss.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">mincss.com</a> framework. Mincss framework is the very small css framework that I found. It size only around 1Kb.</p><p>So here is how to use this library.</p><h3 id="1-Use-with-CDN"><a href="#1-Use-with-CDN" class="headerlink" title="1. Use with CDN"></a>1. Use with CDN</h3><p>For fast and small project, we must use library with CDN to avoid cookie traffic from same domain.<br>Just paste this line below before tags <code>&lt;/body&gt;</code> of html.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/native-form-validation@1.0.1/dist/formvalidation.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Create-validation-logic"><a href="#2-Create-validation-logic" class="headerlink" title="2. Create validation logic"></a>2. Create validation logic</h3><p>In form login, there is only 3 validation, it is :</p><ul><li>Username</li><li>Password</li><li>remember me (not required)</li></ul><p>But in this tutorial I will change <code>remember me</code> to <code>must check this</code> so that it will become mandatory. So that this will giving you an example how to use this library for checkbox.</p><p>I will write the validation logic included with explanation in code.<br>Note: You can just copy paste this code below in new <code>&lt;script&gt;&lt;/script&gt;</code> tags.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FV = <span class="keyword">new</span> FormValidation();</span><br><span class="line">FV.rules(&#123;</span><br><span class="line">    password: &#123; <span class="comment">// this is the element id "password"</span></span><br><span class="line">        required: <span class="literal">true</span>, <span class="comment">// make this input required</span></span><br><span class="line">        message: <span class="string">'Password must be min 3-20 chars!'</span>, <span class="comment">// this is your error message to appear</span></span><br><span class="line">        minLength:<span class="number">3</span>, <span class="comment">// set the minlength of required char</span></span><br><span class="line">        maxLength:<span class="number">20</span>, <span class="comment">// set the maxlength of required char</span></span><br><span class="line">        errorPlace:<span class="string">'password-error'</span>, <span class="comment">// put the error message to element id "password-error"</span></span><br><span class="line">        errorAddClass: &#123; <span class="comment">// add new class for error message element</span></span><br><span class="line">            password_group:<span class="string">'has-danger'</span>, <span class="comment">// add new class "has-danger" into element id "password-group"</span></span><br><span class="line">            password:<span class="string">'is-invalid'</span> <span class="comment">// add new class "is-invalid" into element id "password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123; <span class="comment">// this is the element id "email"</span></span><br><span class="line">        required:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// example using regex</span></span><br><span class="line">        regex: <span class="regexp">/^(([^&lt;&gt;()[\]\\.,;:\s@\"]+(\.[^&lt;&gt;()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>,</span><br><span class="line">        errorPlace:<span class="string">'email-error'</span>,</span><br><span class="line">        errorAddClass: &#123;</span><br><span class="line">            email_group:<span class="string">'has-danger'</span>,</span><br><span class="line">            email:<span class="string">'is-invalid'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    checkbox: &#123; <span class="comment">// this is the element id "checkbox"</span></span><br><span class="line">        message: <span class="string">'You have to check this first!'</span>,</span><br><span class="line">        <span class="comment">// example using method for custom validation</span></span><br><span class="line">        method: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123; <span class="comment">// element is the current field</span></span><br><span class="line">            <span class="keyword">return</span> element.checked;</span><br><span class="line">        &#125;,</span><br><span class="line">        errorPlace:<span class="string">'checkbox-error'</span>,</span><br><span class="line">        errorAddClass: &#123;</span><br><span class="line">            checkbox_group:<span class="string">'has-danger'</span>,</span><br><span class="line">            checkbox:<span class="string">'is-invalid'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// validate by event (optional)</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).addEventListener(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    FV.element(<span class="string">'email'</span>).validate(); <span class="comment">// validate for single element id "email"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"password"</span>).addEventListener(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    FV.element(<span class="string">'password'</span>).validate(); <span class="comment">// validate for single element id "password"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"submit_login"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(FV.validate().isValid()) &#123; <span class="comment">// validate for all element is valid or not</span></span><br><span class="line">        alert(<span class="string">'validate success!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-Create-index-html"><a href="#3-Create-index-html" class="headerlink" title="3. Create index.html"></a>3. Create index.html</h3><p>Create your first index.html then combine with validation logic code above.<br>Here is the html script before combined with validation logic above.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 4 CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Form Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Form Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"email_group"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-describedby</span>=<span class="string">"emailHelp"</span> <span class="attr">placeholder</span>=<span class="string">"Enter email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"email-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"password_group"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"password-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"checkbox_group"</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span> <span class="attr">for</span>=<span class="string">"exampleCheck1"</span>&gt;</span>Check me out<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"checkbox-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submit_login"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 4 JS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this is the native-form-validation library --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/native-form-validation@1.0.1/dist/formvalidation.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>After combined with validation logic, your full html script must look like this.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 4 CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Form Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Form Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"email_group"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-describedby</span>=<span class="string">"emailHelp"</span> <span class="attr">placeholder</span>=<span class="string">"Enter email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"email-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"password_group"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"password-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"checkbox_group"</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span> <span class="attr">for</span>=<span class="string">"exampleCheck1"</span>&gt;</span>Check me out<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">id</span>=<span class="string">"checkbox-error"</span> <span class="attr">class</span>=<span class="string">"form-text text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submit_login"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 4 JS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this is the native-form-validation library --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/native-form-validation@1.0.1/dist/formvalidation.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> FV = <span class="keyword">new</span> FormValidation();</span></span><br><span class="line">        FV.rules(&#123;</span><br><span class="line">            password: &#123;</span><br><span class="line"><span class="actionscript">                required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'Password must be min 3-20 chars!'</span>,</span></span><br><span class="line">                minLength:3,</span><br><span class="line">                maxLength:20,</span><br><span class="line"><span class="actionscript">                errorPlace:<span class="string">'password-error'</span>,</span></span><br><span class="line">                errorAddClass: &#123;</span><br><span class="line"><span class="actionscript">                    password_group:<span class="string">'has-danger'</span>,</span></span><br><span class="line"><span class="actionscript">                    password:<span class="string">'is-invalid'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            email: &#123;</span><br><span class="line"><span class="actionscript">                required:<span class="literal">true</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                regex: /^(([^<span class="tag">&lt;&gt;</span>()[\]\\.,;:\s@\"]+(\.[^<span class="tag">&lt;&gt;</span>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/,</span></span></span><br><span class="line"><span class="actionscript">                errorPlace:<span class="string">'email-error'</span>,</span></span><br><span class="line">                errorAddClass: &#123;</span><br><span class="line"><span class="actionscript">                    email_group:<span class="string">'has-danger'</span>,</span></span><br><span class="line"><span class="actionscript">                    email:<span class="string">'is-invalid'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            checkbox: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">'You have to check this first!'</span>,</span></span><br><span class="line"><span class="actionscript">                method: <span class="function"><span class="keyword">function</span><span class="params">(element)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> element.checked;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                errorPlace:<span class="string">'checkbox-error'</span>,</span></span><br><span class="line">                errorAddClass: &#123;</span><br><span class="line"><span class="actionscript">                    checkbox_group:<span class="string">'has-danger'</span>,</span></span><br><span class="line"><span class="actionscript">                    checkbox:<span class="string">'is-invalid'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// validate by event (optional)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).addEventListener(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            FV.element(<span class="string">'email'</span>).validate();</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"password"</span>).addEventListener(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            FV.element(<span class="string">'password'</span>).validate();</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"submit_login"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            if(FV.validate().isValid()) &#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">'validate success!'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-Done"><a href="#4-Done" class="headerlink" title="4. Done"></a>4. Done</h3><p>Actualy, this example is similar with live example in repository, the difference is, this example here is not using jQuery. this example is pure vanilla javascript.</p><p>I’ve put this example to <a href="https://jsfiddle.net/aalfiann/1k9a45sf/4/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle here</a>. So that you are able to fork this directly and learning more by yourself.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This <code>native-form-validation</code> library is very small and fast, because I write this with pure javascript. You are able to use this library in any kind of javascript framework.</p><p>Why you must use this library :</p><ul><li><p>Ligthweight size only 1Kb<br>This is fast, small and very lightweight form validation library with critical features only.</p></li><li><p>There is no hidden or silent magic submit in this library<br>Just write basic form html without any spesific attribute in form html. So your html will look like original and clean also you are more easier to separate your code between html and javascript.</p></li><li><p>Using ES5 standard (support IE9++)<br>Many lightweight form validation out there is not using E5 standard. Most of them is jQuery plugins.</p></li></ul><p>Please see this library at :</p><ul><li><a href="https://www.npmjs.com/package/native-form-validation" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NPM Package</a>.</li><li><a href="https://github.com/aalfiann/native-form-validation" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">GitHub</a>.</li><li><a href="https://github.com/aalfiann/native-form-validation/wiki" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Documentation</a>.</li></ul><p>If you have any problem to use this library, just feel free to leave at this comment below.</p><p>Thank you for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protect Your Images Content With ImgFo</title>
      <link href="/post/protect-your-images-content-with-imgfo/"/>
      <url>/post/protect-your-images-content-with-imgfo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8f995f114669cd084dea59a8b861b4da9.jpg" alt=""></p><p>Hello guys, today I will write about protecting images content with ImgFo. I will explain what is the benefit using this service for our images content and how to use this in our website. So let’s check this out.</p><a id="more"></a><p>Lately <code>ImgFo</code> is quite popular in my country. Many blogs use their service to monetize their works. Most of them is blog manga or webtoon. I feel curious about what is <code>ImgFo</code>, so I do small research and try to write into this article. Hope this will benefit for you because <code>ImgFo</code> will help you to make money better.</p><h2 id="What-is-ImgFo"><a href="#What-is-ImgFo" class="headerlink" title="What is ImgFo ?"></a>What is ImgFo ?</h2><p><code>ImgFo</code> is an application web based to show or display your images content and images content means a content which is based from image for example like presentation, PDF or artwork like manga, webtoon, etc. ImgFo working as application to render your images content and shareable to public.</p><h2 id="What-is-benefit-of-ImgFo"><a href="#What-is-benefit-of-ImgFo" class="headerlink" title="What is benefit of ImgFo ?"></a>What is benefit of ImgFo ?</h2><p>The main benefit is <code>ImgFo</code> was designed for share your original content with protection to prevent from thieves. The second benefit is ImgFo doesn’t save your content in their database, you have 100% control of your original content. So you are able to update or delete your original content at any time. If you delete your json source file, then <code>ImgFo</code> will delete the link refer to your content immediately.</p><h2 id="About-PDF"><a href="#About-PDF" class="headerlink" title="About PDF"></a>About PDF</h2><p>We already know that PDF is the way to share public your original content, because PDF has lock feature to protect your original content. But you have no control for your file, because it can be copied. So you will lose the benefit of your content.</p><ul><li><p>But ImgFo link is shareable, so I can not control too, right?<br>Nope, You have control, if you delete your json source link, then your ImgFo link will dead immediatelly. Somebody can not download your content if you don’t allow it.</p></li><li><p>PDF are not safe<br>Even you lock your PDF, there is many tool to extract or modify your PDF.</p></li><li><p>PDF is not eficient for thousand files<br>PDF is not eficient for thousands high quality image files. Because the size is very big, you will hard to maintain, share or sell it.</p></li></ul><h2 id="About-Watermark"><a href="#About-Watermark" class="headerlink" title="About Watermark"></a>About Watermark</h2><p>The very simple way to protect your original work is to put watermark, but actualy, it can be easily removed by someone using image editor application like Photoshop.</p><h2 id="Pros-of-using-ImgFo"><a href="#Pros-of-using-ImgFo" class="headerlink" title="Pros of using ImgFo"></a>Pros of using ImgFo</h2><p>Actualy there is many benefit of using ImgFo, So here is the pros of using ImgFo in real world.</p><ul><li><p>Make Money<br>You are able to sell your link for monetizing your content. You can make your link permanently or temporary for your member.</p></li><li><p>Small Investment<br>You don’t have to build an e-commerce application. You can start with free blog from <a href="https://blogger.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Blogger</a> or <a href="https://patreon.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Patreon</a>. And for web server to put your original work, you can use with free hosting from <a href="https://000webhost.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">000webhost.com</a>.</p></li><li><p>Protected<br>ImgFo is read only, so your reader can not download your content as default, everything is locked and encrypted. But you can allow your user to download your content by putting your download link.</p></li><li><p>Private but Shareable<br>Your link is private, any bots can not index your link (bad bots also blocked). But your link is shareable, so your content can be viewed to user who has the link.</p></li><li><p>Backlink<br>Even your link is shareable, your reader will always know who is the original creator by putting your backlink website in your json source.</p></li></ul><h2 id="Cons-of-using-ImgFo"><a href="#Cons-of-using-ImgFo" class="headerlink" title="Cons of using ImgFo"></a>Cons of using ImgFo</h2><p>It’s not fair if I describe the pros only. So here is the cons of using ImgFo in real world.</p><ul><li><p>Web Server is Required<br>ImgFo is fair, they don’t save your content in their database. So you need to upload your json source into your own web server. But if you don’t have any hosting, you can try free hosting in <a href="https://000webhost.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">000webhost.com</a>.</p></li><li><p>Not Simple<br>It is because there is many steps to make your original safe from being stolen. But if you know the structure of json format in ImgFo, you can create your own application to generate json and upload it to your web server automatically.</p></li><li><p>There is no Rest API<br>Actualy they have a Rest API, but currently is for private use. They don’t want to make their Rest API for public use.</p></li></ul><h2 id="How-to-use-ImgFo"><a href="#How-to-use-ImgFo" class="headerlink" title="How to use ImgFo ?"></a>How to use ImgFo ?</h2><p>There is many step to use ImgFo. In this tutorial I will write step by step :</p><h3 id="1-Setup-WebServer"><a href="#1-Setup-WebServer" class="headerlink" title="1. Setup WebServer"></a>1. Setup WebServer</h3><p>For WebServer, I will use free hosting by <a href="https://000webhost.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">000webhost</a>. The reason is, because there is no free hosting for nodejs application even <code>Heroku</code> they are not fully free. So we will do this using PHP language as <code>000webhost</code> is for hosting PHP application.</p><ul><li><p>Create a website first<br>Visit to <a href="https://000webhost.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">000webhost</a> and create your first website in it. You can search through google about tutorial to create website with <code>000webhost</code>.</p></li><li><p>Create <code>index.php</code> file.<br>You can just copy paste this code below.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Set Response Content-Type Header</span></span><br><span class="line">header(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line"><span class="comment">// look file from url parameter name content</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>])) &#123;</span><br><span class="line">    <span class="comment">// set dirname content</span></span><br><span class="line">    $dirname = <span class="string">"content"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// decode url parameter content</span></span><br><span class="line">    $file = urldecode($_GET[<span class="string">'content'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if dir not exist then create it</span></span><br><span class="line">    <span class="keyword">if</span>(!is_dir($dirname)) &#123;</span><br><span class="line">        mkdir($dirname, <span class="number">0777</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check the file is exists or not</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists($dirname.<span class="string">'/'</span>.$file)) &#123;</span><br><span class="line">        <span class="comment">// if exist then read it</span></span><br><span class="line">        readfile($dirname.<span class="string">'/'</span>.$file,<span class="string">"r"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// if not found then send message not found</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&#123;"message":"not found!"&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// default message for page</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&#123;"message":"Welcome to my website"&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create <code>robots.txt</code> to block all search engine bots.<br>You can just copy paste this line below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></li><li><p>Upload <code>index.php</code> and <code>robots.txt</code> above to <code>public_html</code>.<br>Go to files manager, go to directory <code>public_html</code> then upload this <code>index.php</code> and <code>robots.txt</code> file.</p></li><li><p>Create new directory and name it with <code>content</code>.<br>This directory is for <code>your-json-source.json</code>.</p></li><li><p>Create new directory and name it with <code>images</code>.<br>This directory is for your <code>images</code>.</p></li><li><p>Setup Webserver is Done.</p></li></ul><h3 id="2-Generate-Json-Source"><a href="#2-Generate-Json-Source" class="headerlink" title="2. Generate Json Source"></a>2. Generate Json Source</h3><ul><li>Go to <a href="https://imgfo.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">ImgFo</a> and generate your images content json source from there.</li><li>Press submit and you will get result of your json source.</li><li>Save it as <code>your-json-source.json</code>.</li><li>Upload your <code>your-json-source.json</code> into <code>content</code> directory.</li><li>Done</li></ul><h3 id="3-Generate-Link"><a href="#3-Generate-Link" class="headerlink" title="3. Generate Link"></a>3. Generate Link</h3><ul><li>Now browse to <code>https://your-website.000webhostapp.com/?content=your-json-source.json</code>.</li><li>Generate Link to get hash link from <code>ImgFo</code> with above url.</li><li>Now copy the result of hash link and browse it.</li><li>Done</li></ul><h3 id="4-Directory-Structure"><a href="#4-Directory-Structure" class="headerlink" title="4. Directory Structure"></a>4. Directory Structure</h3><p>Your directory structure is must like this:</p><ul><li>content/<ul><li>your-json-source.json</li></ul></li><li>images/<ul><li>001.jpg</li><li>002.jpg</li></ul></li><li>index.php</li><li>robots.txt</li></ul><p>Note:</p><ul><li>Your images url would be <code>https://your-domain.000webhostapp.com/images/001.jpg</code>.</li><li>Your json source link would be <code>https://your-domain.000webhostapp.com/?content=your-json-source.json</code>.</li></ul><p>All is done, now you can share your link to everyone.</p><p>Tips:</p><ul><li>If you haven’t any content yet, you can just copy paste from this <a href="https://glcdn.githack.com/xsilent-cleopatra/research-test/raw/master/imgfo/example-json-source.json" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">url</a> and save it as <code>your-json-source.json</code>.</li><li>You have to upload images into your webserver.</li><li>To save bandwidth you can use CDN Cloudflare.</li><li>To avoid auto deletion from <code>000webhost</code> make sure there is 10 visitor per month.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>ImgFo is the great free service for us to monetize our original work through internet. But you must consider about this :</p><ul><li><p>Not for small image under 600px<br>If you put small image with ImgFo, they will display it inline. In my opinion, ImgFo intended to work as alternative PDF so you have to use image size higher than 600px.</p></li><li><p>No Guarantees<br>ImgFo is free service so they have no uptime and support guarantees.</p></li><li><p>Maybe Slow Update<br>ImgFo protection is very strong, I fail to scrape using headless browser, sniffing the json source, etc. But technology is always update, as free service I doubt they will fast to update their security.</p></li><li><p>Adblocker<br>ImgFo is non profit, they live from donation and advertiser, so they put some ads in view content page of your works. If your visitor using Adblocker, they must disable it to view your content.</p></li><li><p>Is this really safe?<br>I don’t think so, because ImgFo is still new and the community is small. But if you still worries, it is better to put watermark on your original content at least for first year using ImgFo.</p></li></ul><p>ImgFo says that you are able to upload your json source to <code>GitHub</code>, <code>GitLab</code>, <code>BitBucket</code>, etc. But please don’t do this, because your works can be indexed and searchable by crawler search engine. The right way is to upload to your own server hosting, because you can set robots.txt to block all search engine crawlers.</p><p>To create a private webserver is very easy and all above tutorial is free, but if you are serious with your works, you have to buy premium domain and hosting.</p><p>Actualy you are able to use <code>Google Drive</code> or <code>Google Photos</code> for your images storage, but this way is not easy because you have to setup an <code>oauth</code> login and there is a request limit.</p><p>Thank you for your time to reading my article. Hope this will benefit for you.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
            <tag> app </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Use OpenVPN CLient in Elementary OS For Free</title>
      <link href="/post/how-to-use-openvpn-client-in-elementary-os-for-free/"/>
      <url>/post/how-to-use-openvpn-client-in-elementary-os-for-free/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe854a737cd9a04f936b233addaa1606960.jpg" alt=""></p><p>Hello guys, today I will write a tutorial how to use openvpn client in elementary os for free. Sometimes I would like to access some websites which is not available in my country. So the solution is you have to use VPN. How to use it to my device elementary os?</p><a id="more"></a><h2 id="Kind-of-VPN-types"><a href="#Kind-of-VPN-types" class="headerlink" title="Kind of VPN types"></a>Kind of VPN types</h2><p>Not protocol types of VPN, I mean as a client there is two of VPN types :</p><ol><li>Installed on your machine</li><li>Addons Browser</li></ol><p>In this article I will talk about VPN which is installed inside elementary os and from addons browser. One of popular VPN client is OpenVPN. Actualy OpenVPN is already installed as default in elementary os. If not you can just install OpenVPN from terminal like this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install openvpn</span><br></pre></td></tr></table></figure><h2 id="I-don’t-have-VPN-Server"><a href="#I-don’t-have-VPN-Server" class="headerlink" title="I don’t have VPN Server"></a>I don’t have VPN Server</h2><p>It’s ok, we don’t need this, actualy there is many VPN service out there. But I recommend to use <code>vpnsplit.com</code>. Why? because vpnsplit.com give real free unlimited VPN service. They also work for multiple devices like iOS, Android, Linux, MacOS and Windows.</p><h2 id="Tutorial-OpenVPN"><a href="#Tutorial-OpenVPN" class="headerlink" title="Tutorial OpenVPN"></a>Tutorial OpenVPN</h2><p>To use OpenVPN, you will be need a <code>.ovpn</code> config. So here is the tutorial step by step to use OpenVPN for free:</p><h3 id="Create-Account"><a href="#Create-Account" class="headerlink" title="Create Account"></a>Create Account</h3><p>For the first time, you have to create your VPN account in <a href="https://vpnsplit.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">vpnsplit.com</a>. After you have one free VPN account from it, don’t forget to save it in notepad, because it work for 1 Month. If your VPN service has expired, you are able to renew it again in the next month.</p><h3 id="Download-Config"><a href="#Download-Config" class="headerlink" title="Download Config"></a>Download Config</h3><p>In the vpnsplit.com, there is download config button. You have to click it to download the bundle of <code>.ovpn</code> config. The bundle is contains around 13 server VPN from many countries. After the download success, don’t forget to extract it into your any directory location.</p><h3 id="Run-from-Terminal"><a href="#Run-from-Terminal" class="headerlink" title="Run from Terminal"></a>Run from Terminal</h3><p>You don’t need a GUI, so getting start making connection to VPN server with OpenVPN, you have to open your terminal and run this command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo openvpn --client --config /home/your/path/location/of/config.ovpn</span><br></pre></td></tr></table></figure><ul><li><p>Wait for a second then you will asked for your account username and password.</p></li><li><p>If your account is correct then wait for a second and now you are connected already.</p></li></ul><h3 id="Check-your-IP-address"><a href="#Check-your-IP-address" class="headerlink" title="Check your IP address"></a>Check your IP address</h3><p>To make sure you are in private connection by VPN. You can visit <a href="canyouseeme.org">canyouseeme.org</a>, then look at your IP is already changed or not.</p><h2 id="Tutorial-VPN-by-Addons-Browser"><a href="#Tutorial-VPN-by-Addons-Browser" class="headerlink" title="Tutorial VPN by Addons Browser"></a>Tutorial VPN by Addons Browser</h2><p>Most of VPN from addons browser is included an account VPN server, so you don’t need to register any VPN service or using your own VPN server. Using VPN by addons browser is more simpler than above tutorial.</p><p>So here is tutorial using VPN by addons browser:</p><h3 id="Install-Opera-Browser"><a href="#Install-Opera-Browser" class="headerlink" title="Install Opera Browser"></a>Install Opera Browser</h3><p>Wait, Why we must install opera browser? I have Chrome browser already. The reason is Google not recommend to use their service with VPN, so it will be more safely if you using VPN connection with another browser. So your google account will be safe and you privacy data will be more simple to cleanup as it is from different browser. You have no worries about your history data to be deleted.</p><ul><li>To install Opera Browser<br>There is many ways to install opera browser in elementary os, but I will choose the simpler one is using snap. You just run this command below in your terminal.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo snap install opera</span><br></pre></td></tr></table></figure></li></ul><p>If you don’t have <code>snap</code>, you have to install first by run this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install snapd</span><br></pre></td></tr></table></figure><h3 id="Activate-VPN"><a href="#Activate-VPN" class="headerlink" title="Activate VPN"></a>Activate VPN</h3><p>As default Opera Browser is not using VPN, so you have to activate it by yourself.</p><ol><li>Open your Opera Browser</li><li>Type this url address <code>opera://settings/vpnWithDisclaimer</code></li><li>Enable VPN</li><li>Done</li></ol><p>Now your VPN will activated automatically every time you open Opera Browser. To disable VPN, just click the VPN icon on top beside url address.</p><h2 id="VPN-installed-VS-VPN-addons-browser"><a href="#VPN-installed-VS-VPN-addons-browser" class="headerlink" title="VPN installed VS VPN addons browser"></a>VPN installed VS VPN addons browser</h2><p>Here is the difference using VPN installed directly and VPN by addons browser :</p><h3 id="VPN-Installed"><a href="#VPN-Installed" class="headerlink" title="VPN Installed"></a>VPN Installed</h3><ul><li>Work to all of your application, for example your game online also your browser.</li><li>Require a VPN server account.</li><li>You can use any VPN server from different countries.</li><li>You can tweak your network with VPN server.</li></ul><h3 id="VPN-Addons-browser"><a href="#VPN-Addons-browser" class="headerlink" title="VPN Addons browser"></a>VPN Addons browser</h3><ul><li>Work only on your browser. This will not affecting to another application.</li><li>Doesn’t require a VPN server account.</li><li>You can not choose VPN server from different countries.</li><li>You can not do more to tweak your network.</li></ul><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><p>Sometimes VPN is working but my network is not going to private. So here is the tricks to make it work.</p><ul><li><p>If VPN is working but your connection is not private :</p><ul><li>Change you DNS network to use another public DNS like Google DNS <code>8.8.8.8, 8.8.4.4</code>.</li><li>Make sure your access website with SSL, because some of internet provider has block porn websites.</li><li>If this still not work, maybe the free VPN server doesn’t activated the tunnels. So you have to look the another VPN server account or just create it by yourself.</li></ul></li><li><p>If you can not connecting with VPN :</p><ul><li>Maybe you can try to use proxy or web proxy. You can get free proxy by just searching through Google.</li><li>Use Tor, but I don’t recommend this because Google has block Tor network, you will always getting recaptcha when searching in Google.</li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>That’s all way to use VPN in elementary os. You can use VPN by OpenVPN directly or just VPN by addons browser. They have pros and cons that I’ve described in above article.</p><p>Actually I will choose to use VPN installed in my elementary os, because it will work for my all applications especially for my favorite game online. But I will recommend to use VPN just from addons browser if you just use it for browsing in internet.</p><p>Note:</p><ul><li>Using VPN network maybe can slowdown your internet performance speed. If this happened, just change your VPN server, try to use VPN server which is from your country or very close with your country.</li><li>I recommend to use <code>vpnsplit.com</code>, because I have great experience with their VPN. They VPN server is so fast and all is unlimited also free. But remember, I don’t having any affiliate with <code>vpnsplit.com</code>, all of this is trully from my experience as user.</li><li>If you plan to use Premium VPN, I recommend to use ExpressVPN but it slightly more expensive than others.</li></ul><p>By the way, Thank you for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elementary-os </tag>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Install GO Lang in Elementary Os Hera</title>
      <link href="/post/how-to-install-go-lang-in-elementary-os-hera/"/>
      <url>/post/how-to-install-go-lang-in-elementary-os-hera/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe87541ca0d2de2be2b572dea5442de614b.jpg" alt=""></p><p>Hello guys, today I will write an article about how to install golang in elementary os hera. Golang is <code>Go Programming Language</code>. I use JavaScript everyday but because many people says that Golang is really fast, is that true? so now to find the answer, let’s try to install Golang first then learn about it.</p><a id="more"></a><h2 id="How-to-Install-Golang"><a href="#How-to-Install-Golang" class="headerlink" title="How to Install Golang"></a>How to Install Golang</h2><p>Because Golang is getting more populer today, so I would like to start learn it now.</p><p>So here is the tutorial how to install golang in Elementary Os Hera :</p><h3 id="Download-Go"><a href="#Download-Go" class="headerlink" title="Download Go"></a>Download Go</h3><p>For the first time, We have to download Go at <a href="https://golang.org/dl/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">golang.org</a>. Choose the latest stable version. When I write this article, the current stable version is <code>1.13.5</code>.</p><p>After download success, move it to <code>/usr/local</code>.</p><p>Or you can download it directly with using command line</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">$ sudo wget https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="Extract-it"><a href="#Extract-it" class="headerlink" title="Extract it"></a>Extract it</h3><p>We need to extract it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tar xzvf go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="Configure-Path"><a href="#Configure-Path" class="headerlink" title="Configure Path"></a>Configure Path</h3><p>We have to edit the environment to make <code>go</code> command is available in our terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>Now add this code line into <code>.bashrc</code> at very bottom line</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/Projects/Go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOPATH</span>/bin:<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>Note:</p><ul><li><code>$HOME/Projects/Go</code> is the location for Go projects.</li></ul><p>Then run this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Check-Version"><a href="#Check-Version" class="headerlink" title="Check Version"></a>Check Version</h3><p>Now we check the Go version to make sure Golang is successfully installed in our system.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br></pre></td></tr></table></figure><h2 id="Create-Hello-World"><a href="#Create-Hello-World" class="headerlink" title="Create Hello World"></a>Create Hello World</h2><p>Let’s try to create our first hello-world program using Go.</p><ul><li><p>Create new project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/YOUR_USERNAME/Projects/Go</span><br><span class="line">$ mkdir hello</span><br></pre></td></tr></table></figure></li><li><p>Go to hello directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure></li><li><p>Create new file</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch test.<span class="keyword">go</span></span><br><span class="line">$ nano test.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></li><li><p>Now paste this code and save it</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Run it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run test.go</span><br></pre></td></tr></table></figure></li></ul><p>Yeah, everything is done. Now look at your terminal, you will be able to see a <code>hello world</code> text in it.</p><h2 id="Benefit-using-Golang"><a href="#Benefit-using-Golang" class="headerlink" title="Benefit using Golang"></a>Benefit using Golang</h2><p>I’m a NodeJS user, so why I must learn Golang? What is benefit of using Golang? Well, this is actualy a hard question to answer. I’m also still new to learning Golang, but so far I have already read many literatures about Golang by searching through Google, and with some of my knowledge, here is the benefit of using Golang :</p><h3 id="Fast-in-Performance"><a href="#Fast-in-Performance" class="headerlink" title="Fast in Performance"></a>Fast in Performance</h3><p>Comparing with other interpreted language like Ruby, PHP, and NodeJS, Golang is much faster because Go is compiled to machine code. Golang is more eficient because Golang is <code>Single Execution</code> and doesn’t need virtual runtime, also Golang is don’t have <code>Generics</code> and <code>Dynamic Libraries</code>.</p><h3 id="Scalability-and-Concurrency"><a href="#Scalability-and-Concurrency" class="headerlink" title="Scalability and Concurrency"></a>Scalability and Concurrency</h3><p>Golang has Goroutines is a methods or functions that run in parallel with another methods or functions. So with this features, Golang has more ability to handle thousands of request simultaneously.</p><p>Comparing with NodeJS which is still use single thread, you will more harder to handle big concurrency process because sometimes the big event-loop is blocking your system. I know there is a way to solve this problems, but I could say that with using Golang you will be more easier to handle this.</p><h3 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h3><p>Comparing with NodeJS, of course Golang has more smaller than NodeJS community. But infact, they always increasing every year. So this means that Golang is having future. Also with community, you will not harder to solve your problems.</p><h3 id="Company-using-GO"><a href="#Company-using-GO" class="headerlink" title="Company using GO"></a>Company using GO</h3><p>Following the technology from big company, maybe this is a good idea to make sure is Golang are ready for production or not. By the way, there so many of big company has been successful to use Golang as backend of their core bussiness system. These big companies are :</p><ul><li>BBC</li><li>Google</li><li>Uber</li><li>Heroku</li><li>Medium</li><li>Docker</li><li>Intel</li><li>Basecamp</li></ul><h2 id="When-I-must-use-Golang"><a href="#When-I-must-use-Golang" class="headerlink" title="When I must use Golang ?"></a>When I must use Golang ?</h2><p>Golang is having best performance and good for build a large scale application for backend of core systems. I recommend you to use Golang when you are in big projects only. For small or medium projects you can go with NodeJS. Why? because many people says that it’s requires more time to develop an application with Golang. NodeJS is more rapid than NodeJS, but it’s all depend on your situations and conditions.</p><h2 id="Is-it-hard-to-learn-Golang"><a href="#Is-it-hard-to-learn-Golang" class="headerlink" title="Is it hard to learn Golang ?"></a>Is it hard to learn Golang ?</h2><p>Learning the basic or fundamental of Golang actualy is very simple, but if you are comes from Java or C#, you will get a little bit confusing because Golang has no <code>Generics</code> and <code>Dynamics Libraries</code>. But as time goes by, I’m sure you will get used to it.</p><h2 id="How-is-Golang-for-today"><a href="#How-is-Golang-for-today" class="headerlink" title="How is Golang for today ?"></a>How is Golang for today ?</h2><p>Golang is getting popular now, because many people today using <code>gohugo</code> cms for their blog or portfoliio. So do I, I learn Golang from the fundamentals because I want to try to build <code>gohugo</code> cms for my personal portfolio.</p><p>For someone who never heard about <code>gohugo</code>, gohugo is the static html generator based on Golang, same as <code>Hexo</code> which is based on NodeJS. There is many pros and cons about these two cms, but for scaling, you better to use <code>gohugo</code>. If you are having more than 10K articles, using Hexo could lead you with javascript heap out of memory, but with <code>gohugo</code>, you can scale your articles for more than 100K and it’s deploy process time still very fast which is just in seconds.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sorry, this article maybe not relevan with the topic of how to install Golang in elementary Os. I’m too much talk about Golang information than the tutorial itself. But actualy installing Golang in Elementary Os is very easy, with just a simple tutorial in above article, we have Golang installed in our system now.</p><p>If you are still curious about Golang, you can learn it more detail at <a href="https://golang.org/doc/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Golang Documentation</a>.</p><p>Thank you for your time to read my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> linux </tag>
            
            <tag> elementary-os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Make Hexo Blog Load Faster</title>
      <link href="/post/how-to-make-hexo-blog-load-faster/"/>
      <url>/post/how-to-make-hexo-blog-load-faster/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe817d0efff40c0b4565e7278c97a609453.jpg" alt=""></p><p>Hello guys, today I will write article about how to make hexo blog load faster. Everything is so simple, because we will use only two hexo plugins and your hexo blog will get <strong>A</strong> score from <a href="https://gtmetrix.com/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">GTMetrix</a> so easily. So how to do this?</p><a id="more"></a><h2 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo"></a>What is Hexo</h2><p>Hexo is a Static Html Generator which is based on NodeJS. You don’t need a database server like if you are using <code>Wordpress</code> or any cms out there. Everything is just html files so you can just upload to any web server and you can just put your website into <code>GitHub</code>, <code>GitLab</code>, <code>BitBucket</code>, etc.</p><p>The pros of using Hexo blog?</p><ul><li>Static HTML website.</li><li>Source code is on your local computer.</li><li>You don’t need using database server.</li><li>You don’t need to be online to write article, internet is not required.</li><li>You can just upload to GitHub, Netlify, etc for free hosting, webserver is not required.</li><li>With the power of Git, you can have multiple user to contribute the website.</li><li>Strong to handle high traffic because no computation on server side as it is just static files.</li><li>No hacker could be hack your website if your source code is saved in private git repository.</li></ul><p>The cons of using Hexo blog?</p><ul><li>There is no WYSIWYG editor</li><li>To deploy is via command line</li><li>Your static website could be stolen if uploaded to public repository. *</li><li>Generate more than 10K files could get JavaScript Heap out of memory. **</li></ul><p>Note:</p><ul><li>‘*’ Use your own webserver to prevent your content stolen.</li><li>‘**’ There is trick to avoid this, you can search through Google.</li></ul><h2 id="Make-Hexo-Faster"><a href="#Make-Hexo-Faster" class="headerlink" title="Make Hexo Faster"></a>Make Hexo Faster</h2><p>The basic things who can make your website slower is <code>html</code>, <code>css</code>, <code>js</code>, and <code>image</code> files. So you have to make sure to handle it’s files as small as possible. But don’t do it manually, because you can just waste your time. Let’s make this everything do automatically with powered of Hexo blog.</p><p>Playing with a public CDN will also useful to cache your files so your website will get more faster because your files will be cached into multiple networks to all countries so your visitor will get the nearest server to load your files automatically.</p><h3 id="Use-Minifier"><a href="#Use-Minifier" class="headerlink" title="Use Minifier"></a>Use Minifier</h3><p>Hexo has all in one minifier plugin. This plugin will work to make minifier all your files <code>html</code>,<code>css</code>,<code>js</code>, and <code>image</code>.</p><p>Here is the tutorial to use <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">hexo-all-minifier</a> :</p><ol><li>Install hexo-all-minifier<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-all-minifier</span><br></pre></td></tr></table></figure></li></ol><p>For mac user there is more required library to install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install libtool automake autoconf nasm</span><br></pre></td></tr></table></figure><ol start="2"><li>Add this line into your <code>_config.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>Done</li></ol><p>Now your files will automatically minified when you are deploy to git. For advanced use, actually there is more configuration in their documentation. You can learn more at <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><h3 id="Use-CDN"><a href="#Use-CDN" class="headerlink" title="Use CDN"></a>Use CDN</h3><p>Hexo has CDNify plugin which is you can rewrite your url assets to use your own CDN. If you are don’t have any CDN premium, you can make use CDN from github as free as powered by <a href="https://www.jsdelivr.com/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsdelivr</a>.</p><p>If you are not using GitHub pages, unfortunately you maybe will have to upload your assets manually into your premium CDN. But if you are using GitHub pages, once your website deployed to github, you already have CDN from jsdelivr, the benefit is everything is run automatically.</p><p>The benefit using <code>jsdelivr CDN</code> with <code>hexo-cdnify</code> :</p><ul><li>Everything automatically</li><li>Realtime update, no need to add time parameter to avoid CDN caching</li></ul><p>So here is the tutorial to use <a href="https://github.com/zqjimlove/hexo-cdnify" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">hexo-cdnify</a> :</p><ol><li><p>Install hexo-cdnify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cdnify</span><br></pre></td></tr></table></figure></li><li><p>Add this line into your <code>_config.yml</code></p><ul><li><p>If you are using premium CDN</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">base:</span> <span class="string">//cdn.com/</span></span><br></pre></td></tr></table></figure></li><li><p>if you are using GitHub pages</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">base:</span> <span class="string">//cdn.jsdelivr.net/gh/&lt;GITHUB_USERNAME&gt;/&lt;GITHUB_REPOSITORY_NAME&gt;@&lt;GITHUB_BRANCH_NAME&gt;/</span></span><br></pre></td></tr></table></figure></li></ul><p>Note:</p><ul><li>Change <code>&lt;GITHUB_USERNAME&gt;</code> with your github username.</li><li>Change <code>&lt;GITHUB_REPOSITORY_NAME&gt;</code> with your github repository name.</li><li>Change <code>&lt;GITHUB_BRANCH_NAME&gt;</code> with your branch name, for example <code>gh-pages</code>.</li><li>Don’t forget to always use trailing slash at the end of url <code>base</code>.</li></ul></li><li><p>Done</p></li></ol><p>Now after you deploy your hexo blog, all assets in your website will automatically use CDN. If you want to learn more features in using hexo-cdnify, you can read from their documentation at <a href="https://github.com/zqjimlove/hexo-cdnify#readme" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><h2 id="Test-with-GTMetrix"><a href="#Test-with-GTMetrix" class="headerlink" title="Test with GTMetrix"></a>Test with GTMetrix</h2><p>If you want to test your website pagespeed, I recommend to use <a href="https://gtmetrix.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">GTMetrix</a> because the result of the pagespeed test is very detail. You will get <code>PageSpeed</code>, <code>YSlow</code> and <code>Waterfall</code> information of result test. They also give you recomendations how to fix your website to increase the speed.</p><p>How to test the website page speed with GTMetrix :</p><ol><li>Visit to <a href="https://gtmetrix.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://gtmetrix.com</a>.</li><li>Input your url address of your website.</li><li>Click Analyze.</li><li>Wait for a second then you will get the result test.</li><li>Done.</li></ol><p>See in this picture below about Hexoder test in <a href="https://gtmetrix.com/reports/hexoder.com/EPQMvWYl" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">GTMetrix</a>.<br><img src="https://i.imgur.com/fLUVl1M.jpg" alt=""></p><p>After you see that picture above, maybe you will ask why the hexoder website just getting <strong>B</strong> score in YSlow? It is because of additional 3rd party plugin of using <code>Google Analytics</code>, <code>Adblocker</code>, and <code>ShareThis</code>. Because they don’t use CDN for js script then it will hurt the performance speed. So be careful of using 3rd party library, if you think it not so important for your website, just avoid to use it.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Hexo is the fast and powerful to create static html website for blog or portfolio. With only these two plugins, you already increase the page load speed of your website. This article is only to optimize the source code of your hexo blog.</p><ul><li>Why I don’t include <strong>AMP</strong> ?</li></ul><p>AMP will increase your website more faster, but it will work for mobile only and your website features will be decreased because you can not use regular javascript in AMP page. Actualy it support but it is really hard to make the validation AMP checker status valid on your AMP page.</p><ul><li>How about using <strong>Cache</strong> ?</li></ul><p>With using Hexo, your website is static html files, so you don’t need cache anymore. Also with using CDN, you are already cache your assets files by CDN itself.</p><ul><li>How about using <strong>DNS Cloudflare</strong> ?</li></ul><p>I’m not include into the list about use DNS Cloudflare because if you are using <code>GitHub pages</code>, <code>Netlify</code>, etc. It has already DNS features and your website surely could be accessed in all countries. But if you want to have more feature like using 3rd application easily, you can go to use cloudflare service. Also to be able to use this custom DNS with cloudflare, you will need to buy a custom domain first so you are able to configure the CNAME.</p><ul><li>Is there any way to make more faster ?</li></ul><p>Actualy there is still a lot of other method to increase your website more faster. For example you have to know how to defer your css and js script and make sure you load your images with lazyload technique. There is a lot of tutorial about this defer out there, you can just search through Google. Or maybe I will write article about how to defer css and js script in the next time.</p><p>Thank you for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reason Why I Prefer NodeJS than PHP</title>
      <link href="/post/reason-why-i-prefer-nodejs-than-php/"/>
      <url>/post/reason-why-i-prefer-nodejs-than-php/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8da44b32d6f4c7686a9c2ed8444152ca5.jpg" alt=""></p><p>Hello guys, in this article will talk about server side programming using NodeJS and PHP. I write this article because there is still many question about PHP is Dying in 2019. Actualy PHP is not dying, but PHP popularity ranking seems always going down. So what happened in PHP and Why I prefer NodeJS than PHP?</p><a id="more"></a><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>Before I write the reason why I prefer NodeJS than PHP, I will tell you a little about my history to work as developer. At 2008 I started to learn PHP. PHP is not my first programming language but I use it until this time 2019. Then at early 2014 I started to learn NodeJS, but I do more serious using NodeJS started at 2016 until this time. So I was using PHP for more than 11 years and I using NodeJS for more than 4 years. I know PHP better than NodeJS, but now I prefer using NodeJS than PHP.</p><h2 id="PHP-Compare-with-NodeJS"><a href="#PHP-Compare-with-NodeJS" class="headerlink" title="PHP Compare with NodeJS"></a>PHP Compare with NodeJS</h2><p>There is many another programming language out there. But why I compare PHP with NodeJS is because these two is so popular and having similarities technology. NodeJS and PHP is an interpreted language. PHP is behind Zend Framework and NodeJS is behind Google V8 JavaScript Engine.</p><p>I will not compare about features of NodeJS or PHP, because we already know these two programming language has different concept which PHP is synchronous and NodeJS is asynchronous. So I think this is not fair, this is like comparing between <code>Apples and Oranges</code>, so I will compare about experience in real world with using PHP and NodeJS.</p><p>So here is the reason why I prefer NodeJS than PHP for a serious project:</p><h3 id="PHP-is-Expensive"><a href="#PHP-is-Expensive" class="headerlink" title="PHP is Expensive"></a>PHP is Expensive</h3><ul><li>Shared Hosting</li></ul><p>Many people said that PHP is very cheap, because you can just start your website with small shared hosting. And if you using NodeJS, You are required to buy a VPS hosting. Is this true? Yes this is true in year ago, because today cpanel has support to run NodeJS application and today many hosting provider support NodeJS in shared hosting package.</p><ul><li>Database in Shared Hosting</li></ul><p>Most of PHP application is need a database server. I know that PHP could use json file as database, but just don’t use this way, because PHP is blocking, your database in json file could broken at anytime when you have high request. So you will required a database server like <code>MySQL</code>,<code>MongoDB</code>, etc.</p><p>If you think will install or use database server in same shared hosting, actualy this would not make any big difference. Because database server will eat more memory, so your PHP will lack of memory. Most of people will use file cache to decrease request to database, but just don’t do this because your inode is limited.</p><p>How about using <code>SQLite</code>? Yes you are able to bypass the inode limit, but actualy, SQLite is blocking, you won’t get much benefit by using <code>SQLite</code> if your concurrent visitor more than 100 visitor. Your PHP will going more slower and maybe will getting request timeout.</p><ul><li>Conclusion about this expensive</li></ul><p>NodeJS is more cheaper. For small application you are not required to use database server, you can just use json file as database and you have no worries about blocking as NodeJS is asynchronous. NodeJS is single thread, multiple request will be queued automatically in background process so you don’t required a proxy server like <code>NGINX</code>. Also you can use memory as cache internally without a cache server like <code>Redis</code>,<code>Memcache</code>,etc.</p><p>PHP is expensive because you have to buy another server for database server for the first time. But if you want to install database server in same hosting, you will required more RAM size, so you will still need to increase your payment for your shared hosting.</p><p>As my experience, using database server is required minimum 1Gb of RAM, and this still not strong enough to handle more than 100 concurrent queries.</p><h3 id="PHP-is-Slow"><a href="#PHP-is-Slow" class="headerlink" title="PHP is Slow"></a>PHP is Slow</h3><p>The fastest PHP framework is <code>Slim Framework</code> and <code>Lumen</code>, which is could handle <code>1900 request/second</code> only to <code>echo hello world!</code>.</p><p>But the fastest NodeJS framework is <code>fastify</code>, which is could handle <code>50143 request/second</code> only to <code>echo hellow world!</code>. The slower NodeJS framework is <code>hapi</code>, which is could handle <code>17870 request/second</code>. Even with the slower NodeJS framework, PHP still can not beat NodeJS speed.</p><p>I use framework to compare the speed, because in real world, you will never use native except a framework.</p><h3 id="PHP-is-Hard-to-Scale"><a href="#PHP-is-Hard-to-Scale" class="headerlink" title="PHP is Hard to Scale"></a>PHP is Hard to Scale</h3><p>What I mean about scale is the project growing bigger, this is not about scaling the request. PHP will always recompile the script in every request, so PHP will eat more memory if your source code is getting bigger.</p><p>Even if I using singleton in PHP, they don’t save the state of variable. PHP can not save the variable persistent in memory except you are using cache in memory like <code>Redis</code>, <code>Memcache</code>, etc.</p><p>I have an experience with wordpress, which is my wordpress getting slower as I have many plugins installed in my wordpress. After take a research, I just knew that PHP is always reload all library in every request. So if you have many plugins, it mean PHP will take more memory to recompile it plugin scripts in every single request.</p><p>In NodeJS, for a common class when you <code>require</code> a library, this will become singleton, so if you are <code>require</code> for multiple times, NodeJS will not recompile again and again for the same library. So even your project is getting bigger, your application still fast and low in memory consumption. This singleton also support to saving a variable which is persistent.</p><h2 id="Final-Thought"><a href="#Final-Thought" class="headerlink" title="Final Thought"></a>Final Thought</h2><p>With all above reason, in my opinion, NodeJS is better than PHP. You can go with PHP for small or medium project and go with NodeJS for enterprise or serious project. I recommend to use NodeJS since PHP is hard to scale. Remember that when you are working in big project, you have responsible to maintain and scale your application.</p><p>PHP is simple but NodeJS is not too complex. But it just the code line more longer because mostly to code in NodeJS, you have to playing around with callback and closure.</p><p>This doesn’t mean I will stop creating an application with PHP. You have to open mind, that market demand for PHP application is still high. Actualy, I still make a lot money from PHP as freelancer.</p>]]></content>
      
      
      <categories>
          
          <category> Opinion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Use NPM Package Manager</title>
      <link href="/post/how-to-use-npm-package-manager/"/>
      <url>/post/how-to-use-npm-package-manager/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8661e104b870aa2a16b5a3e8163e07ff7.jpg" alt=""></p><p>Hello guys, this time I would like to write about How to Use NPM Package Manager. When we are getting started to learn NodeJS, understanding about NPM Package Manager is the most important part. I think this should be a fundamental basic step learning about NodeJS. So let’s check this out.</p><a id="more"></a><p>I write this article is for user who getting started to learning NodeJS. So if you already understand how to use NPM Package Manager, you are allowed to read again this article in order to remember what is exactly NPM and how to use NPM in the right way.</p><h2 id="What-is-NPM-Package-Manager"><a href="#What-is-NPM-Package-Manager" class="headerlink" title="What is NPM Package Manager?"></a>What is NPM Package Manager?</h2><p>NPM Package Manager is a public package library for JavaScript programming. There is a million public repository in NPM that you can use it as free for your project. With using NPM, there is a feature for managing the version of it’s library. You are able to <code>install</code>, <code>remove</code>, <code>update</code> and <code>audit</code> the installed libraries so you can maintain it so easily.</p><h2 id="How-to-Install-NPM-Package-Manager"><a href="#How-to-Install-NPM-Package-Manager" class="headerlink" title="How to Install NPM Package Manager?"></a>How to Install NPM Package Manager?</h2><p>NPM is bundling with NodeJS, means that when you already install <code>NodeJS</code>, you also install a <code>NPM Package Manager</code>. So you are not required to install NPM Package Manager manually. To make sure your system is having <code>NPM</code> you can just run this command in your <code>terminal</code> or <code>cmd</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p>When I write this article, the current NPM version at this time is <code>6.11.3</code>. If you can not see the npm version, maybe you are fail to install NodeJS. To make sure NodeJS has installed correctly in your system, is just run this command in your <code>terminal</code> or <code>cmd</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p>If you are install NodeJS for the LTS version, when I write this article the current version of NodeJS is still <code>v10.17.0</code>.</p><h2 id="How-to-use-NPM-Package-Manager"><a href="#How-to-use-NPM-Package-Manager" class="headerlink" title="How to use NPM Package Manager?"></a>How to use NPM Package Manager?</h2><p>In this section I just write the common use of NPM, because it will too long didn’t read if I explain all the NPM features completely.</p><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>To start using NPM Package Manager, actually you don’t have to always open your <code>terminal</code> or <code>cmd</code>. There is more easy way, make sure you have an empty or an exists project source code. If you don’t have one, just create a new project by create an empty directory name <code>learn-npm</code>. Let’s now open your Visual Studio Code, then open your project source code. Open a terminal in Visual Studio Code by click <strong>CTRL + `</strong>.</p><p>So you will see a Terminal Box at bottom right in your Visual Studio Code like this<br><img src="https://i.imgur.com/eNYMe2k.jpg" alt=""></p><p>with this way, is more easier, because you can directly build your source code with an embedded terminal in Visual Studio Code. Also you only open one application instead multiple application just only to open <code>terminal</code> or <code>cmd</code> beside with Editor code.</p><h3 id="Generate-package-json"><a href="#Generate-package-json" class="headerlink" title="Generate package.json"></a>Generate package.json</h3><p>To install a library from NPM Package Manager, it’s required to generate a <code>package.json</code> file. If you don’t have it, you are not allowed to install a library from NPM Package Manager.</p><p>So here is the simple way to generate a package.json file, open your terminal inside Visual Studio Code by pressing <strong>CTRL + `</strong> then run this command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>After you run it, you will asked to fill some information about your project like in this picture below.<br><img src="https://i.imgur.com/RUE4yB7.jpg" alt=""></p><p>Then the generated <code>package.json</code> file is like below</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"learn-npm"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Learning NPM Package Manager"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"learn"</span>,</span><br><span class="line">    <span class="string">"learning-npm"</span>,</span><br><span class="line">    <span class="string">"npm-tutorial"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"M ABD AZIZ ALFIAN"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Install-a-library"><a href="#Install-a-library" class="headerlink" title="Install a library"></a>Install a library</h3><p>After we have a <code>package.json</code>, now we can just install a library from NPM Package Manager.</p><p>For example we want to install <a href="https://npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install fly-json-odm</span><br></pre></td></tr></table></figure><p>Now check again your <code>package.json</code> file, you will see there is new line with name <code>dependencies</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"fly-json-odm"</span>: <span class="string">"^1.9.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What is dependencies?</strong><br>Property name <code>dependencies</code> in <code>package.json</code> file is a list of library you just installed for main project. You are able to add more library inside it. For example we want to install another library name <a href="https://npmjs.com/package/text-obfuscator" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">text-obfuscator</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install text-obfuscator</span><br></pre></td></tr></table></figure><p>Now check again in your <code>package.json</code> file, then you will see the property name <code>dependencies</code> now has updated.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"fly-json-odm"</span>: <span class="string">"^1.9.1"</span>,</span><br><span class="line">  <span class="string">"text-obfuscator"</span>: <span class="string">"^1.0.2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Install-a-library-for-development"><a href="#Install-a-library-for-development" class="headerlink" title="Install a library for development"></a>Install a library for development</h3><p>You are already learn how to install a library for main project at above. But now how if we want to install a library for development purpose? Yes, there is another property name called <code>devDependencies</code>, in NPM Package Manager this will work for development environment, espcially for unit test in NPM.</p><p>Actually your devDependencies library will not included to getting installed for main project. If you see a <a href="https://github.com/aalfiann/text-obfuscator/blob/master/package.json" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">package.json</a> file at <a href="https://github.com/aalfiann/text-obfuscator/blob/master/package.json" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">text-obfuscator</a> repository. You will see, there is <code>devDependencies</code> in that project, but it’s not installed in your <code>learn-npm</code> project. You can make sure to looking for inside <code>node_modules</code> directory, and I’m sure you will not find it.</p><p>To install a library for development purpose is like below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mocha --save-dev</span><br></pre></td></tr></table></figure><p>Now check your <code>package.json</code> in your current project <code>learn-npm</code>, you will see a new property name <code>devDependencies</code> like this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"mocha"</span>: <span class="string">"^6.2.2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-all-installed-libraries"><a href="#Update-all-installed-libraries" class="headerlink" title="Update all installed libraries"></a>Update all installed libraries</h3><p>To update all installed libraries in your <code>package.json</code> is like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><p>Then your dependencies libraries will updated automatically to the latest of it’s version.</p><h3 id="Uninstall-a-library"><a href="#Uninstall-a-library" class="headerlink" title="Uninstall a library"></a>Uninstall a library</h3><p>To uninstall or delete some library in your <code>package.json</code>, is like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall text-obfuscator</span><br></pre></td></tr></table></figure><p>See this picture for detail<br><img src="https://i.imgur.com/Riyhz8o.jpg" alt=""></p><p>Now check again your <code>package.json</code> file, you will see that <code>text-obfuscator</code> library has been removed. So your <code>dependencies</code> property right now will be like this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"fly-json-odm"</span>: <span class="string">"^1.9.1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Audit-all-libraries"><a href="#Audit-all-libraries" class="headerlink" title="Audit all libraries"></a>Audit all libraries</h3><p>If you are working with a lot of libraries, sometimes several libraries could be outdated and maybe there is a vulnerability in your current project. To detect this you can just run an <code>audit</code> with a command like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm audit</span><br></pre></td></tr></table></figure><p>Then the NPM will scanning to your all libraries and giving you the result like this picture below.<br><img src="https://i.imgur.com/M67N5NG.jpg" alt=""></p><p>If your libraries has a vulnerability, NPM will giving you a result like this picture<br><img src="https://i.imgur.com/akFjDpV.jpg" alt=""></p><p><strong>How to test to install a vulnerable library?</strong><br>You can try to install a vulnerable library by this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mailjs</span><br></pre></td></tr></table></figure><p>Then try to <code>audit</code> it by yourself.</p><p>Note:</p><ul><li>If this library has been updated, you have to look it by yourself. Most of vulnerable libraries is using an old <code>lodash</code> dependency.</li></ul><h3 id="How-to-update-the-NPM-Package-Manager"><a href="#How-to-update-the-NPM-Package-Manager" class="headerlink" title="How to update the NPM Package Manager"></a>How to update the NPM Package Manager</h3><p>NPM Package Manager is always updated by NodeJS team developer. If you seen this picture like below this<br><img src="https://i.imgur.com/ovHPfru.jpg" alt=""></p><p>It means that there is update for NPM Package Manager. To update it just run this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g npm</span><br></pre></td></tr></table></figure><p>If you run it, you will getting an error in linux like this picture<br><img src="https://i.imgur.com/Ghg44ql.jpg" alt=""></p><p><strong>Why I getting error?</strong><br>If you see closely at this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g npm</span><br></pre></td></tr></table></figure><p>There is <code>-g</code> in your command which is means NPM will install it as global. You are getting error because you need a permission to install it as global in your filesystem.</p><p>To fixed this you can just run this command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g npm</span><br></pre></td></tr></table></figure><p>If you are using windows, unfortunately you have to close your Visual Studio Code, then open it with <code>Run As Administrator</code>.</p><p>Now you are able to update the latest version of NPM Package Manager. To make sure, you can just check the NPM version by run this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p>See this picture below for detail<br><img src="https://i.imgur.com/NAYzKZ5.jpg" alt=""></p><h3 id="How-to-run-scripts-in-package-json"><a href="#How-to-run-scripts-in-package-json" class="headerlink" title="How to run scripts in package.json"></a>How to run scripts in package.json</h3><p>If you see in your <code>package.json</code>, there is a property name <code>scripts</code> like this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>It was created automatically if you are not specify the command for running unit test when generating a <code>package.json</code> file.</p><p>If you are have no unit test environment, just leave as it.</p><p>Now to run the scripts in package.json is like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li>Add hello command in scripts</li></ul><p><code>test</code> is the property name inside <code>scripts</code> in package.json. Actually we can add more scripts inside property name <code>scripts</code>, for example now we try to <code>run hello world</code>. Now update your <code>scripts</code> like this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"hello"</span>: <span class="string">"echo \"hello world\""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Now to run your new <code>hello</code> command in <code>scripts</code> is just like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run hello</span><br></pre></td></tr></table></figure><p>Then your scripts is executed, see in this picture<br><img src="https://i.imgur.com/CDdDNh0.jpg" alt=""></p><ul><li>add server command in scripts</li></ul><p>Actually you can just run a server from this <code>scripts</code>, so let’s create a simple server then execute it by using scripts.</p><ol><li>Now create a new file <code>index.js</code></li><li>Paste this code inside <code>index.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.end(<span class="string">"Hello Server!"</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Now server running on http://localhost:3000"</span>);</span><br></pre></td></tr></table></figure></li><li>saved it and done.</li></ol><p>Actualy this <code>index.js</code> file is can be executed directly with command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js</span><br></pre></td></tr></table></figure><p>But because we want it to be executable from <code>scripts</code>, now update your <code>scripts</code> like this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"hello"</span>: <span class="string">"echo \"hello world\""</span>,</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"node index.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>So now let’s run the server command in scripts like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run server</span><br></pre></td></tr></table></figure><p>Then open your browser to <code>http://127.0.0.1:3000</code>. You will see a text <code>hello server!</code> in browser page.<br>To stop it just press <strong>CTRL + C</strong> in your terminal.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>NPM Package Manager will help you more easier to manage your libraries for your main project. We have already learning about how to <code>install</code>, <code>update</code>, <code>uninstall</code> and <code>audit</code> the libraries. Also learning about <code>dependencies</code>, <code>devDependencies</code> and <code>scripts</code> in package.json.</p><p>Actually there is a lot of features in NPM Package Manager which is I can not to explain all in this article. If you want to learn more about NPM Package Manager, Please read it at <a href="https://docs.npmjs.com/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>Also if you want to create your own library or want to start being a contributor. There is another article about <a href="https://hexoder.com/post/create-professional-library-in-npm-package/">Create Professional Library in NPM</a> which is you must read it now.</p><p>Thank you for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reason Why I Choose Elementary OS</title>
      <link href="/post/reason-why-i-choose-elementary-os/"/>
      <url>/post/reason-why-i-choose-elementary-os/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8cadb18608624b2d54009faf56b54c33c.jpg" alt=""></p><p>Hello guys, Today I will talk about Elementary OS. Before I use Elementary OS, I was a machintos user. I use this linux distro since Elementary OS Freya was released, but for today I was use the latest of Elementary OS, it’s Hera or EOS 5.1. So in this article I will describe the reason why I choose Elementary OS instead Mac or Windows?</p><a id="more"></a><h2 id="Why-Elementary-OS"><a href="#Why-Elementary-OS" class="headerlink" title="Why Elementary OS"></a>Why Elementary OS</h2><p>At the middle of 2015. I was lost my apple macbook pro. So I bought a new laptop which is not an apple product anymore. I’m not using Windows because I am a mac user which is I do more familiar using a computer based on Unix.</p><p>After go searching through Google, then for the first time I was use Ubuntu Distro and I was to love it very much until I found that I just can not go work with Ubuntu because it’s too overheat for my new laptop.</p><p>So I tried to searching another alternative than Ubuntu and I have tried to install many Linux Distro until I found the best linux distro which is suitable for my work. It’s Elementary OS.</p><p>This is the reasons why I choose Elementary OS for my life working as programmer.</p><h2 id="Compare-with-Ubuntu"><a href="#Compare-with-Ubuntu" class="headerlink" title="Compare with Ubuntu"></a>Compare with Ubuntu</h2><p>Most of points reason to choose Elementary OS will be compare with Ubuntu. Why I do compare with Ubuntu? because comparing with Ubuntu seems more fair as Elementary OS is based from Ubuntu. I also will compare with Windows and Mac but only in some conditions like for <code>graphical view</code>, <code>user experience</code> and <code>performance speed</code>.</p><h3 id="Good-for-low-devices"><a href="#Good-for-low-devices" class="headerlink" title="Good for low devices"></a>Good for low devices</h3><p>My laptop specification is just standard like the most of cheap laptop.</p><p>Here is my specification laptop:</p><ul><li>2Gb of RAM</li><li>250Gb HDD</li><li>Intel core i3</li><li>2Gb of VGA</li></ul><p>With above of specification, I still feel that Elementary OS really faster than Ubuntu. Don’t ever try to use Windows 10, because I feel so bad in performance to use Windows 10 with this specification of device.</p><p>If you want to know about minimum requirement of using Elementary OS :</p><ul><li>Recent Intel i3 or comparable dual-core 64-bit processor</li><li>4 GB of system memory (RAM)</li><li>Solid state drive (SSD) with 15 GB of free space</li><li>Internet access</li><li>1024×768 display</li></ul><p>That above minimum requirement statements is from official Elementary OS website. As you can see, my device is not even meet the minimum requirement to use Elementary OS. But I still feel enjoy to use Elementary OS.</p><h3 id="Fast-Booting"><a href="#Fast-Booting" class="headerlink" title="Fast Booting"></a>Fast Booting</h3><p>Fast booting is my main priority because I mostly work in mobility. I often to do presentation in public like seminar or discussion forum to make demonstration of my project. With using Elementary OS, the booting is very fast, it was under 10 seconds.</p><h3 id="Battery-is-Eficient"><a href="#Battery-is-Eficient" class="headerlink" title="Battery is Eficient"></a>Battery is Eficient</h3><p>I just buy the laptop with cheap in price. So the specification is just standard like the most of cheap laptop. So the battery power is not having a special things. When I was code with use Visual Studio Code in Ubuntu, my battery just can handle for around 1,5 hour then my laptop is going to power off because the battery power has run out. But when I use Elementary OS, my battery could stands longer, it can handle for more than 3 hours. This is so eficient battery.</p><p>Note:</p><ul><li>I’m not using for playing game or watch the video, because this is not fair, this could give different answer because graphic process will took more powers from battery. And different graphic driver will also give different power consumption.</li></ul><h3 id="Night-or-Dark-Theme"><a href="#Night-or-Dark-Theme" class="headerlink" title="Night or Dark Theme"></a>Night or Dark Theme</h3><p>I work as JavaScript or NodeJS developer, so most of the time I code in the night day. So to prevent my eyes from laptop lights, I need a Night or Dark Theme. Elementary has a night theme as default, but with some tweaks, you can get the dark theme in Elementary OS. With dark theme I can more stands longer to code in the night day because my eyes feel comfortable.</p><h3 id="No-Overheat-CPU"><a href="#No-Overheat-CPU" class="headerlink" title="No Overheat CPU"></a>No Overheat CPU</h3><p>When I was still use Ubuntu, My laptop is often to shutdown by itself suddenly. After I search through Google about this happen, I was realised that this is happened because an overheat in CPU. Actualy I was install many battery safer application in Ubuntu like <code>tlp</code> but it just didn’t work in Ubuntu. But since I use Elementary OS, I never found this problem even I’m not install the battery safer application like <code>tlp</code>.</p><p>Note:</p><ul><li><code>tlp</code> application is also working to reduce some CPU process.</li></ul><h3 id="Lightweight"><a href="#Lightweight" class="headerlink" title="Lightweight"></a>Lightweight</h3><p>I feel the best lightweight OS is Elementary OS. Lightweight is not just about a size of an application like in the most <code>ligthweight distros</code>. Lightweight as what I mean is you can feel the performance speed is so fast like to <code>opening</code> the application, the use of the application and the memory consumption of an application. To check the performance, you can just run this command below in your terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top</span><br></pre></td></tr></table></figure><h3 id="Touch-Gesture"><a href="#Touch-Gesture" class="headerlink" title="Touch Gesture"></a>Touch Gesture</h3><p>When I was using mac OS, I feel convenient with their touch gestures. Elementary OS has it’s own gestures which is you can set from settings menu. But for more advanced configuration you will need another library to be use in Elementary OS. With advanced configuration, now I can use gestures similar like in mac. This library is could be use for any kind of linux distros.</p><h3 id="User-Friendly"><a href="#User-Friendly" class="headerlink" title="User Friendly"></a>User Friendly</h3><p>If you are mac user, I’m sure that you will feel this OS is very <code>User Friendly</code>. Because Elementary OS was design for simplicity of use and the layout of theme is really really clean and tidy. For my experience to use this Elementary OS, I feel like still using mac like before. Yes there is a little bit different, but if you are mac wannabe, there is a lot tutorial to transform your Elementary OS become mac especially for the <code>theme</code>, <code>fonts</code>, <code>dock</code>, etc.</p><p>How about windows user trying to use Elementary OS? If you are new in unix worlds, of course you have to learn the basic of using linux OS, but for desktop GUI, I think there is no problem, you can just use Elementary OS like the way of using windows before. Elementary OS is so simple even for someone who trying to use linux for the first time.</p><h3 id="Vision-is-clear"><a href="#Vision-is-clear" class="headerlink" title="Vision is clear"></a>Vision is clear</h3><p>This is an important things to me. I do work as software developer, so I can’t choose OS who the vision is not clear. Because I don’t have much time to always change for the OS. There is only few linux distro who has clear visions. One of them is Elementary OS. Elementary OS is very stable, especially for it’s LTS version. I don’t ever find the worst bug that made me to force reinstall or change the OS. So far Elementary OS is the best linux distro to me.</p><p>Elementary OS vision is:</p><ul><li>Go Fast</li><li>Open Source</li><li>Safe and Secure</li><li>Simplicity</li><li>Productivity</li><li>Privacy Respecting</li></ul><p>From the history of each version they released, they still stick in their vision. So this means that Elementary OS is very serious project as they have a clear vision.</p><h3 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h3><p>Elementary OS has support which is makes easier for newbie to learn about this OS. They have documentation also have stack exchange for Question Answer about elementary OS. I found there are many Group Facebook and community about Elementary OS. Actually Elementary OS has big community in every country all over the world.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I was using Elementary OS for 4 years, so far I still loved to using this. This distro is really make my activity in the real world so productive because this distro is very user friendly, secure, fast and lightweight.</p><p>You are mac user? so I recommend you to use Elementary OS if you have a plan to use linux distro in the future. With some tweaks on gesture touch, I’m sure you will be feel like a home.</p><p>If you think this article is not fair because I just said the good points only, yeah it’s true. I know that mostly of Linux distro is having a bugs because it is an open source. But I will not describe the bad things because it was not disturb of my work of using this elementary OS. Since this Elementary OS is based on Ubuntu, so I can easily fix the bugs from Ubuntu Community.</p><p>Actualy, I’m not having any affiliates with Elementary OS, this article is just true as my experience to using Elementary OS and some experience to use another linux distro also windows. My laptop is bundling with original windows 10, after 1 month of using windows I decided to change to use linux because windows performance is very bad, it is too slow for my specification, if you have good or expensive laptop, maybe using windows 10 could give you best experience.</p><p>So keep open mind, please leave a comment below if I miss something or if I’m wrong about Elementary OS.</p><p>Thank you for reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Opinion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elementary-os </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Create App TotalJS with Mongoose 5</title>
      <link href="/post/how-to-create-app-totaljs-with-mongoose-5/"/>
      <url>/post/how-to-create-app-totaljs-with-mongoose-5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe803902ee3c03bb3cb1f9352f152b2e151.jpg" alt=""></p><p>Hello guys, today I will write an article about how to create an app totaljs with mongoose. What is mongoose? Mongoose is an Object Data Modeling (ODM) for MongoDB database.</p><p>Why I create this tutorial? Actualy TotalJS has created an example to use TotalJS with Mongoose at <a href="https://github.com/totaljs/examples/tree/master/mongoose" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>. But as you can see, it mongoose example has not been updated, it was too old as the last commit was 5 years ago. So in this article, I will using Mongoose 5, of course I have been research and make a test with latest MongoDB database version 4.2.0.</p><a id="more"></a><h2 id="Why-using-Mongoose"><a href="#Why-using-Mongoose" class="headerlink" title="Why using Mongoose?"></a>Why using Mongoose?</h2><p>There are several reasons why use Mongoose instead MongoDB driver directly.</p><ul><li>Schemas</li></ul><p>Actualy TotalJS has schema, Mongoose has too, but not for MongoDB. As you are know that MongoDB is schema-less, so sometimes for big project, we still need a schema so your code will be more readable and maintainable. TotalJS schema is can not to be use as data model for MongoDB, so with using Mongoose you are saving many hours to not create schema by yourself as mongoose has this schema feature.</p><ul><li>Validation</li></ul><p>Actualy TotalJS schema has data model validation. but TotalJS schema validation is can not to be use for relationship data model and to validate some spesific data types in MongoDB. Mongoose has this feature, means you have a second layer validation in your TotalJS schema.</p><ul><li>Instance Methods</li></ul><p>You can create a custom methods data hook and pre or post functionality on successful read / write operations in particular document. MongoDB driver has this too but mongoose is more easier.</p><ul><li>Auto Connection handler</li></ul><p>With using mongoose, you can easily create connection to MongoDB without have to <code>open()</code> or <code>close()</code> it manually. Mongoose has been handled this automatically as default.</p><p>Actualy there is still many reasons but I can’t describe all because we are not talk about this in detail. Maybe in another article I will write pros and cons of using Mongoose (I’m not promise this. lol).</p><h2 id="Reason-to-not-use-Mongoose"><a href="#Reason-to-not-use-Mongoose" class="headerlink" title="Reason to not use Mongoose"></a>Reason to not use Mongoose</h2><p>I can’t not answer this, because the reason to not use Mongoose is relative, everyone has their different answer also it is depend on your situations and conditions. But as for me, the reason to not use mongoose is:</p><ul><li>If you need the fastest perfomance.</li><li>You are working alone (not in a team).</li><li>Your project is small.</li><li>Your database is strict to use denormalize model.</li><li>etc</li></ul><p>If your condition is like above reasons, so you are better to use <code>MongoDB</code> instead <code>mongoose</code> library.</p><h2 id="TotalJS-with-Mongoose"><a href="#TotalJS-with-Mongoose" class="headerlink" title="TotalJS with Mongoose"></a>TotalJS with Mongoose</h2><p>So let’s start to create a TotalJS project with Mongoose 5.</p><p>The goal of this project is:</p><ul><li>Simple CRUD with latest Mongoose 5</li><li>Using TotalJS Schema and Mongoose Schema</li><li>Using MongoDB latest version 4.2.0</li><li>Json response is standardize between TotalJS and Mongoose response</li><li>Code must be clean, readable and maintainable</li></ul><h3 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h3><p>Before we are going to create the project, this is the directory structure plan for the project.</p><ul><li>controllers/<ul><li>default.js</li><li>user.js</li></ul></li><li>definitions/<ul><li>mongoose_conn.js</li><li>mongooose_schema.js</li></ul></li><li>models/<ul><li>user.js</li></ul></li><li>.gitignore</li><li>config</li><li>debug.js</li><li>package.json</li><li>postman.json</li><li>readme.md</li><li>release.js</li><li>test.js</li></ul><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>For the first time, we must generate a <code>package.json</code> with using this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>Then I will install for <code>total.js</code> and <code>mongoose</code> library from NPM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install total.js mongoose</span><br></pre></td></tr></table></figure><p>After install successfully, so here is the example of generated <code>package.json</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"totaljs-mongoose-rest-example"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Example TotalJS with Mongoose 5 for create a simple CRUD Rest API"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"debug.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/aalfiann/totaljs-mongoose-rest-example.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"totaljs"</span>,</span><br><span class="line">    <span class="string">"mongoose"</span>,</span><br><span class="line">    <span class="string">"rest-api"</span>,</span><br><span class="line">    <span class="string">"example"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"M ABD AZIZ ALFIAN"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"bugs"</span>: &#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/aalfiann/totaljs-mongoose-rest-example/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/aalfiann/totaljs-mongoose-rest-example#readme"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"mongoose"</span>: <span class="string">"^5.7.1"</span>,</span><br><span class="line">    <span class="string">"total.js"</span>: <span class="string">"^3.2.4"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p><code>.gitignore</code> file is required to prevent some files or directory to be uploaded into github repository.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">debug.pid</span><br><span class="line">tmp</span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p><code>config</code> file is for default variables as configuration for application.</p><p>Here is the default <code>config</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name                  : Total.js with Mongoose 5</span><br><span class="line">author                : M ABD AZIZ ALFIAN</span><br><span class="line">version               : 1.0.0</span><br><span class="line"></span><br><span class="line">// Mail settings</span><br><span class="line">mail_smtp             : smtp.yourwebsite.com</span><br><span class="line">mail_smtp_options     : &#123;&quot;secure&quot;:false,&quot;port&quot;:25,&quot;user&quot;:&quot;&quot;,&quot;password&quot;:&quot;&quot;,&quot;timeout&quot;:10000&#125;</span><br><span class="line">mail_address_from     : your@yourwebsite.com</span><br><span class="line">mail_address_reply    : your@yourwebsite.com</span><br><span class="line">mail_address_copy     :</span><br><span class="line"></span><br><span class="line">// MongoDB settings</span><br><span class="line">mongodb_url           : mongodb://127.0.0.1:27017/app</span><br><span class="line">mongodb_debug_event   : true</span><br></pre></td></tr></table></figure><h3 id="debug-js"><a href="#debug-js" class="headerlink" title="debug.js"></a>debug.js</h3><p>This <code>debug.js</code> file is the default from TotalJS documentation.</p><p>You can just copy and paste this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR DEVELOPMENT</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"><span class="comment">// options.inspector = 9229;</span></span><br><span class="line"><span class="comment">// options.watch = ['private'];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js/debug'</span>)(options);</span><br></pre></td></tr></table></figure><h3 id="release-js"><a href="#release-js" class="headerlink" title="release.js"></a>release.js</h3><p>This <code>release.js</code> file is the default from TotalJS documentation.</p><p>You can just copy and paste this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR PRODUCTION</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js'</span>).http(<span class="string">'release'</span>, options);</span><br><span class="line"><span class="comment">// require('total.js').cluster.http(5, 'release', options);</span></span><br></pre></td></tr></table></figure><h3 id="test-js"><a href="#test-js" class="headerlink" title="test.js"></a>test.js</h3><p>This <code>test.js</code> file is the default from TotalJS documentation.</p><p>You can just copy and paste this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR UNIT-TESTING</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js'</span>).http(<span class="string">'test'</span>, options);</span><br></pre></td></tr></table></figure><h3 id="readme-md"><a href="#readme-md" class="headerlink" title="readme.md"></a>readme.md</h3><p>This <code>readme.md</code> file is just to show detail information about this project.</p><p>Here is the <code>readme.md</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># totaljs-mongoose-rest-example</span><br><span class="line">Example TotalJS with Mongoose 5 for create a simple CRUD Rest API</span><br><span class="line"></span><br><span class="line">- Download this example</span><br><span class="line">- run `$ npm install`</span><br><span class="line">- edit `config` file and change for `mongodb_url` value with yours.</span><br><span class="line">- run `$ node debug.js`</span><br><span class="line">- open browser `http://127.0.0.1:8000`</span><br><span class="line">- Import `postman.json` into your postman for test</span><br></pre></td></tr></table></figure><h3 id="postman-json"><a href="#postman-json" class="headerlink" title="postman.json"></a>postman.json</h3><p>This <code>postman.json</code> file is to make a test for all the request API.</p><p>You can just copy paste this <code>postman.json</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"info"</span>: &#123;</span><br><span class="line"><span class="string">"_postman_id"</span>: <span class="string">"920f56c3-99ab-47f5-b204-330dcac4b15e"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Example Totaljs with Mongoose 5"</span>,</span><br><span class="line"><span class="string">"schema"</span>: <span class="string">"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"item"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Add User"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line"><span class="string">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"application/json"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="string">"mode"</span>: <span class="string">"raw"</span>,</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"&#123;\n\t\"name\":\"john\",\n\t\"address\":\"yogyakarta\"\n&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/user/add"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"user"</span>,</span><br><span class="line"><span class="string">"add"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"List User"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"header"</span>: [],</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/user/list"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"user"</span>,</span><br><span class="line"><span class="string">"list"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Search User"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="string">"header"</span>: [],</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/user?search="</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"user"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"query"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"search"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Update User"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"PUT"</span>,</span><br><span class="line"><span class="string">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"application/json"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="string">"mode"</span>: <span class="string">"raw"</span>,</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"&#123;\n\t\"id\":\"5d88ad7da18ff47df554eb77\",\n\t\"name\":\"john\",\n\t\"address\":\"indonesia\"\n&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/user/update"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"user"</span>,</span><br><span class="line"><span class="string">"update"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Delete User"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"DELETE"</span>,</span><br><span class="line"><span class="string">"header"</span>: [],</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/user/delete/&#123;id&#125;"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"user"</span>,</span><br><span class="line"><span class="string">"delete"</span>,</span><br><span class="line"><span class="string">"&#123;id&#125;"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="definitions-mongoose-conn-js"><a href="#definitions-mongoose-conn-js" class="headerlink" title="definitions/mongoose_conn.js"></a>definitions/mongoose_conn.js</h3><p>Now we will create a connection from Mongoose to MongoDB database.</p><p>You can just copy and paste this <code>mongoose_conn.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * You don't have to require this into your other file .js anymore </span></span><br><span class="line"><span class="comment"> * because mongoose connection will open once then </span></span><br><span class="line"><span class="comment"> * reuse the connection automatically</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>( <span class="string">'mongoose'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mongoose starting connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.connect(F.config.mongodb_url, &#123;</span><br><span class="line">    autoReconnect: <span class="literal">true</span>,</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span>,</span><br><span class="line">    useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">    useFindAndModify: <span class="literal">false</span>,</span><br><span class="line">    reconnectTries: <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CONNECTION EVENTS</span></span><br><span class="line"><span class="keyword">if</span>(F.config.mongodb_debug_event) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mongoose start making connection to MongoDB</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Mongoose start making connection to '</span> + F.config.mongodb_url);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When successfully connected</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Mongoose successfully connected with MongoDB'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When connection lost mongoose will try to reconnect and the reconnect connection is successful connected</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'reconnected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Mongoose successfully reconnected with MongoDB'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the connection throws an error</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Mongoose connection error: '</span> + err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mongoose start disconnecting from MongoDB</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'disconnecting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Disconnecting Mongoose from MongoDB'</span>); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When the connection is already disconnected</span></span><br><span class="line">    mongoose.connection.on(<span class="string">'disconnected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM-dd HH:mm:ss'</span>)+<span class="string">' : '</span>+<span class="string">'Mongoose is already disconnected from MongoDB'</span>); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the Node process ends, close the Mongoose connection </span></span><br><span class="line">    process.on(<span class="string">'SIGINT'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        mongoose.connection.close();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>You don’t have to require this <code>mongoose_conn.js</code>, because this library will be called inside <code>mongoose_schema.js</code>.</li></ul><h3 id="mongoose-schema-js"><a href="#mongoose-schema-js" class="headerlink" title="mongoose_schema.js"></a>mongoose_schema.js</h3><p>Now we will create a <code>mongoose_schema.js</code> file, this library will work as helper for creating a TotalJS schema.</p><p>You can just copy and paste this <code>mongoose_schema.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> mongooseSchema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transform document object</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; doc </span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; ret </span></span><br><span class="line"><span class="comment"> * @return &#123;object&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">doc, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> ret._id;</span><br><span class="line">    ret.id = doc._id.toString();</span><br><span class="line">    <span class="keyword">return</span> ret;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create Mongoose schema</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; obj</span></span><br><span class="line"><span class="comment"> * @return &#123;schema&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSchema</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> schema = <span class="keyword">new</span> mongooseSchema(obj, &#123;</span><br><span class="line">        toObject: &#123; transform &#125;,</span><br><span class="line">        toJSON: &#123; transform &#125;  </span><br><span class="line">    &#125;);</span><br><span class="line">      </span><br><span class="line">    schema.set(<span class="string">'toObject'</span>, &#123;<span class="attr">virtuals</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> schema;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set Mongoose model</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name </span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; schema</span></span><br><span class="line"><span class="comment"> * @return &#123;model&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setModel</span>(<span class="params">name,schema</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mongoose.model(name, createSchema(schema));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Modify error from totaljs schema</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name     this is the error key name </span></span><br><span class="line"><span class="comment"> * @return &#123;ErrorBuilder&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schemaErrorBuilder</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ErrorBuilder.addTransform(name, <span class="function"><span class="keyword">function</span>(<span class="params">isResponse</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> builder = [];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = <span class="keyword">this</span>.items.length; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> err = <span class="keyword">this</span>.items[i];</span><br><span class="line">            builder.push(&#123;<span class="attr">name</span>:err.name,<span class="attr">error</span>:err.error&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (isResponse) &#123;</span><br><span class="line">            <span class="keyword">if</span> (builder.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="number">400</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    code:<span class="keyword">this</span>.status,</span><br><span class="line">                    status:<span class="string">'error'</span>,</span><br><span class="line">                    message:<span class="string">'Invalid parameter'</span>,</span><br><span class="line">                    error:builder</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    code:<span class="keyword">this</span>.status,</span><br><span class="line">                    status:<span class="string">'error'</span>,</span><br><span class="line">                    message:<span class="string">'Something went wrong...'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response error in Mongoose</span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; err          this is the error detail from Mongoose</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorHandler</span>(<span class="params">$, err</span>)</span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">var</span> error = &#123;</span><br><span class="line">        code:err.code,</span><br><span class="line">        status:<span class="string">'error'</span>,</span><br><span class="line">        message:err.errmsg,</span><br><span class="line">        error:&#123;</span><br><span class="line">            driver:err.driver,</span><br><span class="line">            name:err.name,</span><br><span class="line">            index:err.index,</span><br><span class="line">            keyPattern:err.keyPattern,</span><br><span class="line">            keyValue:err.keyValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(error)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response success </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successResponse</span> (<span class="params">$,message, response=[]</span>) </span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> success = &#123;</span><br><span class="line">        <span class="string">'code'</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">'status'</span>:<span class="string">'success'</span>,</span><br><span class="line">        <span class="string">'message'</span>:message,</span><br><span class="line">        <span class="string">'response'</span>:response</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(success)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response fail </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">failResponse</span> (<span class="params">$, message, response=[]</span>) </span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> fail = &#123;</span><br><span class="line">        <span class="string">'code'</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">'status'</span>:<span class="string">'error'</span>,</span><br><span class="line">        <span class="string">'message'</span>:message,</span><br><span class="line">        <span class="string">'response'</span>:response</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(fail)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response custom </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; code            this is the http code you want to sent in response header</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; status       this is the status you want to sent in response body</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @param &#123;bool&#125; isError        this is the type of success or error response</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customResponse</span> (<span class="params">$, code, status, message, response=[], isError=false</span>) </span>&#123;</span><br><span class="line">    $.controller.status = code;</span><br><span class="line">    <span class="keyword">var</span> custom = &#123;</span><br><span class="line">        <span class="string">'code'</span>:code,</span><br><span class="line">        <span class="string">'status'</span>:status,</span><br><span class="line">        <span class="string">'message'</span>:message</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(response !== <span class="literal">undefined</span> &amp;&amp; response !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span>(isError) &#123;</span><br><span class="line">            name = <span class="string">'error'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = <span class="string">'response'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        custom[name] = response;</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(custom)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    createSchema,</span><br><span class="line">    setModel,</span><br><span class="line">    schemaErrorBuilder,</span><br><span class="line">    errorHandler,</span><br><span class="line">    successResponse,</span><br><span class="line">    failResponse,</span><br><span class="line">    customResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="models-user-js"><a href="#models-user-js" class="headerlink" title="models/user.js"></a>models/user.js</h3><p>Now we will create <code>user.js</code> file inside models directory.</p><p>You can just copy and paste this <code>user.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">NEWSCHEMA(<span class="string">'User'</span>).make(<span class="function"><span class="keyword">function</span>(<span class="params">schema</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Better to use var instead const</span></span><br><span class="line">    <span class="keyword">var</span> mongoose = <span class="built_in">require</span>(F.path.definitions(<span class="string">'mongoose_schema'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Schema for Mongoose</span></span><br><span class="line">    <span class="keyword">var</span> userSchema = &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: [<span class="literal">true</span>, <span class="string">"A name is required"</span>],</span><br><span class="line">          trim: <span class="literal">true</span>,</span><br><span class="line">          max: [<span class="number">40</span>, <span class="string">'The maximum name length is 40'</span>],</span><br><span class="line">          unique: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        address: &#123;</span><br><span class="line">            type: <span class="built_in">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define User model</span></span><br><span class="line">    <span class="keyword">var</span> User = mongoose.setModel(<span class="string">'User'</span>,userSchema);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define interface schema</span></span><br><span class="line">    schema.define(<span class="string">'id'</span>, <span class="string">'string'</span>);</span><br><span class="line">    schema.define(<span class="string">'name'</span>, <span class="string">'string'</span>, <span class="literal">true</span>);</span><br><span class="line">    schema.define(<span class="string">'address'</span>, <span class="string">'string'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen schema validation error from totaljs</span></span><br><span class="line">    mongoose.schemaErrorBuilder(<span class="string">'custom'</span>);</span><br><span class="line">    schema.setError(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; error.setTransform(<span class="string">'custom'</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List User</span></span><br><span class="line">    schema.addWorkflow(<span class="string">'list'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        User.find().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            mongoose.successResponse($,<span class="string">'Data found'</span>,response);</span><br><span class="line">        &#125;, (err) =&gt; &#123;</span><br><span class="line">            mongoose.errorBuilder($,err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add User</span></span><br><span class="line">    schema.addWorkflow(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body = $.model.$clean();</span><br><span class="line">        <span class="keyword">new</span> User(body).save().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            mongoose.successResponse($,<span class="string">'Add user successful'</span>,response);</span><br><span class="line">        &#125;, (err) =&gt; &#123;</span><br><span class="line">            mongoose.errorHandler($,err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search User</span></span><br><span class="line">    schema.addWorkflow(<span class="string">'search'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> query = $.query;</span><br><span class="line">        User.find(&#123;</span><br><span class="line">            $or:[</span><br><span class="line">                &#123;<span class="attr">name</span>:&#123;<span class="attr">$regex</span>: query.search&#125;&#125;,</span><br><span class="line">                &#123;<span class="attr">address</span>:&#123;<span class="attr">$regex</span>: query.search&#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            mongoose.successResponse($,<span class="string">'Data found'</span>,response);</span><br><span class="line">        &#125;,(err) =&gt; &#123;</span><br><span class="line">            mongoose.errorHandler($,err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update User</span></span><br><span class="line">    schema.addWorkflow(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body = $.model.$clean();</span><br><span class="line">        User.findOneAndUpdate(&#123;</span><br><span class="line">            _id:body.id</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name:body.name,</span><br><span class="line">            address:body.address</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="keyword">new</span>:<span class="literal">true</span></span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            mongoose.successResponse($,<span class="string">'Update data is succesful'</span>,response);</span><br><span class="line">        &#125;,(err) =&gt; &#123;</span><br><span class="line">            mongoose.errorHandler($,err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete User</span></span><br><span class="line">    schema.addWorkflow(<span class="string">'delete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        User.deleteOne(&#123;</span><br><span class="line">            _id:$.id</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            mongoose.successResponse($,<span class="string">'Delete data is succesful'</span>,response);</span><br><span class="line">        &#125;,(err) =&gt; &#123;</span><br><span class="line">            mongoose.errorHandler($,err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>As you can see on above code, We are using two schemas, it is TotalJS schema and Mongoose schema. So we have two layer validation for the data model.</p><h3 id="controllers-default-js"><a href="#controllers-default-js" class="headerlink" title="controllers/default.js"></a>controllers/default.js</h3><p>I will create default controller to show your visitor about your API website.</p><p>You can just copy and paste this <code>default.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exports.install = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">ROUTE(<span class="string">'/'</span>, view_plain);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">view_plain</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">self.plain(F.config.name+<span class="string">'\n'</span>+<span class="string">'Version : '</span>+F.config.version+<span class="string">'\n'</span>+<span class="string">'Author : '</span>+F.config.author);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controllers-user-js"><a href="#controllers-user-js" class="headerlink" title="controllers/user.js"></a>controllers/user.js</h3><p>Now we will create the controller and routes for api <code>user.js</code>.</p><p>You can just copy and paste this <code>user.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">exports.install = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow Cors</span></span><br><span class="line">  CORS(<span class="string">'/api/*'</span>, [<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'delete'</span>], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set Route</span></span><br><span class="line">  ROUTE(<span class="string">'/api/user'</span>, [<span class="string">'get'</span>,<span class="string">'post'</span>,<span class="string">'*User --&gt; @search'</span>]);</span><br><span class="line">  ROUTE(<span class="string">'/api/user/list'</span>, [<span class="string">'get'</span>,<span class="string">'post'</span>,<span class="string">'*User --&gt; @list'</span>]);</span><br><span class="line">  ROUTE(<span class="string">'/api/user/add'</span>, [<span class="string">'post'</span>,<span class="string">'*User --&gt; @add'</span>]);</span><br><span class="line">  ROUTE(<span class="string">'/api/user/update'</span>, [<span class="string">'put'</span>,<span class="string">'*User --&gt; @update'</span>]);</span><br><span class="line">  ROUTE(<span class="string">'/api/user/delete/&#123;id&#125;'</span>, [<span class="string">'delete'</span>,<span class="string">'*User --&gt; @delete'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><p>Now we have already simple Rest API with Mongoose 5. You can read the <code>readme.md</code> file for using this project.</p><p>But if you are following the step by step of this article, to use this project is</p><ul><li><p>run the server by this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node debug.js</span><br></pre></td></tr></table></figure></li><li><p>now open the browser <code>http://127.0.0.1:8000</code></p></li><li><p>if successfully, now open your postman app</p></li><li><p>Import the <code>postman.json</code> into your postman app</p></li><li><p>Now you can make a request to test your API from postman app</p></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>MongoDB version 4.2.0 is the latest MongoDB database and Mongoose 5 is the latest mongoose version for today as I write this article. I have tested this project and everything is running well with no any problems.</p><p>This project is just an example to create a Simple CRUD API TotalJS with Mongoose 5. Actualy this project has been uploaded into my github repository, You can just download the whole source code at <a href="https://github.com/aalfiann/totaljs-mongoose-rest-example" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>I don’t make explanation in very detail because the code is very simple and I’m sure this is not too hard for newbie to learning this source code. But if there is something that you don’t understand, just feel free to leave comment at below.</p><p>Thank You for your time to reading this article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Best Practice to Create Rest API With TotalJS Framework</title>
      <link href="/post/best-practice-to-create-rest-api-with-totaljs-framework/"/>
      <url>/post/best-practice-to-create-rest-api-with-totaljs-framework/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe85957d436275901795edee02fed23111e.jpg" alt=""></p><p>Hello guys, this time I will write an article about Best Practice to Create Rest API with TotalJS Framework.<br>We already know that there is an example <a href="https://github.com/totaljs/emptyproject-restservice" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">emptyproject-restservice</a> from official TotalJS documentaion. But it example only give us the simple way to create a rest api with TotalJS. Simple way doesn’t same meaning with best practice way. So how the best practice way to create rest api with TotalJS framework?</p><a id="more"></a><h2 id="What-is-the-goal"><a href="#What-is-the-goal" class="headerlink" title="What is the goal?"></a>What is the goal?</h2><p>Before we start to create a basic rest api with TotalJS framework. We will create an empty skeleton for rest api, which is this skeleton will be benefit for us to be use in every new project. I also will upload this project on my github, so you can just download this skeleton again and again in the future.</p><p>So here is the goals of this skeleton :</p><ul><li>An empty rest api project</li><li>No default session (you are free to use what session method for your project)</li><li>Use standard <code>uuid</code> and <code>bcrypt</code> for better security</li><li>Use middleware for custom header x-token</li><li>Use models as schemas</li><li>Json response is standardized</li><li>Code must be clean and readable</li><li>Best practice way</li></ul><h2 id="Make-a-skeleton"><a href="#Make-a-skeleton" class="headerlink" title="Make a skeleton"></a>Make a skeleton</h2><p>Now for the first time, I will create new project name <code>totaljs-rest-skeleton</code>.</p><ul><li>Create the <code>package.json</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></li></ul><p>After generate the <code>package.json</code> with <code>NPM init</code>, so here is my package.json:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"totaljs-rest-skeleton"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"TotalJS Rest Skeleton with best practice way"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"debug.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/aalfiann/totaljs-rest-skeleton.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"totaljs"</span>,</span><br><span class="line">    <span class="string">"totaljs-rest"</span>,</span><br><span class="line">    <span class="string">"totaljs-rest-api"</span>,</span><br><span class="line">    <span class="string">"totaljs-rest-skeleton"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"M ABD AZIZ ALFIAN"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"bugs"</span>: &#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/aalfiann/totaljs-rest-skeleton/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/aalfiann/totaljs-rest-skeleton#readme"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Install <code>total.js</code>, <code>uuid</code> and <code>bcryptjs</code> from NPM<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install total.js uuid bcryptjs</span><br></pre></td></tr></table></figure></li></ul><p>After install required library successfully, if you take a look in your <code>package.json</code> file, now it’s added new line.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"bcryptjs"</span>: <span class="string">"^2.4.3"</span>,</span><br><span class="line">  <span class="string">"total.js"</span>: <span class="string">"^3.3.2"</span>,</span><br><span class="line">  <span class="string">"uuid"</span>: <span class="string">"^3.3.3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let’s we continue to the next step.</p><h3 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h3><p>The project is still empty, so now we must create the directory structure plan first.</p><ul><li>controllers/<ul><li>api.js</li><li>default.js</li></ul></li><li>definitions/<ul><li>app_helper.js</li><li>middleware.js</li></ul></li><li>models/<ul><li>account.js</li></ul></li><li>.gitignore</li><li>config</li><li>debug.js</li><li>LICENSE</li><li>package.json</li><li>postman.json</li><li>readme.md</li><li>release.js</li><li>test.js</li></ul><p>The above directory structure is we will create a rest api skeleton with MVC architecture. This design is follow the documentation from TotalJS.</p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p><code>.gitignore</code> is required to prevent the files which is doesn’t need to upload into github repository. In this skeleton, I just prevent the <code>node_modules</code> and <code>package-lock.json</code> to be uploaded into github repository.</p><p>So the <code>.gitignore</code> file is must be like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">databases</span><br><span class="line">tmp</span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p><code>config</code> file is to set the default settings for application. In this skeleton, I just set for default variables.</p><p>So the <code>config</code> file is like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name                            : Total.js Rest Skeleton</span><br><span class="line">author                          : M ABD AZIZ ALFIAN (https:<span class="comment">//github.com/aalfiann)</span></span><br><span class="line">version                         : <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">api_xtoken                      : <span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>Config <code>key</code> must be no any space and must be string.</li><li>Config <code>value</code> could be <code>Object</code>, <code>json</code>, <code>number</code>, <code>boolean</code>, <code>date</code>, <code>array</code>, <code>env</code> or <code>config linking</code>.</li></ul><p>Example config:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">custom_config_object_raw      (<span class="built_in">Object</span>)    : &#123; <span class="attr">name</span>: <span class="string">'Total.js'</span>, <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;</span><br><span class="line">custom_config_object_json     (<span class="built_in">JSON</span>)      : &#123; <span class="string">"name"</span>: <span class="string">"Total.js"</span> &#125;</span><br><span class="line">custom_config_number          (number)    : <span class="number">320.34</span></span><br><span class="line">custom_config_boolean         (boolean)   : <span class="literal">true</span></span><br><span class="line">custom_config_date            (date)      : <span class="number">2016</span><span class="number">-07</span><span class="number">-26</span></span><br><span class="line">custom_config_array           (array)     : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">binds_environment_value       (env)       : APP_NAME</span><br><span class="line"></span><br><span class="line"><span class="comment">// +v2.9.0 supports config linking</span></span><br><span class="line">binds_config_value            (config)    : name</span><br></pre></td></tr></table></figure><p>For more detail about config, please see at <a href="https://docs.totaljs.com/latest/en.html#api~FrameworkConfiguration" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a></p><h3 id="debug-js"><a href="#debug-js" class="headerlink" title="debug.js"></a>debug.js</h3><p><code>debug.js</code> file is to run TotalJS framework as debug mode.</p><p>Create <code>debug.js</code> file is very simple as like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR DEVELOPMENT</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"><span class="comment">// options.inspector = 9229;</span></span><br><span class="line"><span class="comment">// options.watch = ['private'];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js/debug'</span>)(options);</span><br></pre></td></tr></table></figure><p>To run this <code>debug.js</code> in TotalJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node debug.js</span><br></pre></td></tr></table></figure><p>Now your application is running with debug mode.</p><p>What is debug.js used for? When you are still in development progress, if there is an update or refactor in your code, application will update it automatically without have to restart the current service.</p><h3 id="release-js"><a href="#release-js" class="headerlink" title="release.js"></a>release.js</h3><p><code>release.js</code> file is to run TotalJS framework as release mode.</p><p>Create <code>release.js</code> file is very simple as like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR PRODUCTION</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js'</span>).http(<span class="string">'release'</span>, options);</span><br><span class="line"><span class="comment">// require('total.js').cluster.http(5, 'release', options);</span></span><br></pre></td></tr></table></figure><p>To run this <code>release.js</code> in TotalJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node release.js</span><br></pre></td></tr></table></figure><p>Now your application is running with release mode.</p><p>What is release.js used for? When you are have complete the development progress, you can just run the stable version of your code. If there is an update or refactor in your code, application will not update it automatically and you also have to restart the current service.</p><h3 id="test-js"><a href="#test-js" class="headerlink" title="test.js"></a>test.js</h3><p><code>test.js</code> file is to run TotalJS framework as unit test mode.</p><p>Create <code>test.js</code> file is very simple as like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"><span class="comment">// FOR UNIT-TESTING</span></span><br><span class="line"><span class="comment">// Total.js - framework for Node.js platform</span></span><br><span class="line"><span class="comment">// https://www.totaljs.com</span></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// options.ip = '127.0.0.1';</span></span><br><span class="line"><span class="comment">// options.port = parseInt(process.argv[2]);</span></span><br><span class="line"><span class="comment">// options.config = &#123; name: 'Total.js' &#125;;</span></span><br><span class="line"><span class="comment">// options.sleep = 3000;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'total.js'</span>).http(<span class="string">'test'</span>, options);</span><br></pre></td></tr></table></figure><p>To run this <code>test.js</code> in TotalJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br></pre></td></tr></table></figure><p>Now your application is running as unit test mode.</p><p>What is <code>test.js</code> used for? TotalJS framework has it own unit test feature, so test mode will only execute the unit test and get the result for you in seconds.</p><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p><code>license</code> type file will using <code>MIT</code>, so that everyone will more freedom to use this rest api skeleton in their projects.</p><p>Example MIT License:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Copyright 2019 M ABD AZIZ ALFIAN</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br></pre></td></tr></table></figure><h3 id="readme-md"><a href="#readme-md" class="headerlink" title="readme.md"></a>readme.md</h3><p><code>Readme.md</code> file is must be written about your detail project information.</p><p>For default <code>readme.md</code> file is like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># totaljs-rest-skeleton</span><br><span class="line">TotalJS Rest Skeleton with best practice way  </span><br><span class="line"></span><br><span class="line">## How to use</span><br><span class="line">- Download and extract this project</span><br><span class="line">- open terminal / command-line</span><br><span class="line">- go to extracted directory</span><br><span class="line">- install the library from NPM `$ npm install`</span><br><span class="line">- run `$ node debug.js`</span><br><span class="line">- open browser `http://127.0.0.1:8000`</span><br><span class="line"></span><br><span class="line">## How to test the Rest API</span><br><span class="line">- make sure you are able to open browser `http://127.0.0.1:8000`</span><br><span class="line">- open postman app</span><br><span class="line">- import collection `postman.json`</span><br><span class="line">- done, now you are able to make test the rest api</span><br></pre></td></tr></table></figure><h3 id="definitions-app-helper-js"><a href="#definitions-app-helper-js" class="headerlink" title="definitions/app_helper.js"></a>definitions/app_helper.js</h3><p>Now I will create an <code>app_helper.js</code>, this is used for modify the default response become standardize json response.</p><p>So you can just copy paste the class below here :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    schemaErrorBuilder,</span><br><span class="line">    builderErrorResponse,</span><br><span class="line">    successResponse,</span><br><span class="line">    failResponse,</span><br><span class="line">    customResponse,</span><br><span class="line">    cryptPassword,</span><br><span class="line">    comparePassword</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Modify error from schema</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name     this is the error key name </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schemaErrorBuilder</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ErrorBuilder.addTransform(name, <span class="function"><span class="keyword">function</span>(<span class="params">isResponse</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> builder = [];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = <span class="keyword">this</span>.items.length; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> err = <span class="keyword">this</span>.items[i];</span><br><span class="line">            builder.push(&#123;<span class="attr">name</span>:err.name,<span class="attr">error</span>:err.error&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (isResponse) &#123;</span><br><span class="line">            <span class="keyword">this</span>.status = <span class="number">400</span>;</span><br><span class="line">            <span class="keyword">if</span> (builder.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    code:<span class="keyword">this</span>.status,</span><br><span class="line">                    status:<span class="string">'error'</span>,</span><br><span class="line">                    message:<span class="string">'Invalid parameter'</span>,</span><br><span class="line">                    error:builder</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    code:<span class="keyword">this</span>.status,</span><br><span class="line">                    status:<span class="string">'error'</span>,</span><br><span class="line">                    message:<span class="string">'Something went wrong...'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Database builder error response</span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">builderErrorResponse</span>(<span class="params">$,err</span>)</span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">409</span>;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        code:<span class="number">409</span>,</span><br><span class="line">        status:<span class="string">'error'</span>,</span><br><span class="line">        message:<span class="string">'Something went wrong...'</span>,</span><br><span class="line">        error:err</span><br><span class="line">    &#125;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response success </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successResponse</span> (<span class="params">$,message, response=[]</span>) </span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> success = &#123;</span><br><span class="line">        <span class="string">'code'</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">'status'</span>:<span class="string">'success'</span>,</span><br><span class="line">        <span class="string">'message'</span>:message,</span><br><span class="line">        <span class="string">'response'</span>:response</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(success)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response fail </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">failResponse</span> (<span class="params">$, message, response=[]</span>) </span>&#123;</span><br><span class="line">    $.controller.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> fail = &#123;</span><br><span class="line">        <span class="string">'code'</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">'status'</span>:<span class="string">'error'</span>,</span><br><span class="line">        <span class="string">'message'</span>:message,</span><br><span class="line">        <span class="string">'response'</span>:response</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(fail)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response custom </span></span><br><span class="line"><span class="comment"> * @param &#123;controller&#125; $        this is the totaljs controller</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; code            this is the http code you want to sent in response header</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; status       this is the status you want to sent in response body</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message      this is the message of response</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; response          this is the response detail</span></span><br><span class="line"><span class="comment"> * @param &#123;bool&#125; isError        this is the type of success or error response</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customResponse</span> (<span class="params">$, code, status, message, response=[], isError=false</span>) </span>&#123;</span><br><span class="line">    $.controller.status = code;</span><br><span class="line">    <span class="keyword">var</span> custom = &#123;</span><br><span class="line">        <span class="string">'code'</span>:code,</span><br><span class="line">        <span class="string">'status'</span>:status,</span><br><span class="line">        <span class="string">'message'</span>:message</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(response !== <span class="literal">undefined</span> &amp;&amp; response !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span>(isError) &#123;</span><br><span class="line">            name = <span class="string">'error'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = <span class="string">'response'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        custom[name] = response;</span><br><span class="line">    &#125;</span><br><span class="line">    $.callback(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(custom)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encrypt password</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; password     this is the user password </span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; callback</span></span><br><span class="line"><span class="comment"> * @return &#123;callback&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cryptPassword</span>(<span class="params">password, callback</span>) </span>&#123;</span><br><span class="line">    bcrypt.genSalt(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (err) </span><br><span class="line">       <span class="keyword">return</span> callback(err);</span><br><span class="line"> </span><br><span class="line">     bcrypt.hash(password, salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> callback(err, hash);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Compare password</span></span><br><span class="line"><span class="comment">  * @param &#123;string&#125; plainPass        this is the user password </span></span><br><span class="line"><span class="comment">  * @param &#123;string&#125; hashword         this is the hashed user password</span></span><br><span class="line"><span class="comment">  * @param &#123;*&#125; callback </span></span><br><span class="line"><span class="comment">  * @return &#123;callback&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">comparePassword</span>(<span class="params">plainPass, hashword, callback</span>) </span>&#123;</span><br><span class="line">    bcrypt.compare(plainPass, hashword, <span class="function"><span class="keyword">function</span>(<span class="params">err, isPasswordMatch</span>) </span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> err == <span class="literal">null</span> ?</span><br><span class="line">            callback(<span class="literal">null</span>, isPasswordMatch) :</span><br><span class="line">            callback(err);</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="definitions-middleware-js"><a href="#definitions-middleware-js" class="headerlink" title="definitions/middleware.js"></a>definitions/middleware.js</h3><p>Now I will create the default middleware for authenticate the API.</p><p>So you can just create the file <code>middleware.js</code> then copy paste this code below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Authenticate api</span></span><br><span class="line">MIDDLEWARE(<span class="string">'auth_api'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $.controller.req.headers[<span class="string">'x_token'</span>] = ($.controller.req.headers[<span class="string">'x_token'</span>] == <span class="literal">undefined</span>)?<span class="string">''</span>:$.controller.req.headers[<span class="string">'x_token'</span>];</span><br><span class="line">    <span class="keyword">if</span>($.controller.req.headers[<span class="string">'x_token'</span>] == F.config.api_xtoken) &#123;</span><br><span class="line">        $.next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $.controller.status = <span class="number">401</span>;</span><br><span class="line">        $.controller.json(&#123;<span class="attr">code</span>:<span class="number">401</span>,<span class="attr">status</span>:<span class="string">'error'</span>,<span class="attr">message</span>:<span class="string">'You\'re not authorized to use this API!'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="models-account-js"><a href="#models-account-js" class="headerlink" title="models/account.js"></a>models/account.js</h3><p>Here is the models for <code>account</code>.</p><ul><li>create <code>account.js</code> then just copy paste this code below:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helper = <span class="built_in">require</span>(F.path.definitions(<span class="string">'app_helper'</span>));</span><br><span class="line"><span class="keyword">const</span> uuidv4 = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>);</span><br><span class="line"></span><br><span class="line">NEWSCHEMA(<span class="string">'Account'</span>).make(<span class="function"><span class="keyword">function</span>(<span class="params">schema</span>) </span>&#123;</span><br><span class="line">    schema.define(<span class="string">'username'</span>, <span class="string">'string'</span>);</span><br><span class="line">    schema.define(<span class="string">'password'</span>, <span class="string">'string'</span>);</span><br><span class="line">    schema.define(<span class="string">'email'</span>, <span class="string">'string'</span>);</span><br><span class="line"></span><br><span class="line">    schema.required(<span class="string">'username,password'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">model, op</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> (op.login == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> (op.register == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    schema.required(<span class="string">'email'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">model, op</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> op.register;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen schema validation error from totaljs</span></span><br><span class="line">    helper.schemaErrorBuilder(<span class="string">'custom'</span>);</span><br><span class="line">    schema.setError(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; error.setTransform(<span class="string">'custom'</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    schema.addWorkflow(<span class="string">'register'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $.model.$clean();</span><br><span class="line">        <span class="keyword">var</span> username = data.username.toString().toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> nosql = NOSQL(<span class="string">'user_data'</span>);</span><br><span class="line"></span><br><span class="line">        nosql.find().make(<span class="function"><span class="keyword">function</span>(<span class="params">builder</span>) </span>&#123;</span><br><span class="line">            builder.where(<span class="string">'username'</span>, username);</span><br><span class="line">            builder.callback(<span class="function"><span class="keyword">function</span>(<span class="params">err, response, count</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err) helper.builderErrorResponse($,err);</span><br><span class="line">                <span class="keyword">if</span> (count) &#123;</span><br><span class="line">                    helper.failResponse($,<span class="string">'Sorry, Username is already exists!'</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    helper.cryptPassword(data.password,<span class="function"><span class="keyword">function</span>(<span class="params">err,hash</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(err) helper.customResponse($,<span class="number">409</span>,<span class="string">'error'</span>,<span class="string">'Failed to encrypt password!'</span>,err,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> inputdata = &#123;</span><br><span class="line">                            id:uuidv4(),</span><br><span class="line">                            username:username,</span><br><span class="line">                            hash:hash,</span><br><span class="line">                            email:data.email,</span><br><span class="line">                            date_created:<span class="built_in">Date</span>.now()</span><br><span class="line">                        &#125;;</span><br><span class="line">                        </span><br><span class="line">                        nosql.insert(inputdata).callback(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                                helper.builderErrorResponse($,err);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                helper.successResponse($,<span class="string">'Register is successfully!'</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    schema.addWorkflow(<span class="string">'login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $.model.$clean();</span><br><span class="line">        <span class="keyword">var</span> nosql = NOSQL(<span class="string">'user_data'</span>);</span><br><span class="line">        nosql.find().make(<span class="function"><span class="keyword">function</span>(<span class="params">builder</span>) </span>&#123;</span><br><span class="line">            builder.where(<span class="string">'username'</span>, data.username.toString().toLowerCase());</span><br><span class="line">            builder.callback(<span class="function"><span class="keyword">function</span>(<span class="params">err,response,count</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err) helper.builderErrorResponse($,err);</span><br><span class="line">                <span class="keyword">if</span>(count) &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = response[<span class="number">0</span>];</span><br><span class="line">                    helper.comparePassword(data.password,user.hash, <span class="function"><span class="keyword">function</span>(<span class="params">err,isPasswordMatch</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(err) helper.customResponse($,<span class="number">409</span>,<span class="string">'error'</span>,<span class="string">'Failed to compare password!'</span>,err,<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">if</span>(isPasswordMatch) &#123;</span><br><span class="line">                            helper.successResponse($,<span class="string">'Login successful'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            helper.failResponse($,<span class="string">'Wrong username or password!'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    helper.failResponse($,<span class="string">'Wrong username or password!'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>I just create example models only for an account to <code>register</code> and <code>login</code>. You have to create how to <code>logout</code> by yourself, because in this skeleton, there is no session.</p><h3 id="controllers-api-js"><a href="#controllers-api-js" class="headerlink" title="controllers/api.js"></a>controllers/api.js</h3><p>Now I will create the controller for route to the account.js models.</p><ul><li>create <code>api.js</code> then just copy and paste this code below:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exports.install = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sets cors for the entire API</span></span><br><span class="line">CORS();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Account</span></span><br><span class="line">  ROUTE(<span class="string">'/api/account/register'</span>, [<span class="string">'post'</span>,<span class="string">'*Account --&gt; @register'</span>,<span class="string">'#auth_api'</span>]);</span><br><span class="line">  ROUTE(<span class="string">'/api/account/login'</span>, [<span class="string">'post'</span>,<span class="string">'*Account --&gt; @login'</span>,<span class="string">'#auth_api'</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>That is very clean right. There is no need extra line code for logic. It was already handled by <code>Schemas</code> in <code>models/</code> directory.</p><h3 id="controller-default-js"><a href="#controller-default-js" class="headerlink" title="controller/default.js"></a>controller/default.js</h3><p><code>default.js</code> in controller is just create plain view to tell your visitor about your api website.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.install = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  ROUTE(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.plain(<span class="string">'REST Service &#123;0&#125;\nVersion: &#123;1&#125;'</span>.format(CONF.name, CONF.version))&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="postman-json"><a href="#postman-json" class="headerlink" title="postman.json"></a>postman.json</h3><p><code>postman.json</code> is the file for using with postman app to test the request api. You have to import this file into your postman app. Then you are able to make a test your rest api.</p><ul><li>You just copy paste this postman.json<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"info"</span>: &#123;</span><br><span class="line"><span class="string">"_postman_id"</span>: <span class="string">"f0efd831-06c7-4d07-ad6e-aaad9d0b682a"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"totaljs-rest-skeleton"</span>,</span><br><span class="line"><span class="string">"schema"</span>: <span class="string">"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"item"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Register"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line"><span class="string">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"application/json"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"x_token"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"12345678"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="string">"mode"</span>: <span class="string">"raw"</span>,</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"&#123;\n\t\"username\":\"admin\",\n\t\"password\":\"12345678\",\n\t\"email\":\"admin@yourdomain.com\"\n&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/account/register"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"account"</span>,</span><br><span class="line"><span class="string">"register"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"http://127.0.0.1:8000/api/account/login"</span>,</span><br><span class="line"><span class="string">"request"</span>: &#123;</span><br><span class="line"><span class="string">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line"><span class="string">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"application/json"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"key"</span>: <span class="string">"x_token"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"12345678"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="string">"mode"</span>: <span class="string">"raw"</span>,</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"&#123;\n\t\"username\":\"admin\",\n\t\"password\":\"12345678\"\n&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"url"</span>: &#123;</span><br><span class="line"><span class="string">"raw"</span>: <span class="string">"http://127.0.0.1:8000/api/account/login"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"http"</span>,</span><br><span class="line"><span class="string">"host"</span>: [</span><br><span class="line"><span class="string">"127"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"0"</span>,</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"port"</span>: <span class="string">"8000"</span>,</span><br><span class="line"><span class="string">"path"</span>: [</span><br><span class="line"><span class="string">"api"</span>,</span><br><span class="line"><span class="string">"account"</span>,</span><br><span class="line"><span class="string">"login"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"response"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>Please see the <code>readme.md</code> file, there is step by step how to use or test this rest api skeleton.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TotalJS has many example, but all of the examples is the simple way. Simple way is doesn’t same meaning as best practice. So how do I know about the best practice way? Just read correctly all the documentation from TotalJS and make research by yourself.</p><p>This rest api skeleton have uploaded into my github repository, You can just download this skeleton for your project at <a href="https://github.com/aalfiann/totaljs-rest-skeleton" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>If you have a question about this skeleton, feel free to ask me by leaving a comment below, or just create an issue in my github repository.</p><p>Thank You for your time to reading my article.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pros and Cons of TotalJS Framework</title>
      <link href="/post/pros-and-cons-of-totaljs-framework/"/>
      <url>/post/pros-and-cons-of-totaljs-framework/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe81bb3329a37193df0264e1f6a726b49e2.jpg" alt=""></p><p>Hello guys, There is a lot of NodeJS Framework out there, but in this article, I will talk about TotalJS Framework. I will describe all the pros and cons about TotalJS Framework. Since I write this article, actually I was working with many projects with using TotalJS as framework. It was around 6 months I was learning about TotalJS Framework. So from my experience, hope I can better to explain what is the pros and cons of using TotalJS Framework.</p><a id="more"></a><p>There are so many website write about pros and cons of TotalJS Framework, but most of them is too general, they explanation is not too spesific also they miss many features in TotalJS. So that is the reason why I write this similar article and I want to make people try to use TotalJS framework for their project in the future.</p><h2 id="About-TotalJS-Framework"><a href="#About-TotalJS-Framework" class="headerlink" title="About TotalJS Framework"></a>About TotalJS Framework</h2><p>TotalJS framework was created by <code>Peter Sirka</code>. Actually <code>Peter Sirka</code> is not working alone, of course they have a team developer, so don’t worry, TotalJS is not maintained by single person. TotalJS is already mature as framework, because the first version of TotalJS framework was released at 2013. It was more than 5 years of development.</p><p>The main idea of TotalJS framework is created with pure javascript, stable, and everything feature released without any dependencies.</p><h2 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h2><p>First of all, I will start to explain from the <code>pros</code>. So here is the list pros of using TotalJS framework.</p><h3 id="Pure-Javascript"><a href="#Pure-Javascript" class="headerlink" title="Pure Javascript"></a>Pure Javascript</h3><p>TotalJS framework was written in <code>Pure JavaScript</code>, so this is easy for new developer who use this framework as there is no step learning curve. Developer who already understand JavaScript, can just use this framework for they projects.</p><h3 id="No-Dependencies"><a href="#No-Dependencies" class="headerlink" title="No Dependencies"></a>No Dependencies</h3><p>Everything features in TotalJS framework is <code>no dependencies</code>. So you are easy to learn all the features with just read from their wiki or documentation.</p><h3 id="High-Performance"><a href="#High-Performance" class="headerlink" title="High Performance"></a>High Performance</h3><p>TotalJS has better performance compared with another NodeJS framework. There is someone from internet who have created the benchmark for TotalJS, and the TotalJS benchmark is around <code>32K req/second</code>. For the detail about benchmarks, you can see at <a href="https://github.com/fastify/benchmarks" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><h3 id="Scalable"><a href="#Scalable" class="headerlink" title="Scalable"></a>Scalable</h3><p>TotalJS is very easy for scaling, because of it architecture. You can learn more detail about Modules, Packages, Workers and Clusters. This features help you very easy scale of your projects.</p><h3 id="Great-Controller"><a href="#Great-Controller" class="headerlink" title="Great Controller"></a>Great Controller</h3><p>Controller TotalJS is very powerfull as it knows 3x types of routes which is classic, websocket and file route. Also controller is executed in one time, so this is really so fast and low in memory consumption. You are able to create controller as many as unlimited.</p><h3 id="Dynamic-Routing"><a href="#Dynamic-Routing" class="headerlink" title="Dynamic Routing"></a>Dynamic Routing</h3><p>TotalJS has great dynamic routing. It is support classic and dynamic routes as regex. You are able to write routes for content, files and websocket. Routes also support HTTP Method, Flags, Cors and middleware.</p><h3 id="Built-in-Mail"><a href="#Built-in-Mail" class="headerlink" title="Built-in Mail"></a>Built-in Mail</h3><p>TotalJS has built-in mail feature. This mail class will make you easier to create or sending mail message.</p><h3 id="Built-in-Cache"><a href="#Built-in-Cache" class="headerlink" title="Built-in Cache"></a>Built-in Cache</h3><p>TotalJS has built-in cache feature. This cache is working in memory mechanism, so this will make your project run very fast.</p><h3 id="Modular-Architecture"><a href="#Modular-Architecture" class="headerlink" title="Modular Architecture"></a>Modular Architecture</h3><p>TotalJS has modular architecture, there is Modules and Packages feature which is will bundle your custom feature as simple as plugin like in the most CMS out there.</p><h3 id="Powerfull-View-Engine"><a href="#Powerfull-View-Engine" class="headerlink" title="Powerfull View Engine"></a>Powerfull View Engine</h3><p>TotalJS has built-in view engine which is will help you easier to make themes for you frontend. View engine will separate your server side and client side code. Also your frontend code will be more clean and easy to scale.</p><h3 id="Auto-Compression"><a href="#Auto-Compression" class="headerlink" title="Auto Compression"></a>Auto Compression</h3><p>TotalJS has GZIP, Image, HTML, JS and CSS compression. This is already running in auto compression mechanism as default. So your project will be running so fast in performance.</p><h3 id="Image-Manipulation"><a href="#Image-Manipulation" class="headerlink" title="Image Manipulation"></a>Image Manipulation</h3><p>TotalJS has Image manipulation feature. So you are very easy for example to create watermark, resize, and compress the image. But to use this feature you are required to install <code>ImageMagick</code> or <code>GraphicsMagick</code>.</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>If TotalJS is installed through NPM as globally, You are able to use TotalJS CLI. This CLI will help you to create localization, run local web server, minify javascript, html and css file, and many more.</p><h3 id="Websocket-Client"><a href="#Websocket-Client" class="headerlink" title="Websocket Client"></a>Websocket Client</h3><p>TotalJS has websocket client feature which is help you to making connection into websocket as a client. So you are possible to create chat or realtime application with TotalJS. This websocket are use RFC 6455 standard.</p><h3 id="NoSQL-Embedded"><a href="#NoSQL-Embedded" class="headerlink" title="NoSQL Embedded"></a>NoSQL Embedded</h3><p>NoSQL Embedded is built-in database which is your data will be saved as json file. This NoSQL Embedded has database builder which is support you to make crud, query and join. Even this NoSQL Embedded is design for small database, but this mechanism is using stream, so this will be strong enough if your data is getting bigger for around 100K row data.</p><h3 id="Schemas"><a href="#Schemas" class="headerlink" title="Schemas"></a>Schemas</h3><p>TotalJS has schema feature which is help you to create interface validation for your data in every routes. Using schema also will make your code more clean, readable and ligtweight.</p><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>TotalJS framework is run as singleton, once it load, all features is available as lazyload, so your project will still fast and low in memory consumption. Also you can use TotalJS as library with another NodeJS framework.</p><h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>TotalJS has built-in localization feature which is help you to create an application with multiple language. You also able to generate your localization directly with CLI feature.</p><h3 id="Support-Workers-Clusters"><a href="#Support-Workers-Clusters" class="headerlink" title="Support Workers + Clusters"></a>Support Workers + Clusters</h3><p>TotalJS has workers and clusters feature which is help you to scale your application for heavy computation. You can run multiple thread of NodeJS by using clusters feature.</p><h3 id="Debugging-Unit-Test"><a href="#Debugging-Unit-Test" class="headerlink" title="Debugging + Unit Test"></a>Debugging + Unit Test</h3><p>TotalJS has Debugging and built-in Unit Test feature. This will help you to maintain your source code when you are working in big team developer.</p><h3 id="Big-Ecosystem"><a href="#Big-Ecosystem" class="headerlink" title="Big Ecosystem"></a>Big Ecosystem</h3><p>TotalJs has big ecosystem which is help you to improve your productivity. You don’t have to create all the things from zero. Just save your time and don’t reinvent the wheels unless you have another plan.</p><h3 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h3><p>TotalJS has Community area, just register yourself and you are able to chat with other members. This community is so reactive also you are able to chat directly with the author of TotalJS framework <code>Peter Sirka</code>.</p><h3 id="Enterprise-Support"><a href="#Enterprise-Support" class="headerlink" title="Enterprise Support"></a>Enterprise Support</h3><p>If you are work in serious project, high development or in growth company. You have to buy TotalJS for Enterprise. So you have Service Level Agreement for your company.</p><h3 id="Has-Wiki-and-Documentation"><a href="#Has-Wiki-and-Documentation" class="headerlink" title="Has Wiki and Documentation"></a>Has Wiki and Documentation</h3><p>TotalJS has Wiki and Documentation, this will help you easier to learn all features in TotalJS framework.</p><h2 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h2><p>That is not fair if we don’t explain about the <code>cons</code>. So here is the list cons of using TotalJS framework.</p><h3 id="No-support-Typescript"><a href="#No-support-Typescript" class="headerlink" title="No support Typescript"></a>No support Typescript</h3><p>Until I write this article, TotalJS still not having a plan to support TypeScript. So it is hard to combine TotalJS with another Typescript framework.</p><h3 id="Documentation-not-complete"><a href="#Documentation-not-complete" class="headerlink" title="Documentation not complete"></a>Documentation not complete</h3><p>Documentation and wiki is available but not all features has been written completely. Also for the english version mostly written with broken english, so for someone who are not english native speaker, it will be more hard to understand, because we can not just copy paste the text into Google Translate because the text is not using grammar correctly.</p><h3 id="Many-examples-with-no-explanation"><a href="#Many-examples-with-no-explanation" class="headerlink" title="Many examples with no explanation"></a>Many examples with no explanation</h3><p>TotalJS has many examples at <a href="https://github.com/totaljs/example" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>, but all of them is written with no any explanation. Remember that source code only it won’t help us to understand what is going on the framework itself.</p><h3 id="Hard-to-contribute"><a href="#Hard-to-contribute" class="headerlink" title="Hard to contribute"></a>Hard to contribute</h3><p>If you take a look the source code of TotalJS, there are few big files written more than 15K of code line and unfortunately, they wrote the source code with very little comments of explanation in their source code. So for everyone who wants to contribute for the framework seems imposible.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TotalJS is a fast and rapid development to build a Rest, IoT and Fullstack project. Most of my project which is in short deadline, I prefer to choose this TotalJS framework. Because it was written in pure JavaScript and I able to learn all features only for 2-3 weeks. Sure, this is really simple and easy framework to learning even for newbie who haven’t tried NodeJS before.</p><p>TotalJS can be use as library, so you are possible to use some of TotalJS features in other framework.</p><p>Thank You for your time to reading my article, hope I didn’t miss a thing and please correct me if I’m wrong about this framework.</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> learning </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Professional Library in NPM Package</title>
      <link href="/post/create-professional-library-in-npm-package/"/>
      <url>/post/create-professional-library-in-npm-package/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8438e7cf8b6acb328f5cbc25c2866f04c.jpg" alt=""></p><p>Hello guys, Today I will write a tutorial how to create a professional library and make your library published in NPM Package. I know there is a lot similar tutorial like this, but I will make this tutorial more systematic and more explanation to help you understand more easier.</p><a id="more"></a><h2 id="Study-Case"><a href="#Study-Case" class="headerlink" title="Study Case"></a>Study Case</h2><p>In this tutorial, Assume that you are will be create a library name <code>text-obfuscator</code>. <code>text-obfuscator</code> is just a simple library to obfuscate the text.</p><h2 id="Pre-Software-Requirement"><a href="#Pre-Software-Requirement" class="headerlink" title="Pre Software Requirement"></a>Pre Software Requirement</h2><ol><li>Visual Studio Code</li><li>Git</li></ol><h3 id="Install-Visual-Studio-Code"><a href="#Install-Visual-Studio-Code" class="headerlink" title="Install Visual Studio Code"></a>Install Visual Studio Code</h3><p>We will going to use Visual Studio Code, but actualy you are able to use any IDE to code. I use Visual Studio Code because this is the top popular editor in the world. Visual Studio Code is Free, you can download it from <a href="https://code.visualstudio.com/Download" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a> and follow the step to install it.</p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><p>Git is the version control software to help you manage your repository of your project in Github. Git is an open source project so you are free to download it from <a href="https://git-scm.com/downloads" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a> and follow the step from it website to install it.</p><h2 id="Pre-Account-Requirement"><a href="#Pre-Account-Requirement" class="headerlink" title="Pre Account Requirement"></a>Pre Account Requirement</h2><p>Before we start to create a library. You have to register on 4 resources, it is:</p><ol><li><a href="https://github.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Github</a></li><li><a href="https://travis-ci.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis</a></li><li><a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a></li><li><a href="https://npmjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NPMJS</a></li></ol><h3 id="Create-an-account-to-Github"><a href="#Create-an-account-to-Github" class="headerlink" title="Create an account to Github"></a>Create an account to Github</h3><p>Visit to <a href="https://github.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Github</a> and register your account in there. After you are finished to register, then you have to create your first repository. For example if your username is <code>aalfiann</code>, then if your repository name is <code>text-obfuscator</code> so your full link to your repository is <code>https://github.com/aalfiann/text-obfuscator</code>.</p><h3 id="Clone-your-Repository"><a href="#Clone-your-Repository" class="headerlink" title="Clone your Repository"></a>Clone your Repository</h3><p>To clone your repository, you just go visit to <code>https://github.com/aalfiann/text-obfuscator</code> then on the top-right there is green button name <code>Clone or Download</code>, just click on it then copy the url from textbox, so your git link is <code>https://github.com/aalfiann/text-obfuscator.git</code>.</p><p>After you have the git link, now open your Visual Studio Code, then press <code>CTRL+SHIFT+P</code>, paste the git link, wait for a second then you will get popup message to Open this Repository, just click it. Now you will open the project which is has been already connected with your repository on Github.</p><p>Now just minimize your Visual Studio Code and go for the next step below.</p><h3 id="Create-an-account-to-Travis"><a href="#Create-an-account-to-Travis" class="headerlink" title="Create an account to Travis"></a>Create an account to Travis</h3><p>Visit to <a href="https://travis-ci.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis</a> then make a registration first in there. After register is done, now go to <a href="https://travis-ci.com/account/repositories" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Settings</a>. Then on top-left you will see the green button name <code>Sync Account</code>, just click it. Wait for a second, after sync progress is done, now you will see your repository name is appearing on the right box. Okay, that is enough for now, we will continue this later to trigger the build test after the source code is uploaded on github.</p><h3 id="Create-an-account-to-Coveralls"><a href="#Create-an-account-to-Coveralls" class="headerlink" title="Create an account to Coveralls"></a>Create an account to Coveralls</h3><p>Visit to <a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a> then make a registration first in there. After register is done, now go to <a href="https://coveralls.io/repos/new" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Add New Repo</a>. Then on top-right you will see button name <code>Sync Repo</code>, just click on it. Wait for a second, then your repository name will be appear in there. You will see gray button <code>OFF</code>, then click it to make coveralls listen to your repository in realtime to detect whats changes from your repository in Github.</p><h3 id="Create-an-account-to-NPMJS"><a href="#Create-an-account-to-NPMJS" class="headerlink" title="Create an account to NPMJS"></a>Create an account to NPMJS</h3><p>Visit to <a href="https://npmjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NPMJS</a> to create your account. You have to register to NPM website because this is required to publish your package library in NPM. After you are successfully register, just leave it, you can logout because later we will login to NPM through command from Terminal.</p><h2 id="Making-a-library"><a href="#Making-a-library" class="headerlink" title="Making a library"></a>Making a library</h2><p>After you follow all the steps above, now we go back to open your minimized Visual Studio Code. You will see that your project is still empty. So follow the next step below to making your first library.</p><h3 id="NPM-Init"><a href="#NPM-Init" class="headerlink" title="NPM Init"></a>NPM Init</h3><p>The first thing to do is you have to open the terminal from Visual Studio Code, then run command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>Then follow all the steps, for the test part just enter it, so you have no script test as for now. We will configure it later in the next step.</p><h3 id="Configure-Unit-Test"><a href="#Configure-Unit-Test" class="headerlink" title="Configure Unit Test"></a>Configure Unit Test</h3><p>I have write the full article about create unit test at <a href="https://hexoder.com/post/setup-unit-test-with-mocha-nyc-travis-coveralls/">here</a>. Just follow all steps from it. Once it done, you can go for next step below.</p><h3 id="Create-structure-library"><a href="#Create-structure-library" class="headerlink" title="Create structure library"></a>Create structure library</h3><p>Structure can be anything, but for a standard which is many people use is like this:</p><ul><li>src/</li><li>test/</li><li>.gitignore</li><li>.travis.yml</li><li>LICENSE</li><li>package-lock.json</li><li>package.json</li><li>README.md</li></ul><p>Note:</p><ul><li><code>src/</code> directory is your source code library.</li><li><code>test/</code> directory is your unit test file.</li></ul><h3 id="Create-the-source-code"><a href="#Create-the-source-code" class="headerlink" title="Create the source code"></a>Create the source code</h3><p>Now create new file name <code>text-obfuscator.js</code> inside <code>src/</code> directory.<br>Just paste this code and saved it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * TextObfuscator v1.0.2 ES6 [NodeJS or Browser]</span></span><br><span class="line"><span class="comment"> * https://github.com/aalfiann/text-obfuscator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2019 M ABD AZIZ ALFIAN</span></span><br><span class="line"><span class="comment"> * Released under the MIT license</span></span><br><span class="line"><span class="comment"> * https://github.com/aalfiann/text-obfuscator/blob/master/LICENSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> TextObfuscator = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine value is string</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value</span></span><br><span class="line"><span class="comment">     * @return &#123;bool&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _isString: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'string'</span> || value <span class="keyword">instanceof</span> <span class="built_in">String</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make chunk array (start from first char)</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value </span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of chunked text value</span></span><br><span class="line"><span class="comment">     * @return &#123;array&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _make: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, o = <span class="number">0</span>, numChunks = <span class="built_in">Math</span>.ceil(value.length / size), chunks = <span class="keyword">new</span> <span class="built_in">Array</span>(numChunks);</span><br><span class="line">        <span class="keyword">for</span>(i, o; i &lt; numChunks; ++i, o += size) &#123;</span><br><span class="line">            chunks[i] = value.substr(o, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chunks;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make chunk array reverse (start from last char)</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value </span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of chunked text value</span></span><br><span class="line"><span class="comment">     * @return &#123;array&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _remake: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, len = value.length, data = <span class="keyword">this</span>._make(value,size), datalen = data.length, chunks = <span class="keyword">new</span> <span class="built_in">Array</span>(datalen), last = data[datalen<span class="number">-1</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (;i&lt;datalen;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(len&gt;=size) &#123;</span><br><span class="line">                chunks[i] = value.substr((len-size),size);</span><br><span class="line">                len -= size;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chunks[i] = value.substr(<span class="number">0</span>,last);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chunks;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encode or Obfuscate the text </span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value to be encoded</span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of text to obfuscate</span></span><br><span class="line"><span class="comment">     * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    encode: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._isString(value)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Value must be string'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>._make(value,size), len = data.length;</span><br><span class="line">        <span class="keyword">while</span>(len) &#123;</span><br><span class="line">            --len;</span><br><span class="line">            result += data[len];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode or deobfuscate the text</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the encoded text</span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of text to deobfuscate</span></span><br><span class="line"><span class="comment">     * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    decode: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._isString(value)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Value must be string'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>._remake(value,size), i = <span class="number">0</span>, len = data.length;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;len;i++) &#123;</span><br><span class="line">            result += data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = TextObfuscator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you have already the source code of your library.</p><h3 id="Create-unit-test-file"><a href="#Create-unit-test-file" class="headerlink" title="Create unit test file"></a>Create unit test file</h3><p>Now create a file name <code>obfuscator.js</code> in <code>test/</code> directory.<br>Just paste with this code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> TextObfuscator = <span class="built_in">require</span>(<span class="string">'../src/text-obfuscator'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'obfuscator test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'value must be string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.encode([]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'isString helper'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="string">'abc'</span>),<span class="literal">true</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="number">1</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString([]),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(&#123;&#125;),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">true</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">false</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">null</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">undefined</span>),<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'make chunk array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._make(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">3</span>),</span><br><span class="line">        [ <span class="string">'abc'</span>, <span class="string">'def'</span>, <span class="string">'ghi'</span>, <span class="string">'jkl'</span>, <span class="string">'mno'</span>, <span class="string">'pqr'</span>, <span class="string">'stu'</span>, <span class="string">'vwx'</span>, <span class="string">'yz'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'remake reversed chunk array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._remake(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">3</span>),</span><br><span class="line">        [ <span class="string">'xyz'</span>, <span class="string">'uvw'</span>, <span class="string">'rst'</span>, <span class="string">'opq'</span>, <span class="string">'lmn'</span>, <span class="string">'ijk'</span>, <span class="string">'fgh'</span>, <span class="string">'cde'</span>, <span class="string">'ab'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'make chunk array like simple reverse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._make(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>),</span><br><span class="line">        [ <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>, <span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>, <span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>, <span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>, <span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>, <span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>, <span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>, <span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>, <span class="string">'y'</span>,<span class="string">'z'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'remake reversed chunk array like simple reverse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._remake(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>),</span><br><span class="line">        [ <span class="string">'z'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>, <span class="string">'w'</span>,<span class="string">'v'</span>,<span class="string">'u'</span>, <span class="string">'t'</span>,<span class="string">'s'</span>,<span class="string">'r'</span>, <span class="string">'q'</span>,<span class="string">'p'</span>,<span class="string">'o'</span>, <span class="string">'n'</span>,<span class="string">'m'</span>,<span class="string">'l'</span>, <span class="string">'k'</span>,<span class="string">'j'</span>,<span class="string">'i'</span>, <span class="string">'h'</span>,<span class="string">'g'</span>,<span class="string">'f'</span>, <span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>,<span class="string">'a'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'obfuscate the text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator.encode(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">2</span>),<span class="string">'yzwxuvstqropmnklijghefcdab'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'deobfuscate text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator.decode(<span class="string">'yzwxuvstqropmnklijghefcdab'</span>,<span class="number">2</span>),<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'obfuscate only works with string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.encode([<span class="string">'12345'</span>]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'deobfuscate only works with string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.decode([<span class="string">'54321'</span>]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now assume that you already have the unit test file.</p><h3 id="Make-run-your-unit-test"><a href="#Make-run-your-unit-test" class="headerlink" title="Make run your unit test"></a>Make run your unit test</h3><p>To run your unit test, just run this command into terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Now you will get the result like this.<br><img src="https://i.imgur.com/Pb5S1Lu.jpg" alt=""></p><p>You will see that there uncovered line with yellow color, it means that you have test it line but it was still for one condition, there is still another conditions which is are not tested yet. Unfortunately it can not be tested because it must be tested on browser. Ah I forgot to tell you that the <code>text-obfuscator</code> is could be run in NodeJS or Browser. Because on the last line there is condition for <code>window</code> which is it must be tested on browser, so that is why unit test is missed for one line.</p><h3 id="Create-README-md"><a href="#Create-README-md" class="headerlink" title="Create README.md"></a>Create README.md</h3><p>README is the file that you should give the information detail about the project. For this example you can just paste with this below:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># text-obfuscator</span></span><br><span class="line">[<span class="string">![NPM</span>](<span class="link">https://nodei.co/npm/text-obfuscator.png?downloads=true&amp;downloadRank=true&amp;stars=true</span>)](<span class="link">https://nodei.co/npm/text-obfuscator/</span>)  </span><br><span class="line">  </span><br><span class="line">[<span class="string">![npm version</span>](<span class="link">https://img.shields.io/npm/v/text-obfuscator.svg?style=flat-square</span>)](<span class="link">https://www.npmjs.org/package/text-obfuscator</span>)</span><br><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/aalfiann/text-obfuscator.svg?branch=master</span>)](<span class="link">https://travis-ci.org/aalfiann/text-obfuscator</span>)</span><br><span class="line">[<span class="string">![Coverage Status</span>](<span class="link">https://coveralls.io/repos/github/aalfiann/text-obfuscator/badge.svg?branch=master</span>)](<span class="link">https://coveralls.io/github/aalfiann/text-obfuscator?branch=master</span>)</span><br><span class="line">[<span class="string">![Known Vulnerabilities</span>](<span class="link">https://snyk.io//test/github/aalfiann/text-obfuscator/badge.svg?targetFile=package.json</span>)](<span class="link">https://snyk.io//test/github/aalfiann/text-obfuscator?targetFile=package.json</span>)</span><br><span class="line">[<span class="string">![dependencies Status</span>](<span class="link">https://david-dm.org/aalfiann/text-obfuscator/status.svg</span>)](<span class="link">https://david-dm.org/aalfiann/text-obfuscator</span>)</span><br><span class="line">![<span class="string">License</span>](<span class="link">https://img.shields.io/npm/l/text-obfuscator</span>)</span><br><span class="line">![<span class="string">NPM download/month</span>](<span class="link">https://img.shields.io/npm/dm/text-obfuscator.svg</span>)</span><br><span class="line">![<span class="string">NPM download total</span>](<span class="link">https://img.shields.io/npm/dt/text-obfuscator.svg</span>)  </span><br><span class="line">Simple Text Obfuscator for NodeJS or Browser.</span><br><span class="line"></span><br><span class="line">Because sometimes we want to obfuscate a text in client browser for <span class="code">`key`</span>, <span class="code">`id`</span>, <span class="code">`base64`</span>, etc.</span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>You can see that you could put the badge into README.md file.</li></ul><h3 id="Push-into-github"><a href="#Push-into-github" class="headerlink" title="Push into github"></a>Push into github</h3><p>After everything is done, now you can go push your source code into Github by this command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="Trigger-Build-in-Travis"><a href="#Trigger-Build-in-Travis" class="headerlink" title="Trigger Build in Travis"></a>Trigger Build in Travis</h3><p>After your source code is successfully uploaded into github, now go visit to <a href="https://travis-ci.com/account/repositories" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis-Settings</a>. Then click on your repository name, then on the top-right there is button name <code>More options</code> just click on it. Then the dropdown will apearing and there is <code>Trigger build</code> menu, so just click on it.</p><p>Now the build test will be running for a minute, just wait for it. Once it done, you can go for the next step below.</p><h3 id="Publish-into-NPM-Package"><a href="#Publish-into-NPM-Package" class="headerlink" title="Publish into NPM Package"></a>Publish into NPM Package</h3><p>When build is passed, you can just publish it into NPM Package by this command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm login</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><p>Yeah that is done, now your package you can view it on <code>https://www.npmjs.com/package/text-obfuscator</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sorry there is no much image for the step, because trust me the register for an account is very simple even for a newbie.</p><p>Also the study case is a real library which was created for professional use. Actually I was use this <code>text-obfuscator</code> library for many important projects.</p><p>For more detail you can check the source code is available on <a href="https://github.com/aalfiann/text-obfuscator" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://github.com/aalfiann/text-obfuscator</a>.</p><p>Hope you are able to create your own library and publish it on your NPM Package. Feel free to ask if you are have problem or miss understanding about this tutorial.</p><p>Thank You.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction About JsonQL in NodeJS</title>
      <link href="/post/introduction-about-jsonql-in-nodejs/"/>
      <url>/post/introduction-about-jsonql-in-nodejs/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8b994f638064494817201834c4146112e.jpg" alt=""></p><p>Hello guys, Today I would like to make some little research about JsonQL. So if you are first time hearing about JsonQL, the definitions about JsonQL is maybe “Json Query Language”. Why I said maybe? because before I write this post, I have research through google and found nothing about this kind technology. Actualy, I just found about jasperreports which is a Free Java Reporting Library. But we will not talk about making report guys. Jasperreports is not what I want to learn about JsonQL. In this article, we will talk about what is JsonQL? How to use and what is the benefit for us?</p><a id="more"></a><h2 id="NoSQL-Embedded"><a href="#NoSQL-Embedded" class="headerlink" title="NoSQL Embedded"></a>NoSQL Embedded</h2><p>It was 6 months already I made some projects will the power of Total.js Framework. And surely, I love this Total.js Framework because so simple and truly a rapid development framework and one of reasons why I choose TotalJS is because they have built in <code>NoSQL Embedded</code>. NoSQL Embedded is a database management which your data is saved as json as filebased (json file).</p><p>NoSQL Embedded is very good for small database or creating small prototype application. But actualy I was use NoSQL Embedded for 1 million rows and trustme, it still so fast. But when you are in big database, you will have high risk to get Javascript Heap Out of Memory. To avoid this, you should read carefully about my previous article at <a href="https://hexoder.com/post/how-to-avoid-javascript-heap-out-of-memory/">here</a>.</p><p>NoSQL Embedded TotalJS has many features which is almost like the other of nosql databases. It query is very strong, accurate and easy to configure in multiple conditions.</p><p>Example simple query:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set database users</span></span><br><span class="line"><span class="keyword">var</span> user = NOSQL(<span class="string">'users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// query find users</span></span><br><span class="line">user.find().make(<span class="function"><span class="keyword">function</span>(<span class="params">builder</span>) </span>&#123;</span><br><span class="line">  builder.where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="number">20</span>);</span><br><span class="line">  builder.where(<span class="string">'confirmed'</span>, <span class="literal">true</span>);</span><br><span class="line">  builder.callback(<span class="function"><span class="keyword">function</span>(<span class="params">err, response, count</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>For more detail you can see in their <a href="https://docs.totaljs.com/latest/en.html#api~Database" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">documentation</a>.</p><h2 id="JsonQL"><a href="#JsonQL" class="headerlink" title="JsonQL"></a>JsonQL</h2><p>JsonQL is the Json Query Language. which means that you are able to query with the power of json structure.</p><p>JsonQL idea was comes up from my mind, After I using NoSQL Embedded more and more often in growing application. My code is getting big and the readability is going harder slowly. So I was thinking that, how to make query is eficient, simple and clean like in mostly RDBMS? So I created <a href="https://www.npmjs.com/package/jsonql-totaljs" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsonql-totaljs</a> library which is to help you make easier to query with NoSQL Embedded.</p><h3 id="Query-Like-SQL"><a href="#Query-Like-SQL" class="headerlink" title="Query Like SQL"></a>Query Like SQL</h3><p>If you are familiar with SQL Query, don’t worry, my <code>jsonql-totaljs</code> library is using same SQL format in JsonQL way.</p><p>JsonQL Example:</p><ul><li><p>Select</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select:&#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'age'</span>,<span class="string">'&gt;'</span>,<span class="number">10</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Insert</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    insert: &#123;</span><br><span class="line">      into:<span class="string">'dt_user'</span>,</span><br><span class="line">      values:[</span><br><span class="line">        &#123;</span><br><span class="line">          id:<span class="string">'10'</span>,</span><br><span class="line">          name:<span class="string">'aziz'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Update</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    update: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="keyword">set</span>:&#123;</span><br><span class="line">        id:<span class="string">'10'</span>,</span><br><span class="line">        name:<span class="string">'aziz alfian'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Modify</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    modify: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="keyword">set</span>:&#123;</span><br><span class="line">        name:<span class="string">'M ABD AZIZ ALFIAN'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Delete</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">delete</span>: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p>After you see the example above, it is similar with SQL Query, more easier and very readable right?</p><h3 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title="Parallel Execution"></a>Parallel Execution</h3><p>Please look at the example above, you will see that the JsonQL is under an element of array. It is because the library of <code>jsonql-totaljs</code> has features parallel or multiple request query by single execution.</p><p>Example Multiple Query</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'wawan'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'address'</span>,<span class="string">'=='</span>,<span class="string">'jakarta'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>The process behind of this parallel execution is on top <code>Promise.all</code> and the output is in array format.</p><h3 id="Multiple-Join-or-As-Nested"><a href="#Multiple-Join-or-As-Nested" class="headerlink" title="Multiple Join or As Nested"></a>Multiple Join or As Nested</h3><p>Join is the most common required things in building query. The fact is to create join with using NoSQL embedded way is little bit dificult and confusing. But when you are in JsonQL way, everything will going simple.</p><ul><li><p>Join<br>This is the very simple join.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Join Nested<br>Sometime we want to create join in nested way.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span>,</span><br><span class="line">          join:[</span><br><span class="line">            &#123;</span><br><span class="line">              name:<span class="string">'additional'</span>,</span><br><span class="line">              <span class="keyword">from</span>:<span class="string">'user_other'</span>,</span><br><span class="line">              on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">              first:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Join Nested Manually<br>Here is to create join nested manually, so we can set the sequence of the data to be nested.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'additional'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'user_other'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      nested:[<span class="string">'dt_profile'</span>,<span class="string">'additional'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><h3 id="Multiple-Query-Format"><a href="#Multiple-Query-Format" class="headerlink" title="Multiple Query Format"></a>Multiple Query Format</h3><p>For easier to implement the JsonQL into your development code. <code>jsonql-totaljs</code> has multiple query format.<br>Which is you can use <code>array-object string</code>, <code>json string</code>, or <code>array-object</code> to build queries.</p><p>Example:</p><ul><li><p>array-object string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="string">"[&#123;select:&#123;from:'dt_user'&#125;&#125;]"</span>;</span><br></pre></td></tr></table></figure></li><li><p>json string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="string">"[&#123;"</span>select<span class="string">":&#123;"</span><span class="keyword">from</span><span class="string">":"</span>dt_user<span class="string">"&#125;&#125;]"</span>;</span><br></pre></td></tr></table></figure></li><li><p>array-object<br>array object is same like the others example above.</p></li></ul><h3 id="Can-be-use-outside-TotalJS-Framework"><a href="#Can-be-use-outside-TotalJS-Framework" class="headerlink" title="Can be use outside TotalJS Framework"></a>Can be use outside TotalJS Framework</h3><p>I’ve created this library is for TotalJS Framework only at the first time. But today you can use this library in another NodeJS framework. But the requirement for this is you have to use the latest version of TotalJS. You know that TotalJS framework is can be use as helper library. This is the one of TotalJS pros than other framework.</p><h3 id="Complete-Documentation"><a href="#Complete-Documentation" class="headerlink" title="Complete Documentation"></a>Complete Documentation</h3><p><code>jsonql-totaljs</code> has complete documentation which is available in their <a href="https://github.com/aalfiann/jsonql-totaljs/wiki" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Wiki</a>. I will not rewrite all things from documentation in this article, because I know, it will Too Long Didn’t Read.</p><p>So here is the basic tutorial how to use <code>jsonql-totaljs</code> :</p><ul><li><p>Install by NPM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jsonql-totaljs</span><br></pre></td></tr></table></figure></li><li><p>Get Started</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JsonQL = <span class="built_in">require</span>(<span class="string">'jsonql-totaljs'</span>);</span><br><span class="line"><span class="comment">// create new object jsonql</span></span><br><span class="line"><span class="keyword">const</span> jsonql = <span class="keyword">new</span> JsonQL();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// build query</span></span><br><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      fields:[<span class="string">'user_id'</span>,<span class="string">'name'</span>],</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// with callback</span></span><br><span class="line">jsonql.query(q).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);        </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// on top promise</span></span><br><span class="line">jsonql.query(q).promise().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>JsonQL is will make you easier to create query with NoSQL embedded database. With JsonQL, you long query will still readable. No spagethi code because JsonQL is already having nice structure.</p><p>So here is the benefit of using JsonQL :</p><ul><li>Easier and readable query</li><li>Your source code is more cleaner</li><li>Simple multiple join table</li><li>Support parallel query in single execution</li><li>Support Promise, so you have no worry about callback hell</li><li>Saving your time to make builder of query function</li><li>Query support in string which means the query can be saved into database</li><li>etc</li></ul><p>Actualy there is more benefit of using JsonQL, but remember that not all application is suitable to use JsonQL. Just use JsonQL if your application is require this.</p><p>Thank You.</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Avoid JavaScript Heap Out of Memory</title>
      <link href="/post/how-to-avoid-javascript-heap-out-of-memory/"/>
      <url>/post/how-to-avoid-javascript-heap-out-of-memory/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8dc5b1832911ad243ee03bf67bd6480f8.jpg" alt=""></p><p>Hello guys, today I would like to write about How to Avoid JavaScript Heap Out of Memory in NodeJS.<br><code>JavaScript heap out of memory</code> is normally happend when you are reading very large file.<br>But sometimes this could happen when you are in big loop process to push data into array.</p><a id="more"></a><h2 id="What-is-JavaScript-Heap-Out-of-Memory"><a href="#What-is-JavaScript-Heap-Out-of-Memory" class="headerlink" title="What is JavaScript Heap Out of Memory?"></a>What is JavaScript Heap Out of Memory?</h2><p>JavaScript Heap Out of Memory means you have reach the limit of NodeJS memory usage. The strict standar limit memory usage in V8 is around 1.7 GB. So you have to increase this manually if you have reach this limit.</p><h2 id="Using-Stream"><a href="#Using-Stream" class="headerlink" title="Using Stream"></a>Using Stream</h2><p>When you are going to handle big file in NodeJS, the best practice is using <code>stream</code>. Because stream will break apart process into line per line, so the CPU can breath longer when processing big data. But using native <code>stream</code> is still not enough for very very large data file. You still get <code>JavaScript Heap Out of Memory</code>. So I going to describe what is the simple way and the best way of using stream to avoid JavaScript Heap Out of Memory below here.</p><h3 id="Simple-Way"><a href="#Simple-Way" class="headerlink" title="Simple Way"></a>Simple Way</h3><p>After I take a look searching through google and make some research. The very simple way to avoid JavaScript Heap Out of Memory in NodeJS is using <code>createReadStream</code>.</p><ul><li>Example for read file<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = fs.createReadStream(<span class="string">'your/path/file'</span>);</span><br><span class="line">reader.on(<span class="string">'data'</span>, (line) =&gt; &#123;</span><br><span class="line">  <span class="comment">// handle data line per line here</span></span><br><span class="line">&#125;);</span><br><span class="line">reader.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line">reader.on(<span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>If you’re file is under 400Mb, then above method is still work well. But how if you’re file is very large? like 1Gb or 2Gb in size? Actually this way is still fails (not working), you still get <code>JavaScript Heap Out of Memory</code>.</p><p>To solve this problem you should run extra arguments when executing your js.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --max-old-space-size=4096 yourFile.js</span><br></pre></td></tr></table></figure><p>Very simple way because you have already increase the strict standar limit of memory usage in NodeJS. This is working but actually I don’t recommend to use this way.</p><h3 id="Best-Way"><a href="#Best-Way" class="headerlink" title="Best Way"></a>Best Way</h3><p>So what is the best way to handle big file? The answer is turn your native stream into event stream.<br>Yeah I know this is not simple, but thanks to him, this guy name <code>Dominictarr</code> was created the <a href="https://www.npmjs.com/package/event-stream" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">event-stream</a> library which is this library is the best eficient way to play with stream in NodeJS.</p><p>Example for read file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'event-stream'</span>);</span><br><span class="line"></span><br><span class="line">fs.createReadStream(<span class="string">'your/path/file'</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    es.mapSync(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// handle data line per line here</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>I successfully to read log file around 2Gb in size with this way without have to set</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--max-old-space-size=4096</span><br></pre></td></tr></table></figure><h3 id="Big-JSON-File-Problem"><a href="#Big-JSON-File-Problem" class="headerlink" title="Big JSON File Problem"></a>Big JSON File Problem</h3><p>I facing another issue when the file is json string. That above method is very slow, it is because to parse your data to json object. But thanks to him again, <code>Dominictarr</code> create another <a href="https://www.npmjs.com/package/JSONStream" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">JSONStream</a> library which is to improve the performance in <code>event-stream</code> while parsing to json object.</p><p>Example to parse big json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'event-stream'</span>);</span><br><span class="line"><span class="keyword">const</span> jsonStream = <span class="built_in">require</span>(<span class="string">'JSONStream'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = [];</span><br><span class="line">fs.createReadStream(<span class="string">'your/path/file'</span>)</span><br><span class="line">  .pipe(jsonStream.parse())</span><br><span class="line">  .pipe(</span><br><span class="line">    es.mapSync(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">      json.push(line);</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>event-stream</code> + <code>JSONStream</code> will make improve the performance speed 3x faster for parsing string to json object.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Using stream is the best practice to handle big data. But not for speed. Even you are successfully to avoid JavaScript Heap Out of Memory in NodeJS, reading big file is always slow.</p><p>Always remember that, just stop or better don’t ever think to use file for saving big data in the future. If right now you having big file for example like log file, just try to move it into database engine like <code>ElasticSearch</code> or <code>Hadoop</code>. This will make your life easier to manage your log data.</p><p>Thank You.</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to JSON Query in JavaScript</title>
      <link href="/post/how-to-json-query-in-javascript/"/>
      <url>/post/how-to-json-query-in-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe84dd87d2b6ce4a17eb74f6e1f5e8a01af.png" alt=""></p><p>JSON is a format to sharing data as alternative to XML because this is very ligtweight and very readable. JSON mostly used in JavaScript Programming but infact this can be use for another programming language including <code>PHP</code>, <code>Phyton</code>, <code>Ruby</code>, <code>Java</code>, etc.</p><a id="more"></a><p>Using JSON is very simple, because JavaScript can read directly into the object. But the problem is to query the JSON is not easy when it is on big array. So in this topic we will try to how to make JSON doing query to <code>search</code>, <code>join</code>, <code>merge</code>, <code>groupBy</code>, <code>sum</code>, <code>groupDetail</code>, <code>orderBy</code>, <code>limit</code>, <code>skip</code>, <code>pagination</code>, etc.</p><h2 id="JSON-Query"><a href="#JSON-Query" class="headerlink" title="JSON Query"></a>JSON Query</h2><p>To JSON Query I will try to use as native way and using library. So what I’m gonna choose is <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a>. Why? Because it is very fast and lightweight, the size is only <strong>4Kb</strong> when minified and gzipped. Also this library is build with the native way, so it is fair enough to compare with the native way.</p><h2 id="Example-Data"><a href="#Example-Data" class="headerlink" title="Example Data"></a>Example Data</h2><p>I will use this example data for this tutorial</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = [</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">13</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">5</span>, <span class="attr">name</span>:<span class="string">'Wilfred'</span>, <span class="attr">age</span>:<span class="number">26</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">'Merry'</span>, <span class="attr">age</span>:<span class="number">31</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user_contact = [</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">address</span>:<span class="string">'California'</span>, <span class="attr">email</span>:<span class="string">'california@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'44556677'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">address</span>:<span class="string">'South West'</span>, <span class="attr">email</span>:<span class="string">'sout.west@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'12322144'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">3</span>, <span class="attr">address</span>:<span class="string">'Jakarta'</span>, <span class="attr">email</span>:<span class="string">'jakarta@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'89119796'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">4</span>, <span class="attr">address</span>:<span class="string">'Sidney, Australia'</span>, <span class="attr">email</span>:<span class="string">'sidney.australia@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'33525478'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">5</span>, <span class="attr">address</span>:<span class="string">'Tokyo'</span>, <span class="attr">email</span>:<span class="string">'tokyo@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'51167889'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car_brand = [</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ford'</span>, <span class="attr">color</span>:<span class="string">'black'</span>, <span class="attr">stock</span>:<span class="number">12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ford'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">26</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ferarri'</span>, <span class="attr">color</span>:<span class="string">'red'</span>, <span class="attr">stock</span>:<span class="number">8</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Porsche'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">9</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Peugot'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">13</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Using-Fly-Json-ODM"><a href="#Using-Fly-Json-ODM" class="headerlink" title="Using Fly Json ODM"></a>Using Fly Json ODM</h2><p>Because I choose to use <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a> library to compare with native way, this is how to use fly-json-odm:</p><ul><li><p>You can install from NPM for NodeJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install fly-json-odm</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FlyJson = <span class="built_in">require</span>(<span class="string">'fly-json-odm'</span>);</span><br><span class="line"><span class="keyword">var</span> odm = <span class="keyword">new</span> FlyJson();</span><br><span class="line"><span class="comment">// below here is for your query</span></span><br></pre></td></tr></table></figure></li><li><p>You can use CDN for browser</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/fly-json-odm@1.8.4/dist/flyjson.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> odm = <span class="keyword">new</span> FlyJson();</span><br><span class="line">  <span class="comment">// below here is for your query</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>For more detail is on their <a href="https://github.com/aalfiann/fly-json-odm/wiki" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">documentation</a>.</p></li></ul><h2 id="Tutorial-JSON-Query"><a href="#Tutorial-JSON-Query" class="headerlink" title="Tutorial JSON Query"></a>Tutorial JSON Query</h2><p>By using native way below here you should consider about:</p><ol><li>Clone array to prevent your original data.</li><li>Loop is blocking for big data.</li><li>This is just the basic function you need make some improve for using in production.</li></ol><p>So let’s start the tutorial json query with common cases.</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>Simple searching by key value in json array.</p><ul><li><p>Native way<br>To perform search in JSON you will need <code>filter</code> and <code>indexOf</code> function like this below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">obj1,name,searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.filter(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key[name].indexOf(searchTerm) &gt; <span class="number">-1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = search(user,<span class="string">'name'</span>,<span class="string">'Wil'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).where(<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'Wil'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>With fly-json-odm you are able to search by using comparison operator.<br>Example: <code>==</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>LIKE</code>, <code>NOT LIKE</code>, etc.</p></li><li><p>Expected result<br>You can see the at <a href="https://jsfiddle.net/aalfiann/Lqw8usr7/14/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"user_id"</span>:<span class="number">5</span>,<span class="attr">"name"</span>:<span class="string">"Wilfred"</span>,<span class="attr">"age"</span>:<span class="number">26</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Join-On"><a href="#Join-On" class="headerlink" title="Join On"></a>Join On</h3><p>Join on means joining two json array by key and result as nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params">obj1,obj2,alias,name1,name2</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// we create index for obj2, to be use later in loop</span></span><br><span class="line">  <span class="keyword">const</span> indexB = obj2.reduce(<span class="function">(<span class="params">result,item</span>) =&gt;</span> &#123; </span><br><span class="line">    result[item[name2]] = item;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// create result in array first</span></span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mapping the obj1</span></span><br><span class="line">  obj1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// create newdata</span></span><br><span class="line">    <span class="keyword">var</span> newdata = &#123;&#125;;</span><br><span class="line">    <span class="comment">// get the obj1 key to array</span></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(obj1[index]);</span><br><span class="line">    <span class="comment">// count the array</span></span><br><span class="line">    <span class="keyword">var</span> l = arr.length;</span><br><span class="line">    <span class="comment">// loop the obj1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">      <span class="comment">// using alias will add new object nested for obj2</span></span><br><span class="line">      <span class="keyword">if</span>(arr[i] === name1) &#123;</span><br><span class="line">        <span class="keyword">if</span>(alias === arr[i]) &#123;</span><br><span class="line">          newdata[arr[i]] = indexB[obj1[index][arr[i]]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newdata[alias] = indexB[obj1[index][arr[i]]];</span><br><span class="line">          newdata[arr[i]] = value[arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newdata[arr[i]] = value[arr[i]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// push new object into result</span></span><br><span class="line">    result.push(newdata);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = join(user,user_contact,<span class="string">'user_id'</span>,<span class="string">'user_id'</span>,<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>Join two json array as nested actualy is very complicated in native way.</p></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).join(<span class="string">'user_id'</span>,user_contact).on(<span class="string">'user_id'</span>,<span class="string">'id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>With fly-json-odm is very simple and your code will be more cleaner.</p></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/fa7eumrd/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"user_id"</span>: &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"tokyo@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"51167889"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">   <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"Jakarta"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"jakarta@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"89119796"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Join-Merge"><a href="#Join-Merge" class="headerlink" title="Join Merge"></a>Join Merge</h3><p>Join Merge means joining two json array without nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joinMerge</span>(<span class="params">obj1,obj2,name1,name2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we create index for obj2, to be use later in map</span></span><br><span class="line">  <span class="keyword">const</span> indexB = obj2.reduce(<span class="function">(<span class="params">result,item</span>) =&gt;</span> &#123; </span><br><span class="line">    result[item[name2]] = item; </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> obj1.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Object</span>.assign(item,indexB[item[name1]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = joinMerge(user,user_contact,<span class="string">'user_id'</span>,<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).join(<span class="string">'user_id'</span>,user_contact).merge(<span class="string">'user_id'</span>,<span class="string">'id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/wkLazqvt/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"tokyo@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"51167889"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"Jakarta"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"jakarta@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"89119796"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Group-By-Sum"><a href="#Group-By-Sum" class="headerlink" title="Group By + Sum"></a>Group By + Sum</h3><p>This is just grouping by name property of json array. Support with SUM but this is optional.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span>(<span class="params">obj1, name, sumField=[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> l = sumField.length;</span><br><span class="line">  <span class="keyword">var</span> data = obj1.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, obj</span>) </span>&#123;</span><br><span class="line">    obj.item_count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(obj[name] <span class="keyword">in</span> res)) &#123;</span><br><span class="line">      res.__array.push(res[obj[name]] = obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">        res[obj[name]][sumField[i]] += obj[sumField[i]];</span><br><span class="line">      &#125;</span><br><span class="line">      res[obj[name]][<span class="string">'item_count'</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// average</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">      res[obj[name]][<span class="string">'average_'</span>+sumField[i]] = (res[obj[name]][sumField[i]]/res[obj[name]][<span class="string">'item_count'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;, &#123;<span class="attr">__array</span>:[]&#125;);</span><br><span class="line">  <span class="keyword">return</span> data.__array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = groupBy(car_brand, <span class="string">'brand'</span>, [<span class="string">'stock'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(car_brand).groupBy(<span class="string">'brand'</span>,[<span class="string">'stock'</span>]).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/av7zdycn/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"black"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">38</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">19</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Ferarri"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">8</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">8</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Porsche"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">9</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">9</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Peugot"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">13</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">13</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Grouping-Detail"><a href="#Grouping-Detail" class="headerlink" title="Grouping Detail"></a>Grouping Detail</h3><p>This will grouping the json array and the detail will display as nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupDetail</span>(<span class="params">obj1, name, groupName=<span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = obj1.reduce(<span class="function">(<span class="params">objectsByKeyValue, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = obj[name];</span><br><span class="line">    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);</span><br><span class="line">    <span class="keyword">return</span> objectsByKeyValue;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">var</span> group = [];</span><br><span class="line">  <span class="keyword">if</span>(groupName) &#123;</span><br><span class="line">    group.push(&#123;[groupName]:data&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    group.push(&#123;[name]:data&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> group;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = groupDetail(car_brand, <span class="string">'brand'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(car_brand).groupDetail(<span class="string">'brand'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/qtp4fh8c/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"brand"</span>: &#123;</span><br><span class="line">  <span class="attr">"Ford"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"black"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">12</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">26</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Ferarri"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ferarri"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">8</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Porsche"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Porsche"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">9</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Peugot"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Peugot"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">13</span></span><br><span class="line">  &#125;]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Order-By"><a href="#Order-By" class="headerlink" title="Order By"></a>Order By</h3><p>To sort the json array in ASC or DESC.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sortBy</span>(<span class="params">field, reverse, primer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = primer ? </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> primer(x[field])&#125; : </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x[field]&#125;;</span><br><span class="line">  reverse = !reverse ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a = key(a), b = key(b), reverse * ((a &gt; b) - (b &gt; a));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderBy</span>(<span class="params">obj1,name,desc=true,primer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.sort(_sortBy(name,desc,primer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = orderBy(user,<span class="string">'user_id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).orderBy(<span class="string">'user_id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/xt4qpeba/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>Limit the json array output to display.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params">obj1, size</span>) </span>&#123;</span><br><span class="line">  obj1.length = size;</span><br><span class="line">  <span class="keyword">return</span> obj1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = limit(user,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).take(<span class="number">2</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/fqxbzoka/3/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"user_id"</span>:<span class="number">1</span>,<span class="attr">"name"</span>:<span class="string">"John"</span>,<span class="attr">"age"</span>:<span class="number">13</span>&#125;,&#123;<span class="attr">"user_id"</span>:<span class="number">5</span>,<span class="attr">"name"</span>:<span class="string">"Wilfred"</span>,<span class="attr">"age"</span>:<span class="number">26</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Skip"><a href="#Skip" class="headerlink" title="Skip"></a>Skip</h3><p>Skip some element of json array output.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params">obj1, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.slice(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = skip(user,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).skip(<span class="number">1</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/sho541ke/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h3><p>When data is big, we should don’t display them all, so we must create a pagination.<br>Actualy you can just doing this by combining <code>limit</code> and <code>skip</code>, but this is the alternative method.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paginate</span>(<span class="params">obj1, page, page_size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = obj1.length;</span><br><span class="line">  --page; <span class="comment">// because pages logically start with 1, but technically with 0</span></span><br><span class="line">  obj1 = obj1.slice(page * page_size, (page + <span class="number">1</span>) * page_size);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result:obj1,</span><br><span class="line">    metadata: &#123;</span><br><span class="line">      page:(page+<span class="number">1</span>),</span><br><span class="line">      page_size:page_size,</span><br><span class="line">      total_page:<span class="built_in">Math</span>.ceil(count / page_size),</span><br><span class="line">      total_records:count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = paginate(user_contact,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user_contact).paginate(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/k13rj4xg/3/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"result"</span>: [&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line"> &#125;, &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"South West"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"sout.west@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"12322144"</span></span><br><span class="line"> &#125;],</span><br><span class="line"> <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">  <span class="attr">"page"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"page_size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"total_page"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"total_records"</span>: <span class="number">5</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Native way is very fast and no one libraries can beat the native way. But for complex json query, your code will hard to read and you will lose many hours of your time just only to create the function for spesific condition.</p><p>With using <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a>, to do json query is more easier because:</p><ul><li>Similar as SQL Query.</li><li>Function is chainable.</li><li>Asynchronous support.</li><li>Work in memory so your original data is safe.</li></ul><p>There is <code>lodash</code>, <code>underscore</code> and <code>ramda</code> which is also help you to json query. But I don’t use it because for me it is too bloated and slow in performance to use in browser. If you looking for tutorial json query with this library, you can easily find through google because too many article write this out there.</p><p>Thank you</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> library </tag>
            
            <tag> learning </tag>
            
            <tag> javascript </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Fastest Loop in JavaScript</title>
      <link href="/post/the-fastest-loop-in-javascript/"/>
      <url>/post/the-fastest-loop-in-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe86ee2eadb34b3bae013378e74e7fa5f952b9541c4a50dbbad.jpeg" alt=""></p><p>Today I have research for the <code>loop</code> which is the very basic to make some operations in JavaScript.<br>In this research we will take a look, what is the fastest way <code>loop</code> method for handle big data array?</p><a id="more"></a><h2 id="Problem-in-Loop"><a href="#Problem-in-Loop" class="headerlink" title="Problem in Loop"></a>Problem in Loop</h2><p>We all already know that there is a big problem in loop.<br>When you are want to iterate big data array, loop is blocking, so there is possibility to make your application freeze if you are not care to choose the loop method properly.</p><h2 id="Myth-in-fastest-loop"><a href="#Myth-in-fastest-loop" class="headerlink" title="Myth in fastest loop"></a>Myth in fastest loop</h2><p>So far I have already searching through <code>google</code> and find the best answer from <code>stackoverflow</code> about fastest loop in javascript is :</p><ol><li><p>for loop cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while reverse cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = array.length; <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>A lot of my project is using this above answer for loop, and the second answer is the fastest loop method.<br>But actualy, there is still another fast loop way that I just found it yesterday. He found another fast loop method which is he described at <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">medium here</a>.</p><p>I very courious about his benchmark and I also want to create my own benchmark about loop in javascript.</p><h2 id="The-loop-method-in-javascript"><a href="#The-loop-method-in-javascript" class="headerlink" title="The loop method in javascript"></a>The loop method in javascript</h2><p>Before we going into the main benchmark, there is many loop method available in javascript, it is:</p><ul><li><strong>for</strong><br>A <code>for</code> loop repeats until a specified condition evaluates to false. This statements is very similar with Java and C <code>for</code> loop.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; array.length;i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>for in</strong><br>The <code>for in</code> statement iterates a specified variable over all the enumerable properties of an object.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>do while</strong><br>The <code>do while</code> statement repeats until a specified condition evaluates to false.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; array.length)</span><br></pre></td></tr></table></figure></li><li><strong>while</strong><br>A <code>while</code> statement executes its statements as long as a specified condition evaluates to true.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; array.length) &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>forEach</strong><br>The <code>forEach()</code> method executes a provided function once for each array element.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Benchmark-Loop"><a href="#Benchmark-Loop" class="headerlink" title="Benchmark Loop"></a>Benchmark Loop</h2><p>Based on above <code>loop</code> statements, I will not benchmarked them all. I just choose 3 fastest loop only.</p><h3 id="Setup-boilerplate"><a href="#Setup-boilerplate" class="headerlink" title="Setup boilerplate"></a>Setup boilerplate</h3><p>This will create array for 1 million element and executed before the benchmark loop running.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x=<span class="number">0</span>;x&lt;<span class="number">1000000</span>;x++) &#123;</span><br><span class="line">  array.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h3 id="Setup-block"><a href="#Setup-block" class="headerlink" title="Setup block"></a>Setup block</h3><p>I will use <code>let</code> than <code>var</code> because using <code>let</code> for loop is more faster than using <code>var</code>. Why? because in browser if you using <code>var</code> for benchmarking without function scope, <code>var</code> will be added to <code>global object</code>.</p><ul><li><p><strong>for with cached length</strong> (this is best stackoverflow answer)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, max=array.length;i&lt;max;i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>while reverse</strong> (most people assume this is fast for browser)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = array.length;</span><br><span class="line"><span class="keyword">while</span> (max--) &#123;</span><br><span class="line">  result = array[max];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>another for</strong> (this is the fastest loop)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> max = array.length;</span><br><span class="line"><span class="keyword">for</span>(; i &lt; max; i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Benchmark-Result"><a href="#Benchmark-Result" class="headerlink" title="Benchmark Result"></a>Benchmark Result</h3><p>Here is the benchmark result from <a href="https://jsperf.com/fastest-loop-javascript" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsperf</a>.<br><img src="https://i.imgur.com/FR6tr8r.png" alt=""></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Based on benchmark result, I can confirm that the fastest loop is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;<span class="keyword">const</span> max = array.length;<span class="keyword">for</span>(; i &lt; max; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>You can read in very detail how he found this fastest loop in <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>Thank You</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Wine 4 on Elementary OS Juno</title>
      <link href="/post/install-wine-4-on-elementary-os-juno/"/>
      <url>/post/install-wine-4-on-elementary-os-juno/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe84801db7b832346e0cf1b05118cf0ce90.png" alt=""></p><p>I know there is a lot of tutorial how to install Wine 4 out there.<br>But there is little for specific distro like <code>Elementary OS Juno</code> and the explanation is not detail so error happening is always happen for newbie who has new in linux world.</p><a id="more"></a><p>This website is about <code>Javascript</code> but why we talk out of programming?</p><p>My reason to write this tutorial is:</p><ol><li><p>Wine is the simple way to make test our <code>NodeJS</code> application bundled for windows is running well or not. So if you passed in Wine, I can guarantee you application is also works 100% in real Windows.</p></li><li><p>I has been moved from <code>mac</code> to use <code>linux</code> and <code>Elementary OS</code> is very similar with <code>mac</code>.</p></li><li><p><code>Elementary OS</code> is based from <code>Ubuntu</code> and the official repository from Ubuntu is still using Wine 3 version. Wine 3 is no too old to use, because for application which is using higher than Net Framework 4, is really worst, so you might not able to run many windows application today with <code>Wine 3</code>.</p></li></ol><p>Before we going to the tutorial, You must know what is Wine was created for and how wine works behind.</p><h2 id="What-is-Wine"><a href="#What-is-Wine" class="headerlink" title="What is Wine?"></a>What is Wine?</h2><p>Wine is a free and open-source compatibility layer that aims to allow computer programs (application software and computer games) developed for Microsoft Windows to run on Unix-like operating systems.</p><h2 id="How-Wine-works-behind"><a href="#How-Wine-works-behind" class="headerlink" title="How Wine works behind?"></a>How Wine works behind?</h2><p>In above statement (I just copied from Wikipedia) means Wine works on layer to run windows application on top unix libraries. So Wine is not an <strong>EMULATOR</strong> or <strong>Cross Platform engine</strong>, so not all windows applications will be run seamlessly.</p><h2 id="What-Benefit-using-Wine"><a href="#What-Benefit-using-Wine" class="headerlink" title="What Benefit using Wine?"></a>What Benefit using Wine?</h2><p>Because Wine is not an Emulator or Cross Platform engine, the benefit is you will save a lot of memory resources. This is really fast and stable (Wine 4).</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this tutorial is for Elementary OS Juno, because EOS Juno is based on Ubuntu Bionic, so this tutorial might be also works for Ubuntu 18.04 (Bionic).</p><h3 id="Install-Wine-4"><a href="#Install-Wine-4" class="headerlink" title="Install Wine 4"></a>Install Wine 4</h3><ul><li><p>Setup PPA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>Add Repositories</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###  Elementary OS Juno is based on Ubuntu 18.04 </span></span><br><span class="line">sudo apt-add-repository <span class="string">'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'</span></span><br></pre></td></tr></table></figure></li><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Troubleshoot<br>If you face unmet dependencies error during installation,<br>use the following commands to install winehq using aptitude.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Check Version<br>To make sure Wine is installed properly, You can try to check the Wine version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="Winetricks"><a href="#Winetricks" class="headerlink" title="Winetricks"></a>Winetricks</h3><p>Winetricks is to make you easier manage the application or additonal library for windows. Also Winetricks will help you to install dependencies of Windows libraries like .dll, dotnet, etc. Because sometimes application installer doesn’t provide default dependecies.</p><h3 id="Install-Winetricks"><a href="#Install-Winetricks" class="headerlink" title="Install Winetricks"></a>Install Winetricks</h3><ul><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install winetricks</span><br></pre></td></tr></table></figure></li><li><p>Cleanup any application<br>Before we going to set wine prefix, You are required to delete any installed windows applications first.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r -f ~/.wine</span><br></pre></td></tr></table></figure></li><li><p>Using 32bit only</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot</span><br></pre></td></tr></table></figure></li><li><p>Using 32/64bit<br>As default Wine will detect automatically your processor is 64bit or not. If your computer is 64bit, so default <code>.wine</code> directory is for 64bit application. To make Wine also works for 32bit, you have to create new <code>.wine32</code> directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine32 wine wineboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Recomendations"><a href="#Recomendations" class="headerlink" title="Recomendations"></a>Recomendations</h3><p>I will recommend you to set Wineprefix to default <code>32bit only</code>, because 64bit in Wine is still buggy and maybe you can not install dependecies properly from Winetricks. I’m not saying to not set prefix to <code>64bit</code>, but there is more tricky and very hard for newbie to solving it.</p><h3 id="Install-Default-Windows-Fonts"><a href="#Install-Default-Windows-Fonts" class="headerlink" title="Install Default Windows Fonts"></a>Install Default Windows Fonts</h3><p>Wine not install all default windows fonts, so many application looks bad because font is not installed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install msttcorefonts</span><br></pre></td></tr></table></figure><p>Note: Sometimes wine will not see new fonts installed, so you need to restart the computer.</p><h2 id="Most-Common-Problems"><a href="#Most-Common-Problems" class="headerlink" title="Most Common Problems"></a>Most Common Problems</h2><h3 id="Icon-Shortcut-Not-Working"><a href="#Icon-Shortcut-Not-Working" class="headerlink" title="Icon Shortcut Not Working"></a>Icon Shortcut Not Working</h3><p>Sometimes installer is finish to install windows application, but the icon shortcut is not working.<br>To solved this you have to edit the <code>.desktop</code> file.</p><p>Example cases:<br>I have installed Riot application from installer. So the wine path of it’s application is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.wine/drive_c/Program Files/Riot/Riot.exe</span><br></pre></td></tr></table></figure><ul><li><p>Edit the <code>.desktop</code> file<br>First you can go to directory of wine programs shortcut in</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><p>You will see that any application icon shortcut is placed in there.<br>Now you just go inside the application directory in there.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Riot/</span><br></pre></td></tr></table></figure><p>Edit using nano editor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano riot.desktop</span><br></pre></td></tr></table></figure></li><li><p>Edit only the <code>Exec=</code> which is on line 3, become like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Riot</span><br><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=true</span><br><span class="line">Path=/home/YOUR_USERNAME/.wine/dosdevices/c:/Program Files/Riot</span><br><span class="line">Icon=31A0_Riot.0</span><br><span class="line">StartupWMClass=riot.exe</span><br></pre></td></tr></table></figure><p>Explanation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br></pre></td></tr></table></figure><p>That command is same as in terminal to go directory <code>Riot</code>, then execute wine to run <code>Riot.exe</code>.<br>Don’t forget to change <code>YOUR_USERNAME</code> with your username in Elementary OS.</p><p>If you want to try, you can just <a href="https://riot.en.softonic.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">download Riot application here</a>.</p></li></ul><h3 id="Uninstall-is-not-refresh-the-icon-shortcut"><a href="#Uninstall-is-not-refresh-the-icon-shortcut" class="headerlink" title="Uninstall is not refresh the icon shortcut"></a>Uninstall is not refresh the icon shortcut</h3><p>To solved this you can just delete the <code>.desktop</code> file in</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far I use wine 4, for many windows application is around 80% is works properly. Almost game online which is required <code>gameguard</code> is fail to run.</p><p>I know there is a way to install Wine 4 by using <code>snap</code> or <code>flatpack</code>, but that is not good for newbie, because you will don’t know how wine is works behind and maybe you will be more dificult to use <code>wine</code> with <code>winetricks</code>.</p><p>And before you try to install some popular application, for example like <code>Microsoft Office</code>, <code>Photoshop</code>, etc. Better you check first in <a href="https://appdb.winehq.org/objectManager.php?sClass=application&iId=31" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Wine DB</a> to make sure it is running properly on your Wine (version 4) or not. So you can choose the version of application properly.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elementary-os </tag>
            
            <tag> app </tag>
            
            <tag> wine </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Unit Test with Mocha + NYC + Travis and Coveralls</title>
      <link href="/post/setup-unit-test-with-mocha-nyc-travis-coveralls/"/>
      <url>/post/setup-unit-test-with-mocha-nyc-travis-coveralls/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe8fd5d43c642afafa59cbaca36477acda8.png" alt=""></p><p>Unit test is a way to make sure your code is running well before integration into core application. The most popular library to achieve this is <code>Mocha</code>, <code>NYC</code>, <code>Travis-CI</code> and <code>Coveralls</code>.</p><a id="more"></a><p>If you are working as backend developer, unit test is a must thing to do. So before we going to the main tutorial, firstly we must know about :</p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a><a href="https://www.npmjs.com/package/mocha" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Mocha</a></h2><p>Mocha is the Javascript test framework which is running in NodeJS also in browser.</p><h2 id="NYC"><a href="#NYC" class="headerlink" title="NYC"></a><a href="https://www.npmjs.com/package/nyc" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NYC</a></h2><p>In the past we knew this as <code>Istanbul</code>, this is a command line interface for unit test.</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis-CI"></a><a href="https://travis-ci.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis-CI</a></h2><p>Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub. We needed this to make sure our application is <code>build passing</code> or not. You have to register first and don’t worry, Travis is always free for open source projects.</p><h2 id="Coveralls"><a href="#Coveralls" class="headerlink" title="Coveralls"></a><a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a></h2><p>Ensure that all your new code is fully covered, and see coverage trends emerge. You need this to know which line of your code is uncovered or skipped of being test. You have to register first and don’t worry, this free as long as your projects is open source.</p><h2 id="Setup-Tutorial"><a href="#Setup-Tutorial" class="headerlink" title="Setup Tutorial"></a>Setup Tutorial</h2><h3 id="Install-Library"><a href="#Install-Library" class="headerlink" title="Install Library"></a>Install Library</h3><p>Make sure you install this library from NPM.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mocha mocha-lcov-reporter coveralls nyc --save-dev</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>Create or edit your <code>.gitignore</code> file like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">coverage</span><br><span class="line">.nyc_output</span><br></pre></td></tr></table></figure><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>Create or edit your <code>.travis.yml</code> file like this</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"node"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"10"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"9"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"8"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"6"</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm@latest</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--dev</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">test</span></span><br><span class="line"><span class="attr">after_success:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>Modify your package json only on the <code>scripts</code> part.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "nyc --reporter=html --reporter=text mocha",</span><br><span class="line">    "coverage": "nyc report --reporter=text-lcov | coveralls"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="Run-Test"><a href="#Run-Test" class="headerlink" title="Run Test"></a>Run Test</h3><p>You can just run your unit test with use command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h3><p>To make your project looks more confident and professional, you must put the badge from <code>Travis</code> and <code>Coveralls</code> like this below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME.svg?branch=master)](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME)</span><br><span class="line">[![Coverage Status](https://coveralls.io/repos/github/YOUR_USERNAME/YOUR_PROJECT_NAME/badge.svg?branch=master)](https://coveralls.io/github/YOUR_USERNAME/YOUR_PROJECT_NAME?branch=master)</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article I just tell you how to setup unit test only. So actualy you have to create your unit test first by your self. In the next article, I will write tutorial create simple app with unit test. So don’t forget to bookmark this website. I will always happy to share my knowledge for all of you guys.</p><p>Thank You.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> learning </tag>
            
            <tag> javascript </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Right Way to Deep Clone Object JavaScript</title>
      <link href="/post/right-way-to-deep-clone-object-javascript/"/>
      <url>/post/right-way-to-deep-clone-object-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.imgproxify.com/img/3400fd611717c63257884c105d941fe80d1233fbc3da6906925fb21d11a8992d.jpg" alt=""></p><p>Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:</p><a id="more"></a><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><p>The most best answer in <code>Stackoverflow</code>, to deep clone an object javascript is just like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify());</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-bad-practice"><a href="#Then-why-this-is-bad-practice" class="headerlink" title="Then why this is bad practice?"></a>Then why this is bad practice?</h3><h3 id="Convertion-Problem"><a href="#Convertion-Problem" class="headerlink" title="Convertion Problem"></a>Convertion Problem</h3><p>The problem is <code>JSON.stringify()</code> cloud lead into wrong convertion. Because it just convert the javascript <code>Object</code> into <code>String</code>. You can not control for spesific instance inside the object.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="literal">undefined</span> &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="built_in">Symbol</span>() &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; &#125;);</span><br><span class="line"><span class="comment">// all will be converted to just "&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>Date()</code> will also parsed to string, so you will lose it.</li></ul><h3 id="Not-Eficient-very-slow"><a href="#Not-Eficient-very-slow" class="headerlink" title="Not Eficient (very slow)"></a>Not Eficient (very slow)</h3><p>I have test to deep clone 1 million object and this take higher than 1 seconds (<code>1823ms</code>). This will freeze your application since this way is blocking (synchronous). You have to be more tricky to avoid this blocking for handle big object.</p><h2 id="Good-Practice"><a href="#Good-Practice" class="headerlink" title="Good Practice"></a>Good Practice</h2><p>We should go back to use primitive way by using <code>loop</code> and <code>recursion</code>.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone, i;</span><br><span class="line">  <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">  <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">    clone = [];</span><br><span class="line">    <span class="keyword">var</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">  clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-good-practice"><a href="#Then-why-this-is-good-practice" class="headerlink" title="Then why this is good practice?"></a>Then why this is good practice?</h3><h3 id="Easy-to-modify"><a href="#Easy-to-modify" class="headerlink" title="Easy to modify"></a>Easy to modify</h3><p>Because using loop you can put any condition inside the logic.</p><h3 id="5x-faster"><a href="#5x-faster" class="headerlink" title="5x faster"></a>5x faster</h3><p>This is 5x faster comparing with <code>JSON.parse(JSON.stringify())</code>. I have test this with 1 million object and it just takes <code>150ms</code>.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Before I write this topic, I have research carefully about deepClone, especially for the performance in NodeJS.</p><h3 id="json-parse-stringify-js"><a href="#json-parse-stringify-js" class="headerlink" title="json-parse-stringify.js"></a>json-parse-stringify.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="loop-recursive-js"><a href="#loop-recursive-js" class="headerlink" title="loop-recursive.js"></a>loop-recursive.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone, i;</span><br><span class="line">    <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">    <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">      clone = [];</span><br><span class="line">      <span class="keyword">var</span> len = array.length;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">    clone = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = deepClone(array);</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I know there is another way to deepClone an object in javascript. You could using <code>jQuery</code> or <code>Lodash</code>, but the performance is very bad. I recommend you to using native way.</p><p>So this is only small research from me about deep clone object in javascript. The decision is going back to yours.</p><p>Thank you.</p>]]></content>
      
      
      <categories>
          
          <category> Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> javascript </tag>
            
            <tag> native </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
