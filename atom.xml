<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexoder</title>
  
  <subtitle>Learning JavaScript with Hexoder</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://127.0.0.1:4000/"/>
  <updated>2019-11-13T10:04:06.203Z</updated>
  <id>http://127.0.0.1:4000/</id>
  
  <author>
    <name>M ABD AZIZ ALFIAN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Fastest Loop in JavaScript</title>
    <link href="http://127.0.0.1:4000/post/the-fastest-loop-in-javascript/"/>
    <id>http://127.0.0.1:4000/post/the-fastest-loop-in-javascript/</id>
    <published>2019-11-13T00:05:07.039Z</published>
    <updated>2019-11-13T10:04:06.203Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/awApNb5.jpeg" alt=""><br>Today I have research for the <code>loop</code> which is the very basic to make some operations in JavaScript.<br>In this research we will take a look, what is the fastest way <code>loop</code> method for handle big data array?</p><a id="more"></a><h2 id="Problem-in-Loop"><a href="#Problem-in-Loop" class="headerlink" title="Problem in Loop"></a>Problem in Loop</h2><p>We all already know that there is a big problem in loop.<br>When you are want to iterate big data array, loop is blocking, so there is possibility to make your application freeze if you are not care to choose the loop method properly.</p><h2 id="Myth-in-fastest-loop"><a href="#Myth-in-fastest-loop" class="headerlink" title="Myth in fastest loop"></a>Myth in fastest loop</h2><p>So far I have already searching through <code>google</code> and find the best answer from <code>stackoverflow</code> about fastest loop in javascript is :</p><ol><li><p>for loop cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while reverse cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = array.length; <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>A lot of my project is using this above answer for loop, and the second answer is the fastest loop method.<br>But actualy, there is still another fast loop way that I just found it yesterday. He found another fast loop method which is he described at <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">medium here</a>.</p><p>I very courious about his benchmark and I also want to create my own benchmark about loop in javascript.</p><h2 id="The-loop-method-in-javascript"><a href="#The-loop-method-in-javascript" class="headerlink" title="The loop method in javascript"></a>The loop method in javascript</h2><p>Before we going into the main benchmark, there is many loop method available in javascript, it is:</p><ul><li><strong>for</strong><br>A <code>for</code> loop repeats until a specified condition evaluates to false. This statements is very similar with Java and C <code>for</code> loop.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; array.length;i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>for in</strong><br>The <code>for in</code> statement iterates a specified variable over all the enumerable properties of an object.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>do while</strong><br>The <code>do while</code> statement repeats until a specified condition evaluates to false.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; array.length)</span><br></pre></td></tr></table></figure></li><li><strong>while</strong><br>A <code>while</code> statement executes its statements as long as a specified condition evaluates to true.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; array.length) &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>forEach</strong><br>The <code>forEach()</code> method executes a provided function once for each array element.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Benchmark-Loop"><a href="#Benchmark-Loop" class="headerlink" title="Benchmark Loop"></a>Benchmark Loop</h2><p>Based on above <code>loop</code> statements, I will not benchmarked them all. I just choose 3 fastest loop only.</p><h3 id="Setup-boilerplate"><a href="#Setup-boilerplate" class="headerlink" title="Setup boilerplate"></a>Setup boilerplate</h3><p>This will create array for 1 million element and executed before the benchmark loop running.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x=<span class="number">0</span>;x&lt;<span class="number">1000000</span>;x++) &#123;</span><br><span class="line">  array.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h3 id="Setup-block"><a href="#Setup-block" class="headerlink" title="Setup block"></a>Setup block</h3><p>I will use <code>let</code> than <code>var</code> because using <code>let</code> for loop is more faster than using <code>var</code>. Why? because in browser if you using <code>var</code> for benchmarking without function scope, <code>var</code> will be added to <code>global object</code>.</p><ul><li><p><strong>for with cached length</strong> (this is best stackoverflow answer)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, max=array.length;i&lt;max;i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>while reverse</strong> (most people assume this is fast for browser)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = array.length;</span><br><span class="line"><span class="keyword">while</span> (max--) &#123;</span><br><span class="line">  result = array[max];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>another for</strong> (this is the fastest loop)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> max = array.length;</span><br><span class="line"><span class="keyword">for</span>(; i &lt; max; i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Benchmark-Result"><a href="#Benchmark-Result" class="headerlink" title="Benchmark Result"></a>Benchmark Result</h3><p>Here is the benchmark result from <a href="https://jsperf.com/fastest-loop-javascript" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsperf</a>.<br><img src="https://i.imgur.com/FR6tr8r.png" alt=""></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Based on benchmark result, I can confirm that the fastest loop is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;<span class="keyword">const</span> max = array.length;<span class="keyword">for</span>(; i &lt; max; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>You can read in very detail how he found this fastest loop in <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>Thank You</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/awApNb5.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Today I have research for the &lt;code&gt;loop&lt;/code&gt; which is the very basic to make some operations in JavaScript.&lt;br&gt;In this research we will take a look, what is the fastest way &lt;code&gt;loop&lt;/code&gt; method for handle big data array?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="http://127.0.0.1:4000/categories/Research/"/>
    
    
      <category term="javascript" scheme="http://127.0.0.1:4000/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://127.0.0.1:4000/tags/nodejs/"/>
    
      <category term="native" scheme="http://127.0.0.1:4000/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>Install Wine 4 on Elementary OS Juno</title>
    <link href="http://127.0.0.1:4000/post/install-wine-4-on-elementary-os-juno/"/>
    <id>http://127.0.0.1:4000/post/install-wine-4-on-elementary-os-juno/</id>
    <published>2019-11-12T10:22:17.098Z</published>
    <updated>2019-11-12T14:02:38.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8O2cOO7.png" alt=""><br>I know there is a lot of tutorial how to install Wine 4 out there.<br>But there is little for specific distro like <code>Elementary OS Juno</code> and the explanation is not detail so error happening is always happen for newbie who has new in linux world.</p><a id="more"></a><p>This website is about <code>Javascript</code> but why we talk out of programming?</p><p>My reason to write this tutorial is:</p><ol><li><p>Wine is the simple way to make test our <code>NodeJS</code> application bundled for windows is running well or not. So if you passed in Wine, I can guarantee you application is also works 100% in real Windows. </p></li><li><p>I has been moved from <code>mac</code> to use <code>linux</code> and <code>Elementary OS</code> is very similar with <code>mac</code>.</p></li><li><p><code>Elementary OS</code> is based from <code>Ubuntu</code> and the official repository from Ubuntu is still using Wine 3 version. Wine 3 is no too old to use, because for application which is using higher than Net Framework 4, is really worst, so you might not able to run many windows application today with <code>Wine 3</code>.</p></li></ol><p>Before we going to the tutorial, You must know what is Wine was created for and how wine works behind.</p><h2 id="What-is-Wine"><a href="#What-is-Wine" class="headerlink" title="What is Wine?"></a>What is Wine?</h2><p>Wine is a free and open-source compatibility layer that aims to allow computer programs (application software and computer games) developed for Microsoft Windows to run on Unix-like operating systems.</p><h2 id="How-Wine-works-behind"><a href="#How-Wine-works-behind" class="headerlink" title="How Wine works behind?"></a>How Wine works behind?</h2><p>In above statement (I just copied from Wikipedia) means Wine works on layer to run windows application on top unix libraries. So Wine is not an <strong>EMULATOR</strong> or <strong>Cross Platform engine</strong>, so not all windows applications will be run seamlessly.</p><h2 id="What-Benefit-using-Wine"><a href="#What-Benefit-using-Wine" class="headerlink" title="What Benefit using Wine?"></a>What Benefit using Wine?</h2><p>Because Wine is not an Emulator or Cross Platform engine, the benefit is you will save a lot of memory resources. This is really fast and stable (Wine 4).</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this tutorial is for Elementary OS Juno, because EOS Juno is based on Ubuntu Bionic, so this tutorial might be also works for Ubuntu 18.04 (Bionic).</p><h3 id="Install-Wine-4"><a href="#Install-Wine-4" class="headerlink" title="Install Wine 4"></a>Install Wine 4</h3><ul><li><p>Setup PPA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>Add Repositories</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###  Elementary OS Juno is based on Ubuntu 18.04 </span></span><br><span class="line">sudo apt-add-repository <span class="string">'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'</span></span><br></pre></td></tr></table></figure></li><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Troubleshoot<br>If you face unmet dependencies error during installation,<br>use the following commands to install winehq using aptitude.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Check Version<br>To make sure Wine is installed properly, You can try to check the Wine version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="Winetricks"><a href="#Winetricks" class="headerlink" title="Winetricks"></a>Winetricks</h3><p>Winetricks is to make you easier manage the application or additonal library for windows. Also Winetricks will help you to install dependencies of Windows libraries like .dll, dotnet, etc. Because sometimes application installer doesn’t provide default dependecies.</p><h3 id="Install-Winetricks"><a href="#Install-Winetricks" class="headerlink" title="Install Winetricks"></a>Install Winetricks</h3><ul><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install winetricks</span><br></pre></td></tr></table></figure></li><li><p>Cleanup any application<br>Before we going to set wine prefix, You are required to delete any installed windows applications first.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r -f ~/.wine</span><br></pre></td></tr></table></figure></li><li><p>Using 32bit only</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot</span><br></pre></td></tr></table></figure></li><li><p>Using 32/64bit<br>As default Wine will detect automatically your processor is 64bit or not. If your computer is 64bit, so default <code>.wine</code> directory is for 64bit application. To make Wine also works for 32bit, you have to create new <code>.wine32</code> directory. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine32 wine wineboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Recomendations"><a href="#Recomendations" class="headerlink" title="Recomendations"></a>Recomendations</h3><p>I will recommend you to set Wineprefix to default <code>32bit only</code>, because 64bit in Wine is still buggy and maybe you can not install dependecies properly from Winetricks. I’m not saying to not set prefix to <code>64bit</code>, but there is more tricky and very hard for newbie to solving it.</p><h3 id="Install-Default-Windows-Fonts"><a href="#Install-Default-Windows-Fonts" class="headerlink" title="Install Default Windows Fonts"></a>Install Default Windows Fonts</h3><p>Wine not install all default windows fonts, so many application looks bad because font is not installed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install msttcorefonts</span><br></pre></td></tr></table></figure><p>Note: Sometimes wine will not see new fonts installed, so you need to restart the computer.</p><h2 id="Most-Common-Problems"><a href="#Most-Common-Problems" class="headerlink" title="Most Common Problems"></a>Most Common Problems</h2><h3 id="Icon-Shortcut-Not-Working"><a href="#Icon-Shortcut-Not-Working" class="headerlink" title="Icon Shortcut Not Working"></a>Icon Shortcut Not Working</h3><p>Sometimes installer is finish to install windows application, but the icon shortcut is not working.<br>To solved this you have to edit the <code>.desktop</code> file.</p><p>Example cases:<br>I have installed Riot application from installer. So the wine path of it’s application is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.wine/drive_c/Program Files/Riot/Riot.exe</span><br></pre></td></tr></table></figure><ul><li><p>Edit the <code>.desktop</code> file<br>  First you can go to directory of wine programs shortcut in</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><p>  You will see that any application icon shortcut is placed in there.<br>  Now you just go inside the application directory in there.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Riot/</span><br></pre></td></tr></table></figure><p>  Edit using nano editor</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano riot.desktop</span><br></pre></td></tr></table></figure></li><li><p>Edit only the <code>Exec=</code> which is on line 3, become like this</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Riot</span><br><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=true</span><br><span class="line">Path=/home/YOUR_USERNAME/.wine/dosdevices/c:/Program Files/Riot</span><br><span class="line">Icon=31A0_Riot.0</span><br><span class="line">StartupWMClass=riot.exe</span><br></pre></td></tr></table></figure><p>  Explanation:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br></pre></td></tr></table></figure><p>  That command is same as in terminal to go directory <code>Riot</code>, then execute wine to run <code>Riot.exe</code>.<br>  Don’t forget to change <code>YOUR_USERNAME</code> with your username in Elementary OS.</p><p>  If you want to try, you can just <a href="https://riot.en.softonic.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">download Riot application here</a>.</p></li></ul><h3 id="Uninstall-is-not-refresh-the-icon-shortcut"><a href="#Uninstall-is-not-refresh-the-icon-shortcut" class="headerlink" title="Uninstall is not refresh the icon shortcut"></a>Uninstall is not refresh the icon shortcut</h3><p>To solved this you can just delete the <code>.desktop</code> file in</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far I use wine 4, for many windows application is around 80% is works properly. Almost game online which is required <code>gameguard</code> is fail to run.</p><p>I know there is a way to install Wine 4 by using <code>snap</code> or <code>flatpack</code>, but that is not good for newbie, because you will don’t know how wine is works behind and maybe you will be more dificult to use <code>wine</code> with <code>winetricks</code>.</p><p>And before you try to install some popular application, for example like <code>Microsoft Office</code>, <code>Photoshop</code>, etc. Better you check first in <a href="https://appdb.winehq.org/objectManager.php?sClass=application&iId=31" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Wine DB</a> to make sure it is running properly on your Wine (version 4) or not. So you can choose the version of application properly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8O2cOO7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;I know there is a lot of tutorial how to install Wine 4 out there.&lt;br&gt;But there is little for specific distro like &lt;code&gt;Elementary OS Juno&lt;/code&gt; and the explanation is not detail so error happening is always happen for newbie who has new in linux world.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="http://127.0.0.1:4000/categories/Tutorial/"/>
    
    
      <category term="app" scheme="http://127.0.0.1:4000/tags/app/"/>
    
      <category term="wine" scheme="http://127.0.0.1:4000/tags/wine/"/>
    
      <category term="elementary-os" scheme="http://127.0.0.1:4000/tags/elementary-os/"/>
    
      <category term="ubuntu" scheme="http://127.0.0.1:4000/tags/ubuntu/"/>
    
      <category term="linux" scheme="http://127.0.0.1:4000/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Setup Unit Test with Mocha + NYC + Travis and Coveralls</title>
    <link href="http://127.0.0.1:4000/post/setup-unit-test-with-mocha-nyc-travis-coveralls/"/>
    <id>http://127.0.0.1:4000/post/setup-unit-test-with-mocha-nyc-travis-coveralls/</id>
    <published>2019-11-11T18:55:53.332Z</published>
    <updated>2019-11-12T13:55:54.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/bjdmclk.png" alt=""><br>Unit test is a way to make sure your code is running well before integration into core application. The most popular library to achieve this is <code>Mocha</code>, <code>NYC</code>, <code>Travis-CI</code> and <code>Coveralls</code>.</p><a id="more"></a><p>If you are working as backend developer, unit test is a must thing to do. So before we going to the main tutorial, firstly we must know about :</p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a><a href="https://www.npmjs.com/package/mocha" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Mocha</a></h2><p>Mocha is the Javascript test framework which is running in NodeJS also in browser.</p><h2 id="NYC"><a href="#NYC" class="headerlink" title="NYC"></a><a href="https://www.npmjs.com/package/nyc" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NYC</a></h2><p>In the past we knew this as <code>Istanbul</code>, this is a command line interface for unit test.</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis-CI"></a><a href="https://travis-ci.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis-CI</a></h2><p>Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub. We needed this to make sure our application is <code>build passing</code> or not. You have to register first and don’t worry, Travis is always free for open source projects.</p><h2 id="Coveralls"><a href="#Coveralls" class="headerlink" title="Coveralls"></a><a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a></h2><p>Ensure that all your new code is fully covered, and see coverage trends emerge. You need this to know which line of your code is uncovered or skipped of being test. You have to register first and don’t worry, this free as long as your projects is open source.</p><h2 id="Setup-Tutorial"><a href="#Setup-Tutorial" class="headerlink" title="Setup Tutorial"></a>Setup Tutorial</h2><h3 id="Install-Library"><a href="#Install-Library" class="headerlink" title="Install Library"></a>Install Library</h3><p>Make sure you install this library from NPM. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mocha mocha-lcov-reporter coveralls nyc --save-dev</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>Create or edit your <code>.gitignore</code> file like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">coverage</span><br><span class="line">.nyc_output</span><br></pre></td></tr></table></figure><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>Create or edit your <code>.travis.yml</code> file like this</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"node"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"10"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"9"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"8"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"6"</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm@latest</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--dev</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">test</span></span><br><span class="line"><span class="attr">after_success:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>Modify your package json only on the <code>scripts</code> part.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "nyc --reporter=html --reporter=text mocha",</span><br><span class="line">    "coverage": "nyc report --reporter=text-lcov | coveralls"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="Run-Test"><a href="#Run-Test" class="headerlink" title="Run Test"></a>Run Test</h3><p>You can just run your unit test with use command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h3><p>To make your project looks more confident and professional, you must put the badge from <code>Travis</code> and <code>Coveralls</code> like this below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME.svg?branch=master)](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME)</span><br><span class="line">[![Coverage Status](https://coveralls.io/repos/github/YOUR_USERNAME/YOUR_PROJECT_NAME/badge.svg?branch=master)](https://coveralls.io/github/YOUR_USERNAME/YOUR_PROJECT_NAME?branch=master)</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article I just tell you how to setup unit test only. So actualy you have to create your unit test first by your self. In the next article, I will write tutorial create simple app with unit test. So don’t forget to bookmark this website. I will always happy to share my knowledge for all of you guys.</p><p>Thank You.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bjdmclk.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Unit test is a way to make sure your code is running well before integration into core application. The most popular library to achieve this is &lt;code&gt;Mocha&lt;/code&gt;, &lt;code&gt;NYC&lt;/code&gt;, &lt;code&gt;Travis-CI&lt;/code&gt; and &lt;code&gt;Coveralls&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="http://127.0.0.1:4000/categories/Tutorial/"/>
    
    
      <category term="javascript" scheme="http://127.0.0.1:4000/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://127.0.0.1:4000/tags/nodejs/"/>
    
      <category term="native" scheme="http://127.0.0.1:4000/tags/native/"/>
    
      <category term="learning" scheme="http://127.0.0.1:4000/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Right Way to Deep Clone Object JavaScript</title>
    <link href="http://127.0.0.1:4000/post/right-way-to-deep-clone-object-javascript/"/>
    <id>http://127.0.0.1:4000/post/right-way-to-deep-clone-object-javascript/</id>
    <published>2019-11-10T10:03:50.157Z</published>
    <updated>2019-11-12T14:01:57.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/pVZpYh6.png" alt=""><br>Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:</p><a id="more"></a><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><p>The most best answer in <code>Stackoverflow</code>, to deep clone an object javascript is just like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify());</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-bad-practice"><a href="#Then-why-this-is-bad-practice" class="headerlink" title="Then why this is bad practice?"></a>Then why this is bad practice?</h3><h3 id="Convertion-Problem"><a href="#Convertion-Problem" class="headerlink" title="Convertion Problem"></a>Convertion Problem</h3><p>The problem is <code>JSON.stringify()</code> cloud lead into wrong convertion. Because it just convert the javascript <code>Object</code> into <code>String</code>. You can not control for spesific instance inside the object.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="literal">undefined</span> &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="built_in">Symbol</span>() &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; &#125;);</span><br><span class="line"><span class="comment">// all will be converted to just "&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>Date()</code> will also parsed to string, so you will lose it.</li></ul><h3 id="Not-Eficient-very-slow"><a href="#Not-Eficient-very-slow" class="headerlink" title="Not Eficient (very slow)"></a>Not Eficient (very slow)</h3><p>I have test to deep clone 1 million object and this take higher than 1 seconds (<code>1823ms</code>). This will freeze your application since this way is blocking (synchronous). You have to be more tricky to avoid this blocking for handle big object.</p><h2 id="Good-Practice"><a href="#Good-Practice" class="headerlink" title="Good Practice"></a>Good Practice</h2><p>We should go back to use primitive way by using <code>loop</code> and <code>recursion</code>.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone, i;</span><br><span class="line">  <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">  <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">    clone = [];</span><br><span class="line">    <span class="keyword">var</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">  clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-good-practice"><a href="#Then-why-this-is-good-practice" class="headerlink" title="Then why this is good practice?"></a>Then why this is good practice?</h3><h3 id="Easy-to-modify"><a href="#Easy-to-modify" class="headerlink" title="Easy to modify"></a>Easy to modify</h3><p>Because using loop you can put any condition inside the logic.</p><h3 id="5x-faster"><a href="#5x-faster" class="headerlink" title="5x faster"></a>5x faster</h3><p>This is 5x faster comparing with <code>JSON.parse(JSON.stringify())</code>. I have test this with 1 million object and it just takes <code>150ms</code>.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Before I write this topic, I have research carefully about deepClone, especially for the performance in NodeJS.</p><h3 id="json-parse-stringify-js"><a href="#json-parse-stringify-js" class="headerlink" title="json-parse-stringify.js"></a>json-parse-stringify.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="loop-recursive-js"><a href="#loop-recursive-js" class="headerlink" title="loop-recursive.js"></a>loop-recursive.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone, i;</span><br><span class="line">    <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">    <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">      clone = [];</span><br><span class="line">      <span class="keyword">var</span> len = array.length;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">    clone = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = deepClone(array);</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I know there is another way to deepClone an object in javascript. You could using <code>jQuery</code> or <code>Lodash</code>, but the performance is very bad. I recommend you to using native way.</p><p>So this is only small research from me about deep clone object in javascript. The decision is going back to yours.</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pVZpYh6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="http://127.0.0.1:4000/categories/Research/"/>
    
    
      <category term="javascript" scheme="http://127.0.0.1:4000/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://127.0.0.1:4000/tags/nodejs/"/>
    
      <category term="native" scheme="http://127.0.0.1:4000/tags/native/"/>
    
  </entry>
  
</feed>
