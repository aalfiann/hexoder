<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexoder</title>
  
  <subtitle>Learning JavaScript with Hexoder</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexoder.com/"/>
  <updated>2019-12-07T17:13:48.753Z</updated>
  <id>https://hexoder.com/</id>
  
  <author>
    <name>M ABD AZIZ ALFIAN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pros and Cons of TotalJS Framework</title>
    <link href="https://hexoder.com/post/pros-and-cons-of-totaljs-framework/"/>
    <id>https://hexoder.com/post/pros-and-cons-of-totaljs-framework/</id>
    <published>2019-12-07T12:22:39.212Z</published>
    <updated>2019-12-07T17:13:48.753Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/6EcEgRw.jpg" alt=""></p><p>Hello guys, There is a lot of NodeJS Framework out there, but in this article, I will talk about TotalJS Framework. I will describe all the pros and cons about TotalJS Framework. Since I write this article, actually I was working with many projects with using TotalJS as framework. It was around 6 months I was learning about TotalJS Framework. So from my experience, hope I can better to explain what is the pros and cons of using TotalJS Framework.</p><a id="more"></a><p>There are so many website write about pros and cons of TotalJS Framework, but most of them is too general, they explanation is not too spesific also they miss many features in TotalJS. So that is the reason why I write this similar article and I want to make people try to use TotalJS framework for their project in the future.</p><h2 id="About-TotalJS-Framework"><a href="#About-TotalJS-Framework" class="headerlink" title="About TotalJS Framework"></a>About TotalJS Framework</h2><p>TotalJS framework was created by <code>Peter Sirka</code>. Actually <code>Peter Sirka</code> is not working alone, of course they have a team developer, so don’t worry, TotalJS is not maintained by single person. TotalJS is already mature as framework, because the first version of TotalJS framework was released at 2013. It was more than 5 years of development.</p><p>The main idea of TotalJS framework is created with pure javascript, stable, and everything feature released without any dependencies.</p><h2 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h2><p>First of all, I will start to explain from the <code>pros</code>. So here is the list pros of using TotalJS framework.</p><h3 id="Pure-Javascript"><a href="#Pure-Javascript" class="headerlink" title="Pure Javascript"></a>Pure Javascript</h3><p>TotalJS framework was written in <code>Pure JavaScript</code>, so this is easy for new developer who use this framework as there is no step learning curve. Developer who already understand JavaScript, can just use this framework for they projects.</p><h3 id="No-Dependencies"><a href="#No-Dependencies" class="headerlink" title="No Dependencies"></a>No Dependencies</h3><p>Everything features in TotalJS framework is <code>no dependencies</code>. So you are easy to learn all the features with just read from their wiki or documentation.</p><h3 id="High-Performance"><a href="#High-Performance" class="headerlink" title="High Performance"></a>High Performance</h3><p>TotalJS has better performance compared with another NodeJS framework. There is someone from internet who have created the benchmark for TotalJS, and the TotalJS benchmark is around <code>32K req/second</code>. For the detail about benchmarks, you can see at <a href="https://github.com/fastify/benchmarks" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><h3 id="Scalable"><a href="#Scalable" class="headerlink" title="Scalable"></a>Scalable</h3><p>TotalJS is very easy for scaling, because of it architecture. You can learn more detail about Modules, Packages, Workers and Clusters. This features help you very easy scale of your projects.</p><h3 id="Great-Controller"><a href="#Great-Controller" class="headerlink" title="Great Controller"></a>Great Controller</h3><p>Controller TotalJS is very powerfull as it knows 3x types of routes which is classic, websocket and file route. Also controller is executed in one time, so this is really so fast and low in memory consumption. You are able to create controller as many as unlimited.</p><h3 id="Dynamic-Routing"><a href="#Dynamic-Routing" class="headerlink" title="Dynamic Routing"></a>Dynamic Routing</h3><p>TotalJS has great dynamic routing. It is support classic and dynamic routes as regex. You are able to write routes for content, files and websocket. Routes also support HTTP Method, Flags, Cors and middleware.</p><h3 id="Built-in-Mail"><a href="#Built-in-Mail" class="headerlink" title="Built-in Mail"></a>Built-in Mail</h3><p>TotalJS has built-in mail feature. This mail class will make you easier to create or sending mail message.</p><h3 id="Built-in-Cache"><a href="#Built-in-Cache" class="headerlink" title="Built-in Cache"></a>Built-in Cache</h3><p>TotalJS has built-in cache feature. This cache is working in memory mechanism, so this will make your project run very fast.</p><h3 id="Modular-Architecture"><a href="#Modular-Architecture" class="headerlink" title="Modular Architecture"></a>Modular Architecture</h3><p>TotalJS has modular architecture, there is Modules and Packages feature which is will bundle your custom feature as simple as plugin like in the most CMS out there.</p><h3 id="Powerfull-View-Engine"><a href="#Powerfull-View-Engine" class="headerlink" title="Powerfull View Engine"></a>Powerfull View Engine</h3><p>TotalJS has built-in view engine which is will help you easier to make themes for you frontend. View engine will separate your server side and client side code. Also your frontend code will be more clean and easy to scale.</p><h3 id="Auto-Compression"><a href="#Auto-Compression" class="headerlink" title="Auto Compression"></a>Auto Compression</h3><p>TotalJS has GZIP, Image, HTML, JS and CSS compression. This is already running in auto compression mechanism as default. So your project will be running so fast in performance.</p><h3 id="Image-Manipulation"><a href="#Image-Manipulation" class="headerlink" title="Image Manipulation"></a>Image Manipulation</h3><p>TotalJS has Image manipulation feature. So you are very easy for example to create watermark, resize, and compress the image. But to use this feature you are required to install <code>ImageMagick</code> or <code>GraphicsMagick</code>.</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>If TotalJS is installed through NPM as globally, You are able to use TotalJS CLI. This CLI will help you to create localization, run local web server, minify javascript, html and css file, and many more.</p><h3 id="Websocket-Client"><a href="#Websocket-Client" class="headerlink" title="Websocket Client"></a>Websocket Client</h3><p>TotalJS has websocket client feature which is help you to making connection into websocket as a client. So you are possible to create chat or realtime application with TotalJS.</p><h3 id="NoSQL-Embedded"><a href="#NoSQL-Embedded" class="headerlink" title="NoSQL Embedded"></a>NoSQL Embedded</h3><p>NoSQL Embedded is built-in database which is your data will be saved as json file. This NoSQL Embedded has database builder which is support you to make crud, query and join. Even this NoSQL Embedded is design for small database, but this mechanism is using stream, so this will be strong enough if your data is getting bigger for around 100K row data.</p><h3 id="Schemas"><a href="#Schemas" class="headerlink" title="Schemas"></a>Schemas</h3><p>TotalJS has schema feature which is help you to create interface validation for your data in every routes. Using schema also will make your code more clean, readable and ligtweight.</p><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>TotalJS framework is run as singleton, once it load, all features is available as lazyload, so your project will still fast and low in memory consumption. Also you can use TotalJS as library with another NodeJS framework.</p><h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>TotalJS has built-in localization feature which is help you to create an application with multiple language. You also able to generate your localization directly with CLI feature.</p><h3 id="Support-Workers-Clusters"><a href="#Support-Workers-Clusters" class="headerlink" title="Support Workers + Clusters"></a>Support Workers + Clusters</h3><p>TotalJS has workers and clusters feature which is help you to scale your application for heavy computation. You can run multiple thread of NodeJS by using clusters feature.</p><h3 id="Debugging-Unit-Test"><a href="#Debugging-Unit-Test" class="headerlink" title="Debugging + Unit Test"></a>Debugging + Unit Test</h3><p>TotalJS has Debugging and built-in Unit Test feature. This will help you to maintain your source code when you are working in big team developer.</p><h3 id="Big-Ecosystem"><a href="#Big-Ecosystem" class="headerlink" title="Big Ecosystem"></a>Big Ecosystem</h3><p>TotalJs has big ecosystem which is help you to improve your productivity. You don’t have to create all the things from zero. Just save your time and don’t reinvent the wheels unless you have another plan.</p><h3 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h3><p>TotalJS has Community area, just register yourself and you are able to chat with other members. This community is so reactive also you are able to chat directly with the author of TotalJS framework <code>Peter Sirka</code>.</p><h3 id="Enterprise-Support"><a href="#Enterprise-Support" class="headerlink" title="Enterprise Support"></a>Enterprise Support</h3><p>If you are work in serious project, high development or in growth company. You have to buy TotalJS for Enterprise. So you have Service Level Agreement for your company.</p><h3 id="Has-Wiki-and-Documentation"><a href="#Has-Wiki-and-Documentation" class="headerlink" title="Has Wiki and Documentation"></a>Has Wiki and Documentation</h3><p>TotalJS has Wiki and Documentation, this will help you easier to learn all features in TotalJS framework.</p><h2 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h2><p>That is not fair if we don’t explain about the <code>cons</code>. So here is the list cons of using TotalJS framework.</p><h3 id="No-support-Typescript"><a href="#No-support-Typescript" class="headerlink" title="No support Typescript"></a>No support Typescript</h3><p>Until I write this article, TotalJS still not having a plan to support TypeScript. So it is hard to combine TotalJS with another Typescript framework.</p><h3 id="Documentation-not-complete"><a href="#Documentation-not-complete" class="headerlink" title="Documentation not complete"></a>Documentation not complete</h3><p>Documentation and wiki is available but not all features has been written completely. Also for the english version mostly written with broken english, so for someone who are not english native speaker, it will be more hard to understand, because we can not just copy paste the text into Google Translate because the text is not using grammar correctly.</p><h3 id="Many-examples-with-no-explanation"><a href="#Many-examples-with-no-explanation" class="headerlink" title="Many examples with no explanation"></a>Many examples with no explanation</h3><p>TotalJS has many examples at <a href="https://github.com/totaljs/example" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>, but all of them is written with no any explanation. Remember that source code only it won’t help us to understand what is going on the framework itself.</p><h3 id="Hard-to-contribute"><a href="#Hard-to-contribute" class="headerlink" title="Hard to contribute"></a>Hard to contribute</h3><p>If you take a look the source code of TotalJS, there are few big files written more than 15K of code line and unfortunately, they wrote the source code with very little comments of explanation in their source code. So for everyone who wants to contribute for the framework seems imposible.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TotalJS is a fast and rapid development to build a Rest, IoT and Fullstack project. Most of my project which is in short deadline, I prefer to choose this TotalJS framework. Because it was written in pure JavaScript and I able to learn all features only for 2-3 weeks. Sure, this is really simple and easy framework to learning even for newbie who haven’t tried NodeJS before.</p><p>TotalJS can be use as library, so you are possible to use some of TotalJS features in other framework.</p><p>Thank You for your time to reading my article, hope I didn’t miss a thing and please correct me if I’m wrong about this framework.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6EcEgRw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Hello guys, There is a lot of NodeJS Framework out there, but in this article, I will talk about TotalJS Framework. I will describe all the pros and cons about TotalJS Framework. Since I write this article, actually I was working with many projects with using TotalJS as framework. It was around 6 months I was learning about TotalJS Framework. So from my experience, hope I can better to explain what is the pros and cons of using TotalJS Framework.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="https://hexoder.com/categories/Research/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
      <category term="framework" scheme="https://hexoder.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>Create Professional Library in NPM Package</title>
    <link href="https://hexoder.com/post/create-professional-library-in-npm-package/"/>
    <id>https://hexoder.com/post/create-professional-library-in-npm-package/</id>
    <published>2019-12-06T09:08:50.054Z</published>
    <updated>2019-12-07T17:01:22.116Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NuT2Nzw.jpg" alt=""></p><p>Hello guys, Today I will write a tutorial how to create a professional library and make your library published in NPM Package. I know there is a lot similar tutorial like this, but I will make this tutorial more systematic and more explanation to help you understand more easier.</p><a id="more"></a><h2 id="Study-Case"><a href="#Study-Case" class="headerlink" title="Study Case"></a>Study Case</h2><p>In this tutorial, Assume that you are will be create a library name <code>text-obfuscator</code>. <code>text-obfuscator</code> is just a simple library to obfuscate the text.</p><h2 id="Pre-Software-Requirement"><a href="#Pre-Software-Requirement" class="headerlink" title="Pre Software Requirement"></a>Pre Software Requirement</h2><ol><li>Visual Studio Code</li><li>Git</li></ol><h3 id="Install-Visual-Studio-Code"><a href="#Install-Visual-Studio-Code" class="headerlink" title="Install Visual Studio Code"></a>Install Visual Studio Code</h3><p>We will going to use Visual Studio Code, but actualy you are able to use any IDE to code. I use Visual Studio Code because this is the top popular editor in the world. Visual Studio Code is Free, you can download it from <a href="https://code.visualstudio.com/Download" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a> and follow the step to install it.</p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><p>Git is the version control software to help you manage your repository of your project in Github. Git is an open source project so you are free to download it from <a href="https://git-scm.com/downloads" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a> and follow the step from it website to install it.</p><h2 id="Pre-Account-Requirement"><a href="#Pre-Account-Requirement" class="headerlink" title="Pre Account Requirement"></a>Pre Account Requirement</h2><p>Before we start to create a library. You have to register on 4 resources, it is:</p><ol><li><a href="https://github.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Github</a></li><li><a href="https://travis-ci.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis</a></li><li><a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a></li><li><a href="https://npmjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NPMJS</a></li></ol><h3 id="Create-an-account-to-Github"><a href="#Create-an-account-to-Github" class="headerlink" title="Create an account to Github"></a>Create an account to Github</h3><p>Visit to <a href="https://github.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Github</a> and register your account in there. After you are finished to register, then you have to create your first repository. For example if your username is <code>aalfiann</code>, then if your repository name is <code>text-obfuscator</code> so your full link to your repository is <code>https://github.com/aalfiann/text-obfuscator</code>.</p><h3 id="Clone-your-Repository"><a href="#Clone-your-Repository" class="headerlink" title="Clone your Repository"></a>Clone your Repository</h3><p>To clone your repository, you just go visit to <code>https://github.com/aalfiann/text-obfuscator</code> then on the top-right there is green button name <code>Clone or Download</code>, just click on it then copy the url from textbox, so your git link is <code>https://github.com/aalfiann/text-obfuscator.git</code>.</p><p>After you have the git link, now open your Visual Studio Code, then press <code>CTRL+SHIFT+P</code>, paste the git link, wait for a second then you will get popup message to Open this Repository, just click it. Now you will open the project which is has been already connected with your repository on Github.</p><p>Now just minimize your Visual Studio Code and go for the next step below.</p><h3 id="Create-an-account-to-Travis"><a href="#Create-an-account-to-Travis" class="headerlink" title="Create an account to Travis"></a>Create an account to Travis</h3><p>Visit to <a href="https://travis-ci.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis</a> then make a registration first in there. After register is done, now go to <a href="https://travis-ci.com/account/repositories" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Settings</a>. Then on top-left you will see the green button name <code>Sync Account</code>, just click it. Wait for a second, after sync progress is done, now you will see your repository name is appearing on the right box. Okay, that is enough for now, we will continue this later to trigger the build test after the source code is uploaded on github.</p><h3 id="Create-an-account-to-Coveralls"><a href="#Create-an-account-to-Coveralls" class="headerlink" title="Create an account to Coveralls"></a>Create an account to Coveralls</h3><p>Visit to <a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a> then make a registration first in there. After register is done, now go to <a href="https://coveralls.io/repos/new" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Add New Repo</a>. Then on top-right you will see button name <code>Sync Repo</code>, just click on it. Wait for a second, then your repository name will be appear in there. You will see gray button <code>OFF</code>, then click it to make coveralls listen to your repository in realtime to detect whats changes from your repository in Github.</p><h3 id="Create-an-account-to-NPMJS"><a href="#Create-an-account-to-NPMJS" class="headerlink" title="Create an account to NPMJS"></a>Create an account to NPMJS</h3><p>Visit to <a href="https://npmjs.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NPMJS</a> to create your account. You have to register to NPM website because this is required to publish your package library in NPM. After you are successfully register, just leave it, you can logout because later we will login to NPM through command from Terminal.</p><h2 id="Making-a-library"><a href="#Making-a-library" class="headerlink" title="Making a library"></a>Making a library</h2><p>After you follow all the steps above, now we go back to open your minimized Visual Studio Code. You will see that your project is still empty. So follow the next step below to making your first library.</p><h3 id="NPM-Init"><a href="#NPM-Init" class="headerlink" title="NPM Init"></a>NPM Init</h3><p>The first thing to do is you have to open the terminal from Visual Studio Code, then run command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>Then follow all the steps, for the test part just enter it, so you have no script test as for now. We will configure it later in the next step.</p><h3 id="Configure-Unit-Test"><a href="#Configure-Unit-Test" class="headerlink" title="Configure Unit Test"></a>Configure Unit Test</h3><p>I have write the full article about create unit test at <a href="https://hexoder.com/post/setup-unit-test-with-mocha-nyc-travis-coveralls/">here</a>. Just follow all steps from it. Once it done, you can go for next step below.</p><h3 id="Create-structure-library"><a href="#Create-structure-library" class="headerlink" title="Create structure library"></a>Create structure library</h3><p>Structure can be anything, but for a standard which is many people use is like this:</p><ul><li>src/</li><li>test/</li><li>.gitignore</li><li>.travis.yml</li><li>LICENSE</li><li>package-lock.json</li><li>package.json</li><li>README.md</li></ul><p>Note:</p><ul><li><code>src/</code> directory is your source code library.</li><li><code>test/</code> directory is your unit test file.</li></ul><h3 id="Create-the-source-code"><a href="#Create-the-source-code" class="headerlink" title="Create the source code"></a>Create the source code</h3><p>Now create new file name <code>text-obfuscator.js</code> inside <code>src/</code> directory.<br>Just paste this code and saved it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * TextObfuscator v1.0.2 ES6 [NodeJS or Browser]</span></span><br><span class="line"><span class="comment"> * https://github.com/aalfiann/text-obfuscator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2019 M ABD AZIZ ALFIAN</span></span><br><span class="line"><span class="comment"> * Released under the MIT license</span></span><br><span class="line"><span class="comment"> * https://github.com/aalfiann/text-obfuscator/blob/master/LICENSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> TextObfuscator = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine value is string</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value</span></span><br><span class="line"><span class="comment">     * @return &#123;bool&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _isString: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'string'</span> || value <span class="keyword">instanceof</span> <span class="built_in">String</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make chunk array (start from first char)</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value </span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of chunked text value</span></span><br><span class="line"><span class="comment">     * @return &#123;array&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _make: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, o = <span class="number">0</span>, numChunks = <span class="built_in">Math</span>.ceil(value.length / size), chunks = <span class="keyword">new</span> <span class="built_in">Array</span>(numChunks);</span><br><span class="line">        <span class="keyword">for</span>(i, o; i &lt; numChunks; ++i, o += size) &#123;</span><br><span class="line">            chunks[i] = value.substr(o, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chunks;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make chunk array reverse (start from last char)</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value </span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of chunked text value</span></span><br><span class="line"><span class="comment">     * @return &#123;array&#125; </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _remake: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, len = value.length, data = <span class="keyword">this</span>._make(value,size), datalen = data.length, chunks = <span class="keyword">new</span> <span class="built_in">Array</span>(datalen), last = data[datalen<span class="number">-1</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (;i&lt;datalen;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(len&gt;=size) &#123;</span><br><span class="line">                chunks[i] = value.substr((len-size),size);</span><br><span class="line">                len -= size;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chunks[i] = value.substr(<span class="number">0</span>,last);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chunks;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encode or Obfuscate the text </span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the text value to be encoded</span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of text to obfuscate</span></span><br><span class="line"><span class="comment">     * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    encode: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._isString(value)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Value must be string'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>._make(value,size), len = data.length;</span><br><span class="line">        <span class="keyword">while</span>(len) &#123;</span><br><span class="line">            --len;</span><br><span class="line">            result += data[len];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode or deobfuscate the text</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; value            this is the encoded text</span></span><br><span class="line"><span class="comment">     * @param &#123;string|integer&#125; size     this is the size of text to deobfuscate</span></span><br><span class="line"><span class="comment">     * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    decode: <span class="function"><span class="keyword">function</span>(<span class="params">value,size=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">        size = <span class="built_in">parseInt</span>(size);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>._isString(value)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Value must be string'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>._remake(value,size), i = <span class="number">0</span>, len = data.length;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;len;i++) &#123;</span><br><span class="line">            result += data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = TextObfuscator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you have already the source code of your library.</p><h3 id="Create-unit-test-file"><a href="#Create-unit-test-file" class="headerlink" title="Create unit test file"></a>Create unit test file</h3><p>Now create a file name <code>obfuscator.js</code> in <code>test/</code> directory.<br>Just paste with this code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> TextObfuscator = <span class="built_in">require</span>(<span class="string">'../src/text-obfuscator'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'obfuscator test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'value must be string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.encode([]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'isString helper'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="string">'abc'</span>),<span class="literal">true</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="number">1</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString([]),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(&#123;&#125;),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">true</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">false</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">null</span>),<span class="literal">false</span>);</span><br><span class="line">        assert.equal(TextObfuscator._isString(<span class="literal">undefined</span>),<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'make chunk array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._make(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">3</span>),</span><br><span class="line">        [ <span class="string">'abc'</span>, <span class="string">'def'</span>, <span class="string">'ghi'</span>, <span class="string">'jkl'</span>, <span class="string">'mno'</span>, <span class="string">'pqr'</span>, <span class="string">'stu'</span>, <span class="string">'vwx'</span>, <span class="string">'yz'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'remake reversed chunk array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._remake(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">3</span>),</span><br><span class="line">        [ <span class="string">'xyz'</span>, <span class="string">'uvw'</span>, <span class="string">'rst'</span>, <span class="string">'opq'</span>, <span class="string">'lmn'</span>, <span class="string">'ijk'</span>, <span class="string">'fgh'</span>, <span class="string">'cde'</span>, <span class="string">'ab'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'make chunk array like simple reverse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._make(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>),</span><br><span class="line">        [ <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>, <span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>, <span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>, <span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>, <span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>, <span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>, <span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>, <span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>, <span class="string">'y'</span>,<span class="string">'z'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'remake reversed chunk array like simple reverse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.deepEqual(TextObfuscator._remake(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>),</span><br><span class="line">        [ <span class="string">'z'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>, <span class="string">'w'</span>,<span class="string">'v'</span>,<span class="string">'u'</span>, <span class="string">'t'</span>,<span class="string">'s'</span>,<span class="string">'r'</span>, <span class="string">'q'</span>,<span class="string">'p'</span>,<span class="string">'o'</span>, <span class="string">'n'</span>,<span class="string">'m'</span>,<span class="string">'l'</span>, <span class="string">'k'</span>,<span class="string">'j'</span>,<span class="string">'i'</span>, <span class="string">'h'</span>,<span class="string">'g'</span>,<span class="string">'f'</span>, <span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>,<span class="string">'a'</span> ]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'obfuscate the text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator.encode(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="number">2</span>),<span class="string">'yzwxuvstqropmnklijghefcdab'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'deobfuscate text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.equal(TextObfuscator.decode(<span class="string">'yzwxuvstqropmnklijghefcdab'</span>,<span class="number">2</span>),<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'obfuscate only works with string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.encode([<span class="string">'12345'</span>]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'deobfuscate only works with string'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        assert.throws(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            TextObfuscator.decode([<span class="string">'54321'</span>]);</span><br><span class="line">        &#125;,<span class="built_in">Error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now assume that you already have the unit test file.</p><h3 id="Make-run-your-unit-test"><a href="#Make-run-your-unit-test" class="headerlink" title="Make run your unit test"></a>Make run your unit test</h3><p>To run your unit test, just run this command into terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Now you will get the result like this.<br><img src="https://i.imgur.com/Pb5S1Lu.jpg" alt=""></p><p>You will see that there uncovered line with yellow color, it means that you have test it line but it was still for one condition, there is still another conditions which is are not tested yet. Unfortunately it can not be tested because it must be tested on browser. Ah I forgot to tell you that the <code>text-obfuscator</code> is could be run in NodeJS or Browser. Because on the last line there is condition for <code>window</code> which is it must be tested on browser, so that is why unit test is missed for one line.</p><h3 id="Create-README-md"><a href="#Create-README-md" class="headerlink" title="Create README.md"></a>Create README.md</h3><p>README is the file that you should give the information detail about the project. For this example you can just paste with this below:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># text-obfuscator</span></span><br><span class="line">[<span class="string">![NPM</span>](<span class="link">https://nodei.co/npm/text-obfuscator.png?downloads=true&amp;downloadRank=true&amp;stars=true</span>)](<span class="link">https://nodei.co/npm/text-obfuscator/</span>)  </span><br><span class="line">  </span><br><span class="line">[<span class="string">![npm version</span>](<span class="link">https://img.shields.io/npm/v/text-obfuscator.svg?style=flat-square</span>)](<span class="link">https://www.npmjs.org/package/text-obfuscator</span>)</span><br><span class="line">[<span class="string">![Build Status</span>](<span class="link">https://travis-ci.org/aalfiann/text-obfuscator.svg?branch=master</span>)](<span class="link">https://travis-ci.org/aalfiann/text-obfuscator</span>)</span><br><span class="line">[<span class="string">![Coverage Status</span>](<span class="link">https://coveralls.io/repos/github/aalfiann/text-obfuscator/badge.svg?branch=master</span>)](<span class="link">https://coveralls.io/github/aalfiann/text-obfuscator?branch=master</span>)</span><br><span class="line">[<span class="string">![Known Vulnerabilities</span>](<span class="link">https://snyk.io//test/github/aalfiann/text-obfuscator/badge.svg?targetFile=package.json</span>)](<span class="link">https://snyk.io//test/github/aalfiann/text-obfuscator?targetFile=package.json</span>)</span><br><span class="line">[<span class="string">![dependencies Status</span>](<span class="link">https://david-dm.org/aalfiann/text-obfuscator/status.svg</span>)](<span class="link">https://david-dm.org/aalfiann/text-obfuscator</span>)</span><br><span class="line">![<span class="string">License</span>](<span class="link">https://img.shields.io/npm/l/text-obfuscator</span>)</span><br><span class="line">![<span class="string">NPM download/month</span>](<span class="link">https://img.shields.io/npm/dm/text-obfuscator.svg</span>)</span><br><span class="line">![<span class="string">NPM download total</span>](<span class="link">https://img.shields.io/npm/dt/text-obfuscator.svg</span>)  </span><br><span class="line">Simple Text Obfuscator for NodeJS or Browser.</span><br><span class="line"></span><br><span class="line">Because sometimes we want to obfuscate a text in client browser for <span class="code">`key`</span>, <span class="code">`id`</span>, <span class="code">`base64`</span>, etc.</span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>You can see that you could put the badge into README.md file.</li></ul><h3 id="Push-into-github"><a href="#Push-into-github" class="headerlink" title="Push into github"></a>Push into github</h3><p>After everything is done, now you can go push your source code into Github by this command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="Trigger-Build-in-Travis"><a href="#Trigger-Build-in-Travis" class="headerlink" title="Trigger Build in Travis"></a>Trigger Build in Travis</h3><p>After your source code is successfully uploaded into github, now go visit to <a href="https://travis-ci.com/account/repositories" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis-Settings</a>. Then click on your repository name, then on the top-right there is button name <code>More options</code> just click on it. Then the dropdown will apearing and there is <code>Trigger build</code> menu, so just click on it.</p><p>Now the build test will be running for a minute, just wait for it. Once it done, you can go for the next step below.</p><h3 id="Publish-into-NPM-Package"><a href="#Publish-into-NPM-Package" class="headerlink" title="Publish into NPM Package"></a>Publish into NPM Package</h3><p>When build is passed, you can just publish it into NPM Package by this command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm login</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><p>Yeah that is done, now your package you can view it on <code>https://www.npmjs.com/package/text-obfuscator</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sorry there is no much image for the step, because trust me the register for an account is very simple even for a newbie.</p><p>Also the study case is a real library which was created for professional use. Actually I was use this <code>text-obfuscator</code> library for many important projects.</p><p>For more detail you can check the source code is available on <a href="https://github.com/aalfiann/text-obfuscator" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">https://github.com/aalfiann/text-obfuscator</a>.</p><p>Hope you are able to create your own library and publish it on your NPM Package. Feel free to ask if you are have problem or miss understanding about this tutorial.</p><p>Thank You.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NuT2Nzw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Hello guys, Today I will write a tutorial how to create a professional library and make your library published in NPM Package. I know there is a lot similar tutorial like this, but I will make this tutorial more systematic and more explanation to help you understand more easier.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://hexoder.com/categories/Tutorial/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="library" scheme="https://hexoder.com/tags/library/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Introduction About JsonQL in NodeJS</title>
    <link href="https://hexoder.com/post/introduction-about-jsonql-in-nodejs/"/>
    <id>https://hexoder.com/post/introduction-about-jsonql-in-nodejs/</id>
    <published>2019-12-04T14:53:58.949Z</published>
    <updated>2019-12-05T04:39:13.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sohRRJI.jpg" alt=""></p><p>Hello guys, Today I would like to make some little research about JsonQL. So if you are first time hearing about JsonQL, the definitions about JsonQL is maybe “Json Query Language”. Why I said maybe? because before I write this post, I have research through google and found nothing about this kind technology. Actualy, I just found about jasperreports which is a Free Java Reporting Library. But we will not talk about making report guys. Jasperreports is not what I want to learn about JsonQL. In this article, we will talk about what is JsonQL? How to use and what is the benefit for us?</p><a id="more"></a><h2 id="NoSQL-Embedded"><a href="#NoSQL-Embedded" class="headerlink" title="NoSQL Embedded"></a>NoSQL Embedded</h2><p>It was 6 months already I made some projects will the power of Total.js Framework. And surely, I love this Total.js Framework because so simple and truly a rapid development framework and one of reasons why I choose TotalJS is because they have built in <code>NoSQL Embedded</code>. NoSQL Embedded is a database management which your data is saved as json as filebased (json file).</p><p>NoSQL Embedded is very good for small database or creating small prototype application. But actualy I was use NoSQL Embedded for 1 million rows and trustme, it still so fast. But when you are in big database, you will have high risk to get Javascript Heap Out of Memory. To avoid this, you should read carefully about my previous article at <a href="https://hexoder.com/post/how-to-avoid-javascript-heap-out-of-memory/">here</a>.</p><p>NoSQL Embedded TotalJS has many features which is almost like the other of nosql databases. It query is very strong, accurate and easy to configure in multiple conditions.</p><p>Example simple query:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set database users</span></span><br><span class="line"><span class="keyword">var</span> user = NOSQL(<span class="string">'users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// query find users</span></span><br><span class="line">user.find().make(<span class="function"><span class="keyword">function</span>(<span class="params">builder</span>) </span>&#123;</span><br><span class="line">  builder.where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="number">20</span>);</span><br><span class="line">  builder.where(<span class="string">'confirmed'</span>, <span class="literal">true</span>);</span><br><span class="line">  builder.callback(<span class="function"><span class="keyword">function</span>(<span class="params">err, response, count</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>For more detail you can see in their <a href="https://docs.totaljs.com/latest/en.html#api~Database" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">documentation</a>.</p><h2 id="JsonQL"><a href="#JsonQL" class="headerlink" title="JsonQL"></a>JsonQL</h2><p>JsonQL is the Json Query Language. which means that you are able to query with the power of json structure.</p><p>JsonQL idea was comes up from my mind, After I using NoSQL Embedded more and more often in growing application. My code is getting big and the readability is going harder slowly. So I was thinking that, how to make query is eficient, simple and clean like in mostly RDBMS? So I created <a href="https://www.npmjs.com/package/jsonql-totaljs" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsonql-totaljs</a> library which is to help you make easier to query with NoSQL Embedded.</p><h3 id="Query-Like-SQL"><a href="#Query-Like-SQL" class="headerlink" title="Query Like SQL"></a>Query Like SQL</h3><p>If you are familiar with SQL Query, don’t worry, my <code>jsonql-totaljs</code> library is using same SQL format in JsonQL way.</p><p>JsonQL Example:</p><ul><li><p>Select</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select:&#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'age'</span>,<span class="string">'&gt;'</span>,<span class="number">10</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Insert</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    insert: &#123;</span><br><span class="line">      into:<span class="string">'dt_user'</span>,</span><br><span class="line">      values:[</span><br><span class="line">        &#123;</span><br><span class="line">          id:<span class="string">'10'</span>,</span><br><span class="line">          name:<span class="string">'aziz'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Update</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    update: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="keyword">set</span>:&#123;</span><br><span class="line">        id:<span class="string">'10'</span>,</span><br><span class="line">        name:<span class="string">'aziz alfian'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Modify</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    modify: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="keyword">set</span>:&#123;</span><br><span class="line">        name:<span class="string">'M ABD AZIZ ALFIAN'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Delete</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">delete</span>: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'aziz'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p>After you see the example above, it is similar with SQL Query, more easier and very readable right?</p><h3 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title="Parallel Execution"></a>Parallel Execution</h3><p>Please look at the example above, you will see that the JsonQL is under an element of array. It is because the library of <code>jsonql-totaljs</code> has features parallel or multiple request query by single execution.</p><p>Example Multiple Query</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'wawan'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'address'</span>,<span class="string">'=='</span>,<span class="string">'jakarta'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>The process behind of this parallel execution is on top <code>Promise.all</code> and the output is in array format.</p><h3 id="Multiple-Join-or-As-Nested"><a href="#Multiple-Join-or-As-Nested" class="headerlink" title="Multiple Join or As Nested"></a>Multiple Join or As Nested</h3><p>Join is the most common required things in building query. The fact is to create join with using NoSQL embedded way is little bit dificult and confusing. But when you are in JsonQL way, everything will going simple.</p><ul><li><p>Join<br>This is the very simple join.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Join Nested<br>Sometime we want to create join in nested way.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span>,</span><br><span class="line">          join:[</span><br><span class="line">            &#123;</span><br><span class="line">              name:<span class="string">'additional'</span>,</span><br><span class="line">              <span class="keyword">from</span>:<span class="string">'user_other'</span>,</span><br><span class="line">              on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">              first:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>Join Nested Manually<br>Here is to create join nested manually, so we can set the sequence of the data to be nested.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ],</span><br><span class="line">      join:[</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'dt_profile'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'dt_profile'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'additional'</span>,</span><br><span class="line">          <span class="keyword">from</span>:<span class="string">'user_other'</span>,</span><br><span class="line">          on:[<span class="string">'id'</span>,<span class="string">'id'</span>],</span><br><span class="line">          first:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      nested:[<span class="string">'dt_profile'</span>,<span class="string">'additional'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><h3 id="Multiple-Query-Format"><a href="#Multiple-Query-Format" class="headerlink" title="Multiple Query Format"></a>Multiple Query Format</h3><p>For easier to implement the JsonQL into your development code. <code>jsonql-totaljs</code> has multiple query format.<br>Which is you can use <code>array-object string</code>, <code>json string</code>, or <code>array-object</code> to build queries.</p><p>Example:</p><ul><li><p>array-object string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="string">"[&#123;select:&#123;from:'dt_user'&#125;&#125;]"</span>;</span><br></pre></td></tr></table></figure></li><li><p>json string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="string">"[&#123;"</span>select<span class="string">":&#123;"</span><span class="keyword">from</span><span class="string">":"</span>dt_user<span class="string">"&#125;&#125;]"</span>;</span><br></pre></td></tr></table></figure></li><li><p>array-object<br>array object is same like the others example above.</p></li></ul><h3 id="Can-be-use-outside-TotalJS-Framework"><a href="#Can-be-use-outside-TotalJS-Framework" class="headerlink" title="Can be use outside TotalJS Framework"></a>Can be use outside TotalJS Framework</h3><p>I’ve created this library is for TotalJS Framework only at the first time. But today you can use this library in another NodeJS framework. But the requirement for this is you have to use the latest version of TotalJS. You know that TotalJS framework is can be use as helper library. This is the one of TotalJS pros than other framework.</p><h3 id="Complete-Documentation"><a href="#Complete-Documentation" class="headerlink" title="Complete Documentation"></a>Complete Documentation</h3><p><code>jsonql-totaljs</code> has complete documentation which is available in their <a href="https://github.com/aalfiann/jsonql-totaljs/wiki" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Wiki</a>. I will not rewrite all things from documentation in this article, because I know, it will Too Long Didn’t Read.</p><p>So here is the basic tutorial how to use <code>jsonql-totaljs</code> :</p><ul><li><p>Install by NPM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install jsonql-totaljs</span><br></pre></td></tr></table></figure></li><li><p>Get Started</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JsonQL = <span class="built_in">require</span>(<span class="string">'jsonql-totaljs'</span>);</span><br><span class="line"><span class="comment">// create new object jsonql</span></span><br><span class="line"><span class="keyword">const</span> jsonql = <span class="keyword">new</span> JsonQL();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// build query</span></span><br><span class="line"><span class="keyword">var</span> query = [</span><br><span class="line">  &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      fields:[<span class="string">'user_id'</span>,<span class="string">'name'</span>],</span><br><span class="line">      <span class="keyword">from</span>:<span class="string">'dt_user'</span>,</span><br><span class="line">      where:[</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'budi'</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// with callback</span></span><br><span class="line">jsonql.query(q).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);        </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// on top promise</span></span><br><span class="line">jsonql.query(q).promise().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>JsonQL is will make you easier to create query with NoSQL embedded database. With JsonQL, you long query will still readable. No spagethi code because JsonQL is already having nice structure.</p><p>So here is the benefit of using JsonQL :</p><ul><li>Easier and readable query</li><li>Your source code is more cleaner</li><li>Simple multiple join table</li><li>Support parallel query in single execution</li><li>Support Promise, so you have no worry about callback hell</li><li>Saving your time to make builder of query function</li><li>Query support in string which means the query can be saved into database</li><li>etc</li></ul><p>Actualy there is more benefit of using JsonQL, but remember that not all application is suitable to use JsonQL. Just use JsonQL if your application is require this.</p><p>Thank You.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sohRRJI.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Hello guys, Today I would like to make some little research about JsonQL. So if you are first time hearing about JsonQL, the definitions about JsonQL is maybe “Json Query Language”. Why I said maybe? because before I write this post, I have research through google and found nothing about this kind technology. Actualy, I just found about jasperreports which is a Free Java Reporting Library. But we will not talk about making report guys. Jasperreports is not what I want to learn about JsonQL. In this article, we will talk about what is JsonQL? How to use and what is the benefit for us?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="https://hexoder.com/categories/Research/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="library" scheme="https://hexoder.com/tags/library/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>How to Avoid JavaScript Heap Out of Memory</title>
    <link href="https://hexoder.com/post/how-to-avoid-javascript-heap-out-of-memory/"/>
    <id>https://hexoder.com/post/how-to-avoid-javascript-heap-out-of-memory/</id>
    <published>2019-11-19T10:46:20.398Z</published>
    <updated>2019-11-20T04:45:24.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PGbrPwe.jpg" alt=""><br>Hello guys, today I would like to write about How to Avoid JavaScript Heap Out of Memory in NodeJS.<br><code>JavaScript heap out of memory</code> is normally happend when you are reading very large file.<br>But sometimes this could happen when you are in big loop process to push data into array.</p><a id="more"></a><h2 id="What-is-JavaScript-Heap-Out-of-Memory"><a href="#What-is-JavaScript-Heap-Out-of-Memory" class="headerlink" title="What is JavaScript Heap Out of Memory?"></a>What is JavaScript Heap Out of Memory?</h2><p>JavaScript Heap Out of Memory means you have reach the limit of NodeJS memory usage. The strict standar limit memory usage in V8 is around 1.7 GB. So you have to increase this manually if you have reach this limit.</p><h2 id="Using-Stream"><a href="#Using-Stream" class="headerlink" title="Using Stream"></a>Using Stream</h2><p>When you are going to handle big file in NodeJS, the best practice is using <code>stream</code>. Because stream will break apart process into line per line, so the CPU can breath longer when processing big data. But using native <code>stream</code> is still not enough for very very large data file. You still get <code>JavaScript Heap Out of Memory</code>. So I going to describe what is the simple way and the best way of using stream to avoid JavaScript Heap Out of Memory below here.</p><h3 id="Simple-Way"><a href="#Simple-Way" class="headerlink" title="Simple Way"></a>Simple Way</h3><p>After I take a look searching through google and make some research. The very simple way to avoid JavaScript Heap Out of Memory in NodeJS is using <code>createReadStream</code>.</p><ul><li>Example for read file<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = fs.createReadStream(<span class="string">'your/path/file'</span>);</span><br><span class="line">reader.on(<span class="string">'data'</span>, (line) =&gt; &#123;</span><br><span class="line">  <span class="comment">// handle data line per line here</span></span><br><span class="line">&#125;);</span><br><span class="line">reader.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line">reader.on(<span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>If you’re file is under 400Mb, then above method is still work well. But how if you’re file is very large? like 1Gb or 2Gb in size? Actually this way is still fails (not working), you still get <code>JavaScript Heap Out of Memory</code>.</p><p>To solve this problem you should run extra arguments when executing your js.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --max-old-space-size=4096 yourFile.js</span><br></pre></td></tr></table></figure><p>Very simple way because you have already increase the strict standar limit of memory usage in NodeJS. This is working but actually I don’t recommend to use this way.</p><h3 id="Best-Way"><a href="#Best-Way" class="headerlink" title="Best Way"></a>Best Way</h3><p>So what is the best way to handle big file? The answer is turn your native stream into event stream.<br>Yeah I know this is not simple, but thanks to him, this guy name <code>Dominictarr</code> was created the <a href="https://www.npmjs.com/package/event-stream" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">event-stream</a> library which is this library is the best eficient way to play with stream in NodeJS.</p><p>Example for read file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'event-stream'</span>);</span><br><span class="line"></span><br><span class="line">fs.createReadStream(<span class="string">'your/path/file'</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    es.mapSync(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// handle data line per line here</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>I successfully to read log file around 2Gb in size with this way without have to set</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--max-old-space-size=4096</span><br></pre></td></tr></table></figure><h3 id="Big-JSON-File-Problem"><a href="#Big-JSON-File-Problem" class="headerlink" title="Big JSON File Problem"></a>Big JSON File Problem</h3><p>I facing another issue when the file is json string. That above method is very slow, it is because to parse your data to json object. But thanks to him again, <code>Dominictarr</code> create another <a href="https://www.npmjs.com/package/JSONStream" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">JSONStream</a> library which is to improve the performance in <code>event-stream</code> while parsing to json object.</p><p>Example to parse big json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> es = <span class="built_in">require</span>(<span class="string">'event-stream'</span>);</span><br><span class="line"><span class="keyword">const</span> jsonStream = <span class="built_in">require</span>(<span class="string">'JSONStream'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = [];</span><br><span class="line">fs.createReadStream(<span class="string">'your/path/file'</span>)</span><br><span class="line">  .pipe(jsonStream.parse())</span><br><span class="line">  .pipe(</span><br><span class="line">    es.mapSync(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">      json.push(line);</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reading file success!'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>event-stream</code> + <code>JSONStream</code> will make improve the performance speed 3x faster for parsing string to json object.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Using stream is the best practice to handle big data. But not for speed. Even you are successfully to avoid JavaScript Heap Out of Memory in NodeJS, reading big file is always slow.</p><p>Always remember that, just stop or better don’t ever think to use file for saving big data in the future. If right now you having big file for example like log file, just try to move it into database engine like <code>ElasticSearch</code> or <code>Hadoop</code>. This will make your life easier to manage your log data.</p><p>Thank You.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PGbrPwe.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Hello guys, today I would like to write about How to Avoid JavaScript Heap Out of Memory in NodeJS.&lt;br&gt;&lt;code&gt;JavaScript heap out of memory&lt;/code&gt; is normally happend when you are reading very large file.&lt;br&gt;But sometimes this could happen when you are in big loop process to push data into array.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="https://hexoder.com/categories/Research/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="library" scheme="https://hexoder.com/tags/library/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>How to JSON Query in JavaScript</title>
    <link href="https://hexoder.com/post/how-to-json-query-in-javascript/"/>
    <id>https://hexoder.com/post/how-to-json-query-in-javascript/</id>
    <published>2019-11-15T12:22:32.462Z</published>
    <updated>2019-11-16T08:10:39.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/J5AhPjY.png" alt=""><br>JSON is a format to sharing data as alternative to XML because this is very ligtweight and very readable. JSON mostly used in JavaScript Programming but infact this can be use for another programming language including <code>PHP</code>, <code>Phyton</code>, <code>Ruby</code>, <code>Java</code>, etc.</p><a id="more"></a><p>Using JSON is very simple, because JavaScript can read directly into the object. But the problem is to query the JSON is not easy when it is on big array. So in this topic we will try to how to make JSON doing query to <code>search</code>, <code>join</code>, <code>merge</code>, <code>groupBy</code>, <code>sum</code>, <code>groupDetail</code>, <code>orderBy</code>, <code>limit</code>, <code>skip</code>, <code>pagination</code>, etc.</p><h2 id="JSON-Query"><a href="#JSON-Query" class="headerlink" title="JSON Query"></a>JSON Query</h2><p>To JSON Query I will try to use as native way and using library. So what I’m gonna choose is <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a>. Why? Because it is very fast and lightweight, the size is only <strong>4Kb</strong> when minified and gzipped. Also this library is build with the native way, so it is fair enough to compare with the native way.</p><h2 id="Example-Data"><a href="#Example-Data" class="headerlink" title="Example Data"></a>Example Data</h2><p>I will use this example data for this tutorial</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = [</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">13</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">5</span>, <span class="attr">name</span>:<span class="string">'Wilfred'</span>, <span class="attr">age</span>:<span class="number">26</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">user_id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">'Merry'</span>, <span class="attr">age</span>:<span class="number">31</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user_contact = [</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">address</span>:<span class="string">'California'</span>, <span class="attr">email</span>:<span class="string">'california@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'44556677'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">address</span>:<span class="string">'South West'</span>, <span class="attr">email</span>:<span class="string">'sout.west@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'12322144'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">3</span>, <span class="attr">address</span>:<span class="string">'Jakarta'</span>, <span class="attr">email</span>:<span class="string">'jakarta@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'89119796'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">4</span>, <span class="attr">address</span>:<span class="string">'Sidney, Australia'</span>, <span class="attr">email</span>:<span class="string">'sidney.australia@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'33525478'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>:<span class="number">5</span>, <span class="attr">address</span>:<span class="string">'Tokyo'</span>, <span class="attr">email</span>:<span class="string">'tokyo@mail.com'</span>, <span class="attr">phone</span>:<span class="string">'51167889'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car_brand = [</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ford'</span>, <span class="attr">color</span>:<span class="string">'black'</span>, <span class="attr">stock</span>:<span class="number">12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ford'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">26</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Ferarri'</span>, <span class="attr">color</span>:<span class="string">'red'</span>, <span class="attr">stock</span>:<span class="number">8</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Porsche'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">9</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">brand</span>:<span class="string">'Peugot'</span>, <span class="attr">color</span>:<span class="string">'white'</span>, <span class="attr">stock</span>:<span class="number">13</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Using-Fly-Json-ODM"><a href="#Using-Fly-Json-ODM" class="headerlink" title="Using Fly Json ODM"></a>Using Fly Json ODM</h2><p>Because I choose to use <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a> library to compare with native way, this is how to use fly-json-odm:</p><ul><li><p>You can install from NPM for NodeJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install fly-json-odm</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FlyJson = <span class="built_in">require</span>(<span class="string">'fly-json-odm'</span>);</span><br><span class="line"><span class="keyword">var</span> odm = <span class="keyword">new</span> FlyJson();</span><br><span class="line"><span class="comment">// below here is for your query</span></span><br></pre></td></tr></table></figure></li><li><p>You can use CDN for browser</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/fly-json-odm@1.8.4/dist/flyjson.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> odm = <span class="keyword">new</span> FlyJson();</span><br><span class="line">  <span class="comment">// below here is for your query</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>For more detail is on their <a href="https://github.com/aalfiann/fly-json-odm/wiki" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">documentation</a>.</p></li></ul><h2 id="Tutorial-JSON-Query"><a href="#Tutorial-JSON-Query" class="headerlink" title="Tutorial JSON Query"></a>Tutorial JSON Query</h2><p>By using native way below here you should consider about:</p><ol><li>Clone array to prevent your original data.</li><li>Loop is blocking for big data.</li><li>This is just the basic function you need make some improve for using in production.</li></ol><p>So let’s start the tutorial json query with common cases.</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>Simple searching by key value in json array.</p><ul><li><p>Native way<br>To perform search in JSON you will need <code>filter</code> and <code>indexOf</code> function like this below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">obj1,name,searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.filter(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key[name].indexOf(searchTerm) &gt; <span class="number">-1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = search(user,<span class="string">'name'</span>,<span class="string">'Wil'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).where(<span class="string">'name'</span>,<span class="string">'=='</span>,<span class="string">'Wil'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>With fly-json-odm you are able to search by using comparison operator.<br>Example: <code>==</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>LIKE</code>, <code>NOT LIKE</code>, etc.</p></li><li><p>Expected result<br>You can see the at <a href="https://jsfiddle.net/aalfiann/Lqw8usr7/14/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"user_id"</span>:<span class="number">5</span>,<span class="attr">"name"</span>:<span class="string">"Wilfred"</span>,<span class="attr">"age"</span>:<span class="number">26</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Join-On"><a href="#Join-On" class="headerlink" title="Join On"></a>Join On</h3><p>Join on means joining two json array by key and result as nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params">obj1,obj2,alias,name1,name2</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// we create index for obj2, to be use later in loop</span></span><br><span class="line">  <span class="keyword">const</span> indexB = obj2.reduce(<span class="function">(<span class="params">result,item</span>) =&gt;</span> &#123; </span><br><span class="line">    result[item[name2]] = item;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// create result in array first</span></span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mapping the obj1</span></span><br><span class="line">  obj1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// create newdata</span></span><br><span class="line">    <span class="keyword">var</span> newdata = &#123;&#125;;</span><br><span class="line">    <span class="comment">// get the obj1 key to array</span></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(obj1[index]);</span><br><span class="line">    <span class="comment">// count the array</span></span><br><span class="line">    <span class="keyword">var</span> l = arr.length;</span><br><span class="line">    <span class="comment">// loop the obj1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">      <span class="comment">// using alias will add new object nested for obj2</span></span><br><span class="line">      <span class="keyword">if</span>(arr[i] === name1) &#123;</span><br><span class="line">        <span class="keyword">if</span>(alias === arr[i]) &#123;</span><br><span class="line">          newdata[arr[i]] = indexB[obj1[index][arr[i]]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newdata[alias] = indexB[obj1[index][arr[i]]];</span><br><span class="line">          newdata[arr[i]] = value[arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newdata[arr[i]] = value[arr[i]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// push new object into result</span></span><br><span class="line">    result.push(newdata);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = join(user,user_contact,<span class="string">'user_id'</span>,<span class="string">'user_id'</span>,<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>Join two json array as nested actualy is very complicated in native way.</p></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).join(<span class="string">'user_id'</span>,user_contact).on(<span class="string">'user_id'</span>,<span class="string">'id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>With fly-json-odm is very simple and your code will be more cleaner.</p></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/fa7eumrd/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"user_id"</span>: &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"tokyo@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"51167889"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">   <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"Jakarta"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"jakarta@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"89119796"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Join-Merge"><a href="#Join-Merge" class="headerlink" title="Join Merge"></a>Join Merge</h3><p>Join Merge means joining two json array without nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joinMerge</span>(<span class="params">obj1,obj2,name1,name2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we create index for obj2, to be use later in map</span></span><br><span class="line">  <span class="keyword">const</span> indexB = obj2.reduce(<span class="function">(<span class="params">result,item</span>) =&gt;</span> &#123; </span><br><span class="line">    result[item[name2]] = item; </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> obj1.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Object</span>.assign(item,indexB[item[name1]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = joinMerge(user,user_contact,<span class="string">'user_id'</span>,<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).join(<span class="string">'user_id'</span>,user_contact).merge(<span class="string">'user_id'</span>,<span class="string">'id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/wkLazqvt/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"tokyo@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"51167889"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span>,</span><br><span class="line"> <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"address"</span>: <span class="string">"Jakarta"</span>,</span><br><span class="line"> <span class="attr">"email"</span>: <span class="string">"jakarta@mail.com"</span>,</span><br><span class="line"> <span class="attr">"phone"</span>: <span class="string">"89119796"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Group-By-Sum"><a href="#Group-By-Sum" class="headerlink" title="Group By + Sum"></a>Group By + Sum</h3><p>This is just grouping by name property of json array. Support with SUM but this is optional.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span>(<span class="params">obj1, name, sumField=[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> l = sumField.length;</span><br><span class="line">  <span class="keyword">var</span> data = obj1.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, obj</span>) </span>&#123;</span><br><span class="line">    obj.item_count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(obj[name] <span class="keyword">in</span> res)) &#123;</span><br><span class="line">      res.__array.push(res[obj[name]] = obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">        res[obj[name]][sumField[i]] += obj[sumField[i]];</span><br><span class="line">      &#125;</span><br><span class="line">      res[obj[name]][<span class="string">'item_count'</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// average</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</span><br><span class="line">      res[obj[name]][<span class="string">'average_'</span>+sumField[i]] = (res[obj[name]][sumField[i]]/res[obj[name]][<span class="string">'item_count'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;, &#123;<span class="attr">__array</span>:[]&#125;);</span><br><span class="line">  <span class="keyword">return</span> data.__array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = groupBy(car_brand, <span class="string">'brand'</span>, [<span class="string">'stock'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(car_brand).groupBy(<span class="string">'brand'</span>,[<span class="string">'stock'</span>]).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/av7zdycn/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"black"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">38</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">19</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Ferarri"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">8</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">8</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Porsche"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">9</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">9</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"brand"</span>: <span class="string">"Peugot"</span>,</span><br><span class="line"> <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line"> <span class="attr">"stock"</span>: <span class="number">13</span>,</span><br><span class="line"> <span class="attr">"item_count"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"average_stock"</span>: <span class="number">13</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Grouping-Detail"><a href="#Grouping-Detail" class="headerlink" title="Grouping Detail"></a>Grouping Detail</h3><p>This will grouping the json array and the detail will display as nested.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupDetail</span>(<span class="params">obj1, name, groupName=<span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = obj1.reduce(<span class="function">(<span class="params">objectsByKeyValue, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = obj[name];</span><br><span class="line">    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);</span><br><span class="line">    <span class="keyword">return</span> objectsByKeyValue;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">var</span> group = [];</span><br><span class="line">  <span class="keyword">if</span>(groupName) &#123;</span><br><span class="line">    group.push(&#123;[groupName]:data&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    group.push(&#123;[name]:data&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> group;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = groupDetail(car_brand, <span class="string">'brand'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(car_brand).groupDetail(<span class="string">'brand'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/qtp4fh8c/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"brand"</span>: &#123;</span><br><span class="line">  <span class="attr">"Ford"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"black"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">12</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ford"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">26</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Ferarri"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Ferarri"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">8</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Porsche"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Porsche"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">9</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"Peugot"</span>: [&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Peugot"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"stock"</span>: <span class="number">13</span></span><br><span class="line">  &#125;]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Order-By"><a href="#Order-By" class="headerlink" title="Order By"></a>Order By</h3><p>To sort the json array in ASC or DESC.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sortBy</span>(<span class="params">field, reverse, primer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = primer ? </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> primer(x[field])&#125; : </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x[field]&#125;;</span><br><span class="line">  reverse = !reverse ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a = key(a), b = key(b), reverse * ((a &gt; b) - (b &gt; a));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderBy</span>(<span class="params">obj1,name,desc=true,primer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.sort(_sortBy(name,desc,primer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = orderBy(user,<span class="string">'user_id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).orderBy(<span class="string">'user_id'</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/xt4qpeba/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"John"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">13</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>Limit the json array output to display.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params">obj1, size</span>) </span>&#123;</span><br><span class="line">  obj1.length = size;</span><br><span class="line">  <span class="keyword">return</span> obj1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = limit(user,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).take(<span class="number">2</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/fqxbzoka/3/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"user_id"</span>:<span class="number">1</span>,<span class="attr">"name"</span>:<span class="string">"John"</span>,<span class="attr">"age"</span>:<span class="number">13</span>&#125;,&#123;<span class="attr">"user_id"</span>:<span class="number">5</span>,<span class="attr">"name"</span>:<span class="string">"Wilfred"</span>,<span class="attr">"age"</span>:<span class="number">26</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Skip"><a href="#Skip" class="headerlink" title="Skip"></a>Skip</h3><p>Skip some element of json array output.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params">obj1, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj1.slice(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = skip(user,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user).skip(<span class="number">1</span>).exec();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/sho541ke/1/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Wilfred"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">"user_id"</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"Merry"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">31</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h3><p>When data is big, we should don’t display them all, so we must create a pagination.<br>Actualy you can just doing this by combining <code>limit</code> and <code>skip</code>, but this is the alternative method.</p><ul><li><p>Native way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paginate</span>(<span class="params">obj1, page, page_size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = obj1.length;</span><br><span class="line">  --page; <span class="comment">// because pages logically start with 1, but technically with 0</span></span><br><span class="line">  obj1 = obj1.slice(page * page_size, (page + <span class="number">1</span>) * page_size);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result:obj1,</span><br><span class="line">    metadata: &#123;</span><br><span class="line">      page:(page+<span class="number">1</span>),</span><br><span class="line">      page_size:page_size,</span><br><span class="line">      total_page:<span class="built_in">Math</span>.ceil(count / page_size),</span><br><span class="line">      total_records:count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = paginate(user_contact,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Fly Json ODM way</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = odm.set(user_contact).paginate(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>Expected result<br>You can see at <a href="https://jsfiddle.net/aalfiann/k13rj4xg/3/" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsfiddle</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"result"</span>: [&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"California"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"california@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"44556677"</span></span><br><span class="line"> &#125;, &#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"South West"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"sout.west@mail.com"</span>,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"12322144"</span></span><br><span class="line"> &#125;],</span><br><span class="line"> <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">  <span class="attr">"page"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"page_size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"total_page"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"total_records"</span>: <span class="number">5</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Native way is very fast and no one libraries can beat the native way. But for complex json query, your code will hard to read and you will lose many hours of your time just only to create the function for spesific condition.</p><p>With using <a href="https://www.npmjs.com/package/fly-json-odm" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">fly-json-odm</a>, to do json query is more easier because:</p><ul><li>Similar as SQL Query.</li><li>Function is chainable.</li><li>Asynchronous support.</li><li>Work in memory so your original data is safe.</li></ul><p>There is <code>lodash</code>, <code>underscore</code> and <code>ramda</code> which is also help you to json query. But I don’t use it because for me it is too bloated and slow in performance to use in browser. If you looking for tutorial json query with this library, you can easily find through google because too many article write this out there.</p><p>Thank you</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/J5AhPjY.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;JSON is a format to sharing data as alternative to XML because this is very ligtweight and very readable. JSON mostly used in JavaScript Programming but infact this can be use for another programming language including &lt;code&gt;PHP&lt;/code&gt;, &lt;code&gt;Phyton&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt;, etc.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://hexoder.com/categories/Tutorial/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="library" scheme="https://hexoder.com/tags/library/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
      <category term="javascript" scheme="https://hexoder.com/tags/javascript/"/>
    
      <category term="native" scheme="https://hexoder.com/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>The Fastest Loop in JavaScript</title>
    <link href="https://hexoder.com/post/the-fastest-loop-in-javascript/"/>
    <id>https://hexoder.com/post/the-fastest-loop-in-javascript/</id>
    <published>2019-11-13T00:05:07.039Z</published>
    <updated>2019-11-20T04:45:24.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/awApNb5.jpeg" alt=""><br>Today I have research for the <code>loop</code> which is the very basic to make some operations in JavaScript.<br>In this research we will take a look, what is the fastest way <code>loop</code> method for handle big data array?</p><a id="more"></a><h2 id="Problem-in-Loop"><a href="#Problem-in-Loop" class="headerlink" title="Problem in Loop"></a>Problem in Loop</h2><p>We all already know that there is a big problem in loop.<br>When you are want to iterate big data array, loop is blocking, so there is possibility to make your application freeze if you are not care to choose the loop method properly.</p><h2 id="Myth-in-fastest-loop"><a href="#Myth-in-fastest-loop" class="headerlink" title="Myth in fastest loop"></a>Myth in fastest loop</h2><p>So far I have already searching through <code>google</code> and find the best answer from <code>stackoverflow</code> about fastest loop in javascript is :</p><ol><li><p>for loop cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while reverse cached length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = array.length; <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>A lot of my project is using this above answer for loop, and the second answer is the fastest loop method.<br>But actualy, there is still another fast loop way that I just found it yesterday. He found another fast loop method which is he described at <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">medium here</a>.</p><p>I very courious about his benchmark and I also want to create my own benchmark about loop in javascript.</p><h2 id="The-loop-method-in-javascript"><a href="#The-loop-method-in-javascript" class="headerlink" title="The loop method in javascript"></a>The loop method in javascript</h2><p>Before we going into the main benchmark, there is many loop method available in javascript, it is:</p><ul><li><strong>for</strong><br>A <code>for</code> loop repeats until a specified condition evaluates to false. This statements is very similar with Java and C <code>for</code> loop.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; array.length;i++) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>for in</strong><br>The <code>for in</code> statement iterates a specified variable over all the enumerable properties of an object.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>do while</strong><br>The <code>do while</code> statement repeats until a specified condition evaluates to false.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; array.length)</span><br></pre></td></tr></table></figure></li><li><strong>while</strong><br>A <code>while</code> statement executes its statements as long as a specified condition evaluates to true.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; array.length) &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>forEach</strong><br>The <code>forEach()</code> method executes a provided function once for each array element.<br>Example<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Benchmark-Loop"><a href="#Benchmark-Loop" class="headerlink" title="Benchmark Loop"></a>Benchmark Loop</h2><p>Based on above <code>loop</code> statements, I will not benchmarked them all. I just choose 3 fastest loop only.</p><h3 id="Setup-boilerplate"><a href="#Setup-boilerplate" class="headerlink" title="Setup boilerplate"></a>Setup boilerplate</h3><p>This will create array for 1 million element and executed before the benchmark loop running.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x=<span class="number">0</span>;x&lt;<span class="number">1000000</span>;x++) &#123;</span><br><span class="line">  array.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h3 id="Setup-block"><a href="#Setup-block" class="headerlink" title="Setup block"></a>Setup block</h3><p>I will use <code>let</code> than <code>var</code> because using <code>let</code> for loop is more faster than using <code>var</code>. Why? because in browser if you using <code>var</code> for benchmarking without function scope, <code>var</code> will be added to <code>global object</code>.</p><ul><li><p><strong>for with cached length</strong> (this is best stackoverflow answer)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, max=array.length;i&lt;max;i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>while reverse</strong> (most people assume this is fast for browser)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = array.length;</span><br><span class="line"><span class="keyword">while</span> (max--) &#123;</span><br><span class="line">  result = array[max];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>another for</strong> (this is the fastest loop)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> max = array.length;</span><br><span class="line"><span class="keyword">for</span>(; i &lt; max; i++) &#123;</span><br><span class="line">  result = array[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Benchmark-Result"><a href="#Benchmark-Result" class="headerlink" title="Benchmark Result"></a>Benchmark Result</h3><p>Here is the benchmark result from <a href="https://jsperf.com/fastest-loop-javascript" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">jsperf</a>.<br><img src="https://i.imgur.com/FR6tr8r.png" alt=""></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Based on benchmark result, I can confirm that the fastest loop is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;<span class="keyword">const</span> max = array.length;<span class="keyword">for</span>(; i &lt; max; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><p>You can read in very detail how he found this fastest loop in <a href="https://medium.com/kbdev/voyage-to-the-most-efficient-loop-in-nodejs-and-a-bit-js-5961d4524c2e" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">here</a>.</p><p>Thank You</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/awApNb5.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Today I have research for the &lt;code&gt;loop&lt;/code&gt; which is the very basic to make some operations in JavaScript.&lt;br&gt;In this research we will take a look, what is the fastest way &lt;code&gt;loop&lt;/code&gt; method for handle big data array?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="https://hexoder.com/categories/Research/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://hexoder.com/tags/javascript/"/>
    
      <category term="native" scheme="https://hexoder.com/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>Install Wine 4 on Elementary OS Juno</title>
    <link href="https://hexoder.com/post/install-wine-4-on-elementary-os-juno/"/>
    <id>https://hexoder.com/post/install-wine-4-on-elementary-os-juno/</id>
    <published>2019-11-12T10:22:17.098Z</published>
    <updated>2019-11-12T14:02:38.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8O2cOO7.png" alt=""><br>I know there is a lot of tutorial how to install Wine 4 out there.<br>But there is little for specific distro like <code>Elementary OS Juno</code> and the explanation is not detail so error happening is always happen for newbie who has new in linux world.</p><a id="more"></a><p>This website is about <code>Javascript</code> but why we talk out of programming?</p><p>My reason to write this tutorial is:</p><ol><li><p>Wine is the simple way to make test our <code>NodeJS</code> application bundled for windows is running well or not. So if you passed in Wine, I can guarantee you application is also works 100% in real Windows.</p></li><li><p>I has been moved from <code>mac</code> to use <code>linux</code> and <code>Elementary OS</code> is very similar with <code>mac</code>.</p></li><li><p><code>Elementary OS</code> is based from <code>Ubuntu</code> and the official repository from Ubuntu is still using Wine 3 version. Wine 3 is no too old to use, because for application which is using higher than Net Framework 4, is really worst, so you might not able to run many windows application today with <code>Wine 3</code>.</p></li></ol><p>Before we going to the tutorial, You must know what is Wine was created for and how wine works behind.</p><h2 id="What-is-Wine"><a href="#What-is-Wine" class="headerlink" title="What is Wine?"></a>What is Wine?</h2><p>Wine is a free and open-source compatibility layer that aims to allow computer programs (application software and computer games) developed for Microsoft Windows to run on Unix-like operating systems.</p><h2 id="How-Wine-works-behind"><a href="#How-Wine-works-behind" class="headerlink" title="How Wine works behind?"></a>How Wine works behind?</h2><p>In above statement (I just copied from Wikipedia) means Wine works on layer to run windows application on top unix libraries. So Wine is not an <strong>EMULATOR</strong> or <strong>Cross Platform engine</strong>, so not all windows applications will be run seamlessly.</p><h2 id="What-Benefit-using-Wine"><a href="#What-Benefit-using-Wine" class="headerlink" title="What Benefit using Wine?"></a>What Benefit using Wine?</h2><p>Because Wine is not an Emulator or Cross Platform engine, the benefit is you will save a lot of memory resources. This is really fast and stable (Wine 4).</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>In this tutorial is for Elementary OS Juno, because EOS Juno is based on Ubuntu Bionic, so this tutorial might be also works for Ubuntu 18.04 (Bionic).</p><h3 id="Install-Wine-4"><a href="#Install-Wine-4" class="headerlink" title="Install Wine 4"></a>Install Wine 4</h3><ul><li><p>Setup PPA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>Add Repositories</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###  Elementary OS Juno is based on Ubuntu 18.04 </span></span><br><span class="line">sudo apt-add-repository <span class="string">'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'</span></span><br></pre></td></tr></table></figure></li><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Troubleshoot<br>If you face unmet dependencies error during installation,<br>use the following commands to install winehq using aptitude.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install winehq-stable</span><br></pre></td></tr></table></figure></li><li><p>Check Version<br>To make sure Wine is installed properly, You can try to check the Wine version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="Winetricks"><a href="#Winetricks" class="headerlink" title="Winetricks"></a>Winetricks</h3><p>Winetricks is to make you easier manage the application or additonal library for windows. Also Winetricks will help you to install dependencies of Windows libraries like .dll, dotnet, etc. Because sometimes application installer doesn’t provide default dependecies.</p><h3 id="Install-Winetricks"><a href="#Install-Winetricks" class="headerlink" title="Install Winetricks"></a>Install Winetricks</h3><ul><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install winetricks</span><br></pre></td></tr></table></figure></li><li><p>Cleanup any application<br>Before we going to set wine prefix, You are required to delete any installed windows applications first.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r -f ~/.wine</span><br></pre></td></tr></table></figure></li><li><p>Using 32bit only</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot</span><br></pre></td></tr></table></figure></li><li><p>Using 32/64bit<br>As default Wine will detect automatically your processor is 64bit or not. If your computer is 64bit, so default <code>.wine</code> directory is for 64bit application. To make Wine also works for 32bit, you have to create new <code>.wine32</code> directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine32 wine wineboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Recomendations"><a href="#Recomendations" class="headerlink" title="Recomendations"></a>Recomendations</h3><p>I will recommend you to set Wineprefix to default <code>32bit only</code>, because 64bit in Wine is still buggy and maybe you can not install dependecies properly from Winetricks. I’m not saying to not set prefix to <code>64bit</code>, but there is more tricky and very hard for newbie to solving it.</p><h3 id="Install-Default-Windows-Fonts"><a href="#Install-Default-Windows-Fonts" class="headerlink" title="Install Default Windows Fonts"></a>Install Default Windows Fonts</h3><p>Wine not install all default windows fonts, so many application looks bad because font is not installed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install msttcorefonts</span><br></pre></td></tr></table></figure><p>Note: Sometimes wine will not see new fonts installed, so you need to restart the computer.</p><h2 id="Most-Common-Problems"><a href="#Most-Common-Problems" class="headerlink" title="Most Common Problems"></a>Most Common Problems</h2><h3 id="Icon-Shortcut-Not-Working"><a href="#Icon-Shortcut-Not-Working" class="headerlink" title="Icon Shortcut Not Working"></a>Icon Shortcut Not Working</h3><p>Sometimes installer is finish to install windows application, but the icon shortcut is not working.<br>To solved this you have to edit the <code>.desktop</code> file.</p><p>Example cases:<br>I have installed Riot application from installer. So the wine path of it’s application is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.wine/drive_c/Program Files/Riot/Riot.exe</span><br></pre></td></tr></table></figure><ul><li><p>Edit the <code>.desktop</code> file<br>First you can go to directory of wine programs shortcut in</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><p>You will see that any application icon shortcut is placed in there.<br>Now you just go inside the application directory in there.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Riot/</span><br></pre></td></tr></table></figure><p>Edit using nano editor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano riot.desktop</span><br></pre></td></tr></table></figure></li><li><p>Edit only the <code>Exec=</code> which is on line 3, become like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Riot</span><br><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=true</span><br><span class="line">Path=/home/YOUR_USERNAME/.wine/dosdevices/c:/Program Files/Riot</span><br><span class="line">Icon=31A0_Riot.0</span><br><span class="line">StartupWMClass=riot.exe</span><br></pre></td></tr></table></figure><p>Explanation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=sh -c &quot;cd /home/YOUR_USERNAME/.wine/drive_c/Program\ Files/Riot/; wine Riot.exe&quot;</span><br></pre></td></tr></table></figure><p>That command is same as in terminal to go directory <code>Riot</code>, then execute wine to run <code>Riot.exe</code>.<br>Don’t forget to change <code>YOUR_USERNAME</code> with your username in Elementary OS.</p><p>If you want to try, you can just <a href="https://riot.en.softonic.com" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">download Riot application here</a>.</p></li></ul><h3 id="Uninstall-is-not-refresh-the-icon-shortcut"><a href="#Uninstall-is-not-refresh-the-icon-shortcut" class="headerlink" title="Uninstall is not refresh the icon shortcut"></a>Uninstall is not refresh the icon shortcut</h3><p>To solved this you can just delete the <code>.desktop</code> file in</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/YOUR_USERNAME/.<span class="built_in">local</span>/share/applications/wine/Programs/</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far I use wine 4, for many windows application is around 80% is works properly. Almost game online which is required <code>gameguard</code> is fail to run.</p><p>I know there is a way to install Wine 4 by using <code>snap</code> or <code>flatpack</code>, but that is not good for newbie, because you will don’t know how wine is works behind and maybe you will be more dificult to use <code>wine</code> with <code>winetricks</code>.</p><p>And before you try to install some popular application, for example like <code>Microsoft Office</code>, <code>Photoshop</code>, etc. Better you check first in <a href="https://appdb.winehq.org/objectManager.php?sClass=application&iId=31" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Wine DB</a> to make sure it is running properly on your Wine (version 4) or not. So you can choose the version of application properly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8O2cOO7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;I know there is a lot of tutorial how to install Wine 4 out there.&lt;br&gt;But there is little for specific distro like &lt;code&gt;Elementary OS Juno&lt;/code&gt; and the explanation is not detail so error happening is always happen for newbie who has new in linux world.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://hexoder.com/categories/Tutorial/"/>
    
    
      <category term="app" scheme="https://hexoder.com/tags/app/"/>
    
      <category term="wine" scheme="https://hexoder.com/tags/wine/"/>
    
      <category term="elementary-os" scheme="https://hexoder.com/tags/elementary-os/"/>
    
      <category term="ubuntu" scheme="https://hexoder.com/tags/ubuntu/"/>
    
      <category term="linux" scheme="https://hexoder.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Setup Unit Test with Mocha + NYC + Travis and Coveralls</title>
    <link href="https://hexoder.com/post/setup-unit-test-with-mocha-nyc-travis-coveralls/"/>
    <id>https://hexoder.com/post/setup-unit-test-with-mocha-nyc-travis-coveralls/</id>
    <published>2019-11-11T18:55:53.332Z</published>
    <updated>2019-11-12T13:55:54.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/bjdmclk.png" alt=""><br>Unit test is a way to make sure your code is running well before integration into core application. The most popular library to achieve this is <code>Mocha</code>, <code>NYC</code>, <code>Travis-CI</code> and <code>Coveralls</code>.</p><a id="more"></a><p>If you are working as backend developer, unit test is a must thing to do. So before we going to the main tutorial, firstly we must know about :</p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a><a href="https://www.npmjs.com/package/mocha" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Mocha</a></h2><p>Mocha is the Javascript test framework which is running in NodeJS also in browser.</p><h2 id="NYC"><a href="#NYC" class="headerlink" title="NYC"></a><a href="https://www.npmjs.com/package/nyc" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">NYC</a></h2><p>In the past we knew this as <code>Istanbul</code>, this is a command line interface for unit test.</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis-CI"></a><a href="https://travis-ci.org" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Travis-CI</a></h2><p>Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub. We needed this to make sure our application is <code>build passing</code> or not. You have to register first and don’t worry, Travis is always free for open source projects.</p><h2 id="Coveralls"><a href="#Coveralls" class="headerlink" title="Coveralls"></a><a href="https://coveralls.io" target="_blank" target="_blank" rel="noopener external nofollow noopener noreferrer">Coveralls</a></h2><p>Ensure that all your new code is fully covered, and see coverage trends emerge. You need this to know which line of your code is uncovered or skipped of being test. You have to register first and don’t worry, this free as long as your projects is open source.</p><h2 id="Setup-Tutorial"><a href="#Setup-Tutorial" class="headerlink" title="Setup Tutorial"></a>Setup Tutorial</h2><h3 id="Install-Library"><a href="#Install-Library" class="headerlink" title="Install Library"></a>Install Library</h3><p>Make sure you install this library from NPM.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mocha mocha-lcov-reporter coveralls nyc --save-dev</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>Create or edit your <code>.gitignore</code> file like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">coverage</span><br><span class="line">.nyc_output</span><br></pre></td></tr></table></figure><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>Create or edit your <code>.travis.yml</code> file like this</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"node"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"10"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"9"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"8"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"6"</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm@latest</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--dev</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">test</span></span><br><span class="line"><span class="attr">after_success:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>Modify your package json only on the <code>scripts</code> part.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "nyc --reporter=html --reporter=text mocha",</span><br><span class="line">    "coverage": "nyc report --reporter=text-lcov | coveralls"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="Run-Test"><a href="#Run-Test" class="headerlink" title="Run Test"></a>Run Test</h3><p>You can just run your unit test with use command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h3><p>To make your project looks more confident and professional, you must put the badge from <code>Travis</code> and <code>Coveralls</code> like this below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME.svg?branch=master)](https://travis-ci.org/YOUR_USERNAME/YOUR_PROJECT_NAME)</span><br><span class="line">[![Coverage Status](https://coveralls.io/repos/github/YOUR_USERNAME/YOUR_PROJECT_NAME/badge.svg?branch=master)](https://coveralls.io/github/YOUR_USERNAME/YOUR_PROJECT_NAME?branch=master)</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article I just tell you how to setup unit test only. So actualy you have to create your unit test first by your self. In the next article, I will write tutorial create simple app with unit test. So don’t forget to bookmark this website. I will always happy to share my knowledge for all of you guys.</p><p>Thank You.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bjdmclk.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Unit test is a way to make sure your code is running well before integration into core application. The most popular library to achieve this is &lt;code&gt;Mocha&lt;/code&gt;, &lt;code&gt;NYC&lt;/code&gt;, &lt;code&gt;Travis-CI&lt;/code&gt; and &lt;code&gt;Coveralls&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://hexoder.com/categories/Tutorial/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="learning" scheme="https://hexoder.com/tags/learning/"/>
    
      <category term="javascript" scheme="https://hexoder.com/tags/javascript/"/>
    
      <category term="native" scheme="https://hexoder.com/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>Right Way to Deep Clone Object JavaScript</title>
    <link href="https://hexoder.com/post/right-way-to-deep-clone-object-javascript/"/>
    <id>https://hexoder.com/post/right-way-to-deep-clone-object-javascript/</id>
    <published>2019-11-10T10:03:50.157Z</published>
    <updated>2019-12-05T05:17:43.642Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/r1WVKPR.jpg" alt=""><br>Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:</p><a id="more"></a><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><p>The most best answer in <code>Stackoverflow</code>, to deep clone an object javascript is just like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify());</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-bad-practice"><a href="#Then-why-this-is-bad-practice" class="headerlink" title="Then why this is bad practice?"></a>Then why this is bad practice?</h3><h3 id="Convertion-Problem"><a href="#Convertion-Problem" class="headerlink" title="Convertion Problem"></a>Convertion Problem</h3><p>The problem is <code>JSON.stringify()</code> cloud lead into wrong convertion. Because it just convert the javascript <code>Object</code> into <code>String</code>. You can not control for spesific instance inside the object.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="literal">undefined</span> &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="built_in">Symbol</span>() &#125;);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">key</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; &#125;);</span><br><span class="line"><span class="comment">// all will be converted to just "&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>Date()</code> will also parsed to string, so you will lose it.</li></ul><h3 id="Not-Eficient-very-slow"><a href="#Not-Eficient-very-slow" class="headerlink" title="Not Eficient (very slow)"></a>Not Eficient (very slow)</h3><p>I have test to deep clone 1 million object and this take higher than 1 seconds (<code>1823ms</code>). This will freeze your application since this way is blocking (synchronous). You have to be more tricky to avoid this blocking for handle big object.</p><h2 id="Good-Practice"><a href="#Good-Practice" class="headerlink" title="Good Practice"></a>Good Practice</h2><p>We should go back to use primitive way by using <code>loop</code> and <code>recursion</code>.</p><p>Example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone, i;</span><br><span class="line">  <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">  <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">    clone = [];</span><br><span class="line">    <span class="keyword">var</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">  clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Then-why-this-is-good-practice"><a href="#Then-why-this-is-good-practice" class="headerlink" title="Then why this is good practice?"></a>Then why this is good practice?</h3><h3 id="Easy-to-modify"><a href="#Easy-to-modify" class="headerlink" title="Easy to modify"></a>Easy to modify</h3><p>Because using loop you can put any condition inside the logic.</p><h3 id="5x-faster"><a href="#5x-faster" class="headerlink" title="5x faster"></a>5x faster</h3><p>This is 5x faster comparing with <code>JSON.parse(JSON.stringify())</code>. I have test this with 1 million object and it just takes <code>150ms</code>.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Before I write this topic, I have research carefully about deepClone, especially for the performance in NodeJS.</p><h3 id="json-parse-stringify-js"><a href="#json-parse-stringify-js" class="headerlink" title="json-parse-stringify.js"></a>json-parse-stringify.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="loop-recursive-js"><a href="#loop-recursive-js" class="headerlink" title="loop-recursive.js"></a>loop-recursive.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">var</span> clone = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Build '</span>+end+<span class="string">' object'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =start;i&lt;=end;i++) &#123;</span><br><span class="line">            array.push(&#123; <span class="attr">id</span>:i, <span class="attr">name</span>:<span class="string">'user_'</span>+i &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone, i;</span><br><span class="line">    <span class="comment">// if parameter is not array or object then just return it so you will not lose spesific instance.</span></span><br><span class="line">    <span class="comment">// ex. Date(), Symbol(), function(), etc.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> array !== <span class="string">'object'</span> || !array) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// if object is array then convert this to string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'[object Array]'</span> === <span class="built_in">Object</span>.prototype.toString.apply(array)) &#123;</span><br><span class="line">      clone = [];</span><br><span class="line">      <span class="keyword">var</span> len = array.length;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) clone[i] = deepClone(array[i]);</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle object (skip if doesn't have property)</span></span><br><span class="line">    clone = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array) <span class="keyword">if</span> (array.hasOwnProperty(i)) clone[i] = deepClone(array[i]);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildObject().then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(array.length+<span class="string">' object has been build'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="keyword">var</span> time_start = <span class="built_in">Date</span>.now();</span><br><span class="line">    clone = deepClone(array);</span><br><span class="line">    <span class="keyword">var</span> time_end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Finish clone '</span>+array.length+<span class="string">' object: '</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString().replace(<span class="string">'T'</span>,<span class="string">' '</span>).replace(<span class="string">'Z'</span>,<span class="string">''</span>).substr(<span class="number">0</span>,<span class="number">19</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Total execution time: '</span>+ (time_end-time_start)+<span class="string">'ms'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'======'</span>);</span><br><span class="line">    <span class="keyword">return</span> resolve;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I know there is another way to deepClone an object in javascript. You could using <code>jQuery</code> or <code>Lodash</code>, but the performance is very bad. I recommend you to using native way.</p><p>So this is only small research from me about deep clone object in javascript. The decision is going back to yours.</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/r1WVKPR.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Deep clone an object array in JavaScript is not simple. Because it still brings the reference of previous object. This could lead a problem in your application. So in this topic, I will divide into two ways:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Research" scheme="https://hexoder.com/categories/Research/"/>
    
    
      <category term="nodejs" scheme="https://hexoder.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://hexoder.com/tags/javascript/"/>
    
      <category term="native" scheme="https://hexoder.com/tags/native/"/>
    
  </entry>
  
</feed>
